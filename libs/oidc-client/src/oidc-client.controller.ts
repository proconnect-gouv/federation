import {
  Controller,
  Get,
  Inject,
  Param,
  Req,
  Res,
  Body,
  Post,
} from '@nestjs/common';
import { LoggerService } from '@fc/logger';
import {
  IIdentityManagementService,
  IIdentityCheckService,
} from './interfaces';
import { IDENTITY_MANAGEMENT_SERVICE, IDENTITY_CHECK_SERVICE } from './tokens';
import { OidcClientService } from './oidc-client.service';

@Controller('/api/v2')
export class OidcClientController {
  constructor(
    private readonly oidcClientService: OidcClientService,
    private readonly logger: LoggerService,
    @Inject(IDENTITY_MANAGEMENT_SERVICE)
    private readonly identityManagementService: IIdentityManagementService,
    @Inject(IDENTITY_CHECK_SERVICE)
    private readonly identityCheckService: IIdentityCheckService,
  ) {}

  /** @TODO validation body by DTO */
  @Post('/redirect-to-idp')
  async redirectToIdp(@Req() req, @Res() res, @Body() body) {
    this.logger.debug('/api/v2/redirect-to-idp');
    // acr_values is an oidc defined variable name
    // eslint-disable-next-line @typescript-eslint/camelcase
    const { scope, providerName, acr_values, uid } = body;

    req.session.uid = uid;

    const authorizationUrl = await this.oidcClientService.getAuthorizeUrl(
      scope,
      providerName,
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/camelcase
      acr_values,
      req,
    );

    res.redirect(authorizationUrl);
  }

  /** @TODO valiate input by DTO */
  @Get('/oidc-callback/:providerName')
  async getOidcCallback(
    @Param('providerName') providerName,
    @Req() req,
    @Res() res,
  ) {
    this.logger.debug('/api/v2/oidc-callback');

    const { uid } = req.session;

    const {
      access_token: accessToken,
    } = await this.oidcClientService.getTokenSet(req, providerName);

    const user = await this.oidcClientService.getUserInfo(
      accessToken,
      providerName,
    );

    // This function can throw a FcError and interrupt the cinematic
    const userChecked = await this.identityCheckService.check(user);

    this.logger.debug(userChecked);

    this.identityManagementService.storeIdentity(uid, user);

    // pas sur de la fin de la cinématique
    res.redirect(`/interaction/${req.session.uid}/consent`);
  }

  /**
   * @TODO implement!
   */
  @Get('logout-callback')
  getLogoutCallback() {
    // retourne sur le FS une fois la session du FI terminé
  }

  /**
   * @TODO implement proper well-known
   *  - generated by oidc-provider
   *  - pub keys orverrided by keys from HSM
   */
  @Get('/client/.well-known/keys')
  async getWellKnownKeys() {
    this.logger.debug('/.well-known/keys');
    return this.oidcClientService.wellKnownKeys();
  }
}
