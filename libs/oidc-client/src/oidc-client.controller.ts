import {
  Controller,
  Get,
  Inject,
  Param,
  Req,
  Res,
  Body,
  Post,
} from '@nestjs/common';
import { LoggerService } from '@fc/logger';
import { IIdentityService } from './interfaces';
import { IDENTITY_SERVICE } from './tokens';
import { OidcClientService } from './oidc-client.service';

@Controller('/api/v2')
export class OidcClientController {
  constructor(
    private readonly oidcClient: OidcClientService,
    private readonly logger: LoggerService,
    @Inject(IDENTITY_SERVICE)
    private readonly identity: IIdentityService,
  ) {}

  /**
   * @TODO validation body by DTO
   * @TODO control IdP is available
   */
  @Post('/redirect-to-idp')
  async redirectToIdp(@Req() req, @Res() res, @Body() body) {
    this.logger.debug('/api/v2/redirect-to-idp');
    // acr_values is an oidc defined variable name
    // eslint-disable-next-line @typescript-eslint/camelcase
    const { scope, providerName, acr_values, uid } = body;

    req.session.uid = uid;

    const authorizationUrl = await this.oidcClient.getAuthorizeUrl(
      scope,
      providerName,
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/camelcase
      acr_values,
      req,
    );

    res.redirect(authorizationUrl);
  }

  /**
   * @TODO valiate input by DTO
   * @TODO control session before access (DTO?)
   * @TODO control IdP is available
   */
  @Get('/oidc-callback/:providerId')
  async getOidcCallback(
    @Param('providerId') providerId,
    @Req() req,
    @Res() res,
  ) {
    this.logger.debug('/api/v2/oidc-callback');

    // OIDC: call idp's /token endpoint
    const tokenSet = await this.oidcClient.getTokenSet(req, providerId);
    const { access_token: accessToken } = tokenSet;

    // OIDC: call idp's /userinfo endpoint
    const user = await this.oidcClient.getUserInfo(accessToken, providerId);

    // BUSINESS: Locally store received identity
    const { acr } = tokenSet.claims();
    const meta = { identityProviderId: providerId, acr };
    const { uid } = req.session;
    this.identity.storeIdentity(uid, user, meta);

    // BUSINESS: Redirect to business page
    res.redirect(`/interaction/${uid}/consent`);
  }

  /**
   * @TODO implement proper well-known
   *  - generated by oidc-provider
   *  - pub keys orverrided by keys from HSM
   */
  @Get('/client/.well-known/keys')
  async getWellKnownKeys() {
    this.logger.debug('/.well-known/keys');
    return this.oidcClient.wellKnownKeys();
  }
}
