import {
  Controller,
  Get,
  Param,
  Req,
  Res,
  Body,
  Post,
  Inject,
  ValidationPipe,
  UsePipes,
} from '@nestjs/common';
import { EventBus } from '@nestjs/cqrs';
import { OidcClientService } from './oidc-client.service';
import { SessionService } from '@fc/session';
import { IDENTITY_PROVIDER_SERVICE } from './tokens';
import { IIdentityProviderService } from './interfaces';
import { OidcClientTokenEvent, OidcClientUserinfoEvent } from './events';
import { RedirectToIdp, GetOidcCallback } from './dto';

@Controller('/api/v2')
export class OidcClientController {
  constructor(
    private readonly oidcClient: OidcClientService,
    private readonly session: SessionService,
    @Inject(IDENTITY_PROVIDER_SERVICE)
    private readonly identityProvider: IIdentityProviderService,
    private readonly eventBus: EventBus,
  ) {}

  /**
   * @TODO control IdP is available
   */
  @Post('/redirect-to-idp')
  @UsePipes(new ValidationPipe({ whitelist: true }))
  async redirectToIdp(@Res() res, @Body() body: RedirectToIdp) {
    // acr_values is an oidc defined variable name
    // eslint-disable-next-line @typescript-eslint/camelcase
    const { uid, scope, providerUid, acr_values } = body;

    const authorizationUrl = await this.oidcClient.getAuthorizeUrl(
      scope,
      providerUid,
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/camelcase
      acr_values,
    );

    const { name: idpName } = await this.identityProvider.getById(providerUid);

    this.session.set(uid, { idpId: providerUid, idpName });

    res.redirect(authorizationUrl);
  }

  /**
   * @TODO control session before access (DTO?)
   * @TODO control IdP is available
   */
  @Get('/oidc-callback/:providerUid')
  @UsePipes(new ValidationPipe({ whitelist: true }))
  async getOidcCallback(
    @Req() req,
    @Res() res,
    @Param() params: GetOidcCallback,
  ) {
    const { providerUid } = params;
    const uid = req.interactionId;

    // OIDC: call idp's /token endpoint
    const tokenSet = await this.oidcClient.getTokenSet(req, providerUid);
    const { access_token: accessToken } = tokenSet;
    this.eventBus.publish(new OidcClientTokenEvent(uid, req.ip));

    // OIDC: call idp's /userinfo endpoint
    const idpIdentity = await this.oidcClient.getUserInfo(
      accessToken,
      providerUid,
    );
    this.eventBus.publish(new OidcClientUserinfoEvent(uid, req.ip));

    // BUSINESS: Locally store received identity
    const { acr } = tokenSet.claims();

    this.session.set(uid, { idpIdentity, idpAcr: acr });

    // BUSINESS: Redirect to business page
    res.redirect(`/interaction/${uid}/verify`);
  }

  /**
   * @TODO implement proper well-known
   *  - generated by oidc-provider
   *  - pub keys orverrided by keys from HSM
   */
  @Get('/client/.well-known/keys')
  async getWellKnownKeys() {
    return this.oidcClient.wellKnownKeys();
  }
}
