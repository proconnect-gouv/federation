import { ChainableElement } from '../../common/types';
import { IdentityProviderConfig } from '../../common/types/identity-provider-config';
import { OperatorUser } from '../helpers';

export default class ExploitIdpListPage {
  get btnSuccessDelete(): ChainableElement {
    return cy.get('button.btn-success');
  }

  get totpInputModal(): ChainableElement {
    return cy.get('#totpModal');
  }

  get createIdpButton(): ChainableElement {
    return cy.contains("Créer un fournisseur d'identité");
  }

  navigateToUpdateIdpPage(
    idpName: string,
    idpConfig: IdentityProviderConfig,
  ): void {
    cy.get(`tr[data-idp-name='${idpName}']`).then(($elem) => {
      idpConfig.uid = $elem.attr('id');
      cy.get(`#${idpConfig.uid} a.btn-action-update`).click();
    });
  }

  deleteIdp(idpName: string, user: OperatorUser): void {
    cy.get(`tr[data-idp-name='${idpName}'] button.btn-action-delete`).click();
    this.totpInputModal
      .then(() => user.wrapTotp())
      .then((token: string) => this.totpInputModal.clear().type(token));
    this.btnSuccessDelete.click();
  }

  checkConfirmUpdateMessage(idpTitle: string): void {
    cy.get('#successBanner')
      .should('exist')
      .contains(
        `Le fournisseur d'identité ${idpTitle} a été modifié avec succès !`,
      );
  }

  checkConfirmDeleteMessage(idpName: string): void {
    cy.get('#successBanner')
      .should('exist')
      .contains(
        `Le fournisseur d'identité ${idpName} a été supprimé avec succès !`,
      );
  }

  checkConfirmCreateMessage(idpName: string): void {
    cy.get('#successBanner')
      .should('exist')
      .contains(
        `Le fournisseur d'identité ${idpName} a été créé avec succès !`,
      );
  }
}
