import { User } from '../../common/helpers';
import { ChainableElement, UserClaims } from '../../common/types';
import { OperatorUser } from '../helpers';
import TotpModal from './totp-modal-component';

const RNIPP_PAGE_TITLE = 'Rechercher un usager';
const RNIPP_ERROR_MESSAGE =
  "Une erreur s'est produite lors de l'appel au RNIPP.";
const DEAD_FEMALE_USER_MESSAGE = "L'utilisatrice est déclarée décédée.";
const DEAD_MALE_USER_MESSAGE = "L'utilisateur est déclaré décédé.";
const DEAD_USER_MESSAGE_NEXT = " Aucune autre information n'est disponible.";

export default class RedressementRNIPPPage {
  getSupportIdInput(): ChainableElement {
    return cy.get('[name="supportId"]');
  }

  getGenderRadio(): ChainableElement {
    return cy.get('[name="gender"]');
  }

  getFamilyNameInput(): ChainableElement {
    return cy.get('[name="familyName"]');
  }

  getGivenNameInput(): ChainableElement {
    return cy.get('[name="givenName"]');
  }

  getBirthDateInput(): ChainableElement {
    return cy.get('[name="birthdate"]');
  }

  getIsFrenchRadio(): ChainableElement {
    return cy.get('[name="isFrench"]');
  }

  getCogInput(): ChainableElement {
    return cy.get('[name="birthLocation"]');
  }

  getSearchButton(): ChainableElement {
    return cy.get('#btn-research');
  }

  getRnippErrorMessage(): ChainableElement {
    return cy.get('#message.alert');
  }

  getDeadUserMessage(): ChainableElement {
    return cy.get('#dead');
  }

  getSupportId(): ChainableElement {
    return cy.get('[data-testid="rnipp-support-id"]');
  }

  getRnippUserinfo(attribute: string): ChainableElement {
    return cy.get(`[data-testid="rnipp-${attribute}"]`);
  }

  getRnippStatusCode(): ChainableElement {
    return cy.get('[data-testid="rnipp-status-code"]');
  }

  getAccountStatus(): ChainableElement {
    return cy.get('[data-testid="citizen-account-status"]');
  }

  getAccountLastConnection(): ChainableElement {
    return cy.get('[data-testid="citizen-account-last-connection"]');
  }

  getAccountId(): ChainableElement {
    return cy.get('[data-testid="citizen-account-id"]');
  }

  getDisableAccountButton(): ChainableElement {
    return cy.get('[data-testid="citizen-disable-account-button"]');
  }

  getEnableAccountButton(): ChainableElement {
    return cy.get('[data-testid="citizen-enable-account-button"]');
  }

  checkIsVisible(): void {
    cy.get('h3').contains(RNIPP_PAGE_TITLE);
  }

  fillInUserDetails(user: User): void {
    const supportId = '1000000000000000';
    this.getSupportIdInput().clear().type(supportId);
    this.getGenderRadio().check(user.claims['gender'], { force: true });
    // Handle RNIPP request without family name
    const familyName = user.claims['family_name'] || 'NoFamilyName';
    this.getFamilyNameInput()
      .clear()
      .type(familyName as string);
    this.getGivenNameInput()
      .clear()
      .type(user.claims['given_name'] as string);
    this.getBirthDateInput()
      .clear()
      .type(user.claims['birthdate'] as string);
    // If user is born in France
    if (user.claims['birthcountry'] === '99100') {
      this.getIsFrenchRadio().check('true', { force: true });
      this.getCogInput()
        .clear()
        .type(user.claims['birthplace'] as string);
    } else {
      this.getIsFrenchRadio().check('false', { force: true });
      this.getCogInput()
        .clear()
        .type(user.claims['birthcountry'] as string);
    }
  }

  checkRnippStatus(rnippStatus: string): void {
    this.getRnippStatusCode().contains(rnippStatus);
  }

  checkIsRnippErrorDisplayed(displayed = true, rnippStatus = ''): void {
    if (!displayed) {
      this.getRnippErrorMessage().should('not.exist');
      return;
    }
    this.getRnippErrorMessage()
      .should('be.visible')
      .contains(RNIPP_ERROR_MESSAGE)
      .within(() => {
        if (rnippStatus) {
          this.checkRnippStatus(rnippStatus);
        } else {
          this.getRnippStatusCode().should('not.exist');
        }
      });
  }

  checkIsDeadUser(isMale: boolean): void {
    this.getDeadUserMessage().should('be.visible');
    const message = isMale ? DEAD_MALE_USER_MESSAGE : DEAD_FEMALE_USER_MESSAGE;
    this.getDeadUserMessage().contains(`${message}${DEAD_USER_MESSAGE_NEXT}`);
  }

  checkSupportId(): void {
    // Check the support id returned by RNIPP matches the request
    this.getSupportIdInput()
      .invoke('attr', 'value')
      .then((supportId) => {
        this.getSupportId().contains(supportId);
      });
  }

  checkRnippUserDetails(userClaims: UserClaims): void {
    const rnippData = {
      birthcountry: {
        format: (text) => text,
        label: 'COG du pays de naissance',
      },
      birthdate: {
        format: (text) => text.replaceAll('-00', ''),
        label: 'Date de naissance',
      },
      birthplace: {
        format: (text) => text,
        label: 'COG du lieu de naissance',
      },
      family_name: {
        format: (text) => text.toUpperCase(),
        label: 'Nom',
      },
      gender: {
        format: (text) => (text === 'male' ? 'Masculin' : 'Féminin'),
        label: 'Genre',
      },
      given_name: {
        format: (text) => text,
        label: 'Prénoms',
      },
      // TODO: Experimental not used currently
      //      preferred_username: {
      //        format: (text) => text.toUpperCase(),
      //        label: "Nom d'usage",
      //      },
    };
    Object.entries(rnippData).forEach(([key, { format }]) => {
      const label = this.getRnippUserinfo(key);

      if (userClaims[key]) {
        label.invoke('text').should('contain', format(userClaims[key]));
      } else {
        label.invoke('text').should('match', /^\s*$/);
      }
    });
  }

  checkIsUnknownUser(): void {
    cy.get('#citizen-status-0').contains('Inconnu(e) de FranceConnect');
    this.getAccountStatus().should('not.exist');
    this.getAccountLastConnection().should('not.exist');
    this.getAccountId().should('not.exist');
  }

  checkIsEnabledUser(enabled: boolean): void {
    const statusText = enabled ? 'Oui' : 'Non';
    this.getAccountStatus().contains(statusText);
  }

  checkIsLastConnectionDisplayed(displayed: boolean): void {
    if (!displayed) {
      this.getAccountLastConnection().should('not.exist');
      return;
    }
    const regExp = /le (\d{2})\/(\d{2})\/(\d{4}) à (\d{2}:\d{2}:\d{2})/;
    this.getAccountLastConnection().invoke('text').should('match', regExp);
  }

  checkIsLastConnectionCorrect(): void {
    this.getAccountLastConnection()
      .invoke('text')
      .then((text) => {
        const regExp = /le (\d{2})\/(\d{2})\/(\d{4}) à (\d{2}:\d{2}:\d{2})/;
        const found = regExp.exec(text);
        expect(found, 'The last connection date is missing').to.exist;

        const [, dd, mm, yyyy, time] = found;
        const lastConnectionDate = new Date(`${yyyy}-${mm}-${dd}T${time}`);
        const nowDate = new Date();
        const delay = 30000; // 30s
        expect(
          lastConnectionDate.valueOf(),
          `The last connection date is in the future.`,
        ).to.be.below(nowDate.valueOf());
        expect(
          lastConnectionDate.valueOf(),
          `The last connection has not been refreshed since last time.`,
        ).to.be.above(nowDate.valueOf() - delay);
      });
  }

  checkIsAccountIdDisplayed(displayed: boolean): void {
    const accountIdRegExp =
      /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/;
    if (!displayed) {
      this.getAccountId().should('not.exist');
    } else {
      this.getAccountId().invoke('text').should('match', accountIdRegExp);
    }
  }

  disableUser(user: OperatorUser): void {
    this.getDisableAccountButton().click();
    const totpModal = new TotpModal();
    totpModal.submitTotp(user);
  }

  enableUser(user: OperatorUser): void {
    this.getEnableAccountButton().click();
    const totpModal = new TotpModal();
    totpModal.submitTotp(user);
  }
}
