import { Then, When } from 'cypress-cucumber-preprocessor/steps';

import { getIdentityProviderByDescription } from '../../common/helpers';
import { IdentityProvider } from '../../common/types';
import { OperatorUser } from '../helpers';
import IdpPreferencesComponent from '../pages/idp-preferences-component';
import TotpModal from '../pages/totp-modal-component';

const idpPreferencesComponent = new IdpPreferencesComponent();
const totpModal = new TotpModal();

Then("les préférences FI de l'usager sont affichées", function () {
  idpPreferencesComponent
    .getFutureIdpPreferenceLabelStatus()
    .scrollIntoView()
    .should('be.visible');
});

Then("les préférences FI de l'usager ne sont pas affichées", function () {
  idpPreferencesComponent
    .getFutureIdpPreferenceLabelStatus()
    .should('not.exist');
});

Then(
  /^le statut des futurs fournisseurs d'identité dans (?:support|exploitation) est "(autorisés|bloqués)"$/,
  function (text) {
    const isAuthorised = text === 'autorisés';
    idpPreferencesComponent.checkFutureIdpPreferenceStatus(isAuthorised);
  },
);

When(
  /^(j'autorise|je bloque) les futurs fournisseurs d'identité pour l'usager$/,
  function (text) {
    const user = this.operatorUser as OperatorUser;
    const isAuthorised = text === "j'autorise";
    idpPreferencesComponent.checkFutureIdpPreferenceStatus(!isAuthorised);
    idpPreferencesComponent.getFutureIdpPreferenceActionButton().click();
    totpModal.submitTotp(user);
    idpPreferencesComponent.checkFutureIdpPreferenceStatus(isAuthorised);
  },
);

Then(
  /^tous les fournisseurs d'identité dans exploitation sont "autorisés"$/,
  function () {
    idpPreferencesComponent.checkAllIdpAuthorised();
  },
);

Then(
  /^le statut du fournisseur d'identité dans (?:support|exploitation) est "(autorisé|bloqué)"$/,
  function (text) {
    const { name } = this.identityProvider as IdentityProvider;
    const isAuthorised = text === 'autorisé';
    idpPreferencesComponent.checkIdpStatus(name, isAuthorised);
  },
);

Then(
  /^le statut du fournisseur d'identité "([^"]*)" dans (?:support|exploitation) est "(autorisé|bloqué)"$/,
  function (description, text) {
    const { name } = getIdentityProviderByDescription(
      this.identityProviders,
      description,
    );
    const isAuthorised = text === 'autorisé';
    idpPreferencesComponent.checkIdpStatus(name, isAuthorised);
  },
);

When(
  /^(j'autorise|je bloque) le fournisseur d'identité pour l'usager$/,
  function (text) {
    const user = this.operatorUser as OperatorUser;
    const { name } = this.identityProvider as IdentityProvider;
    const isAuthorised = text === "j'autorise";
    idpPreferencesComponent.checkIdpStatus(name, !isAuthorised);
    idpPreferencesComponent.getIdpActionButton(name).click();
    totpModal.submitTotp(user);
    idpPreferencesComponent.checkIdpStatus(name, isAuthorised);
  },
);

When(
  /^(j'autorise|je bloque) le fournisseur d'identité "([^"]*)" pour l'usager$/,
  function (text, description) {
    const user = this.operatorUser as OperatorUser;
    const { name } = getIdentityProviderByDescription(
      this.identityProviders,
      description,
    );
    const isAuthorised = text === "j'autorise";
    idpPreferencesComponent.checkIdpStatus(name, !isAuthorised);
    idpPreferencesComponent.getIdpActionButton(name).click();
    totpModal.submitTotp(user);
    idpPreferencesComponent.checkIdpStatus(name, isAuthorised);
  },
);
