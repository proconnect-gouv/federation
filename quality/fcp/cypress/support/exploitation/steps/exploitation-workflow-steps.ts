import { When } from 'cypress-cucumber-preprocessor/steps';

import { navigateTo } from '../../common/helpers';
import { Environment } from '../../common/types';
import { IdentityProviderConfig } from '../../common/types/identity-provider-config';
import { getOperatorUserByType } from '../helpers';
import { getIdentityProviderConfig } from '../helpers/idp-config-provider';
import OperatorUser from '../helpers/operator-user';
import ExploitIdpFormPage from '../pages/exploit-idp-form-page';
import ExploitIdpListPage from '../pages/exploit-idp-list-page';
import ExploitLoginPage from '../pages/exploit-login-page';
import ExploitNavigation from '../pages/exploit-navigation';

const exploitNavigation = new ExploitNavigation();
const exploitIdpListPage = new ExploitIdpListPage();
const exploitIdpFormPage = new ExploitIdpFormPage();

class ExploitationWorkflow {
  allAppsUrl: string;
  exploitAppId: string;
  exploitRootUrl: string;
  user: OperatorUser;
  idpConfig: IdentityProviderConfig;

  constructor({ allAppsUrl, exploitAppId, exploitRootUrl }: Environment) {
    this.allAppsUrl = allAppsUrl;
    this.exploitAppId = exploitAppId;
    this.exploitRootUrl = exploitRootUrl;
  }

  /**
   * Navigate to the exploitation website and setup the ExploitLoginPage
   * @returns l'instance de ConnectionWorkflow
   */
  init(): ExploitationWorkflow {
    navigateTo({
      appId: this.exploitAppId,
      baseUrl: this.allAppsUrl,
    });
    return this;
  }

  /**
   * Log the user in on the exploitation website
   * @param user a user of the exploitation website
   * @returns the current ExploitationWorkflow instance
   */
  login(user: OperatorUser): ExploitationWorkflow {
    this.user = user;
    const exploitLoginPage = new ExploitLoginPage(this.exploitRootUrl);
    exploitLoginPage.login(user);
    return this;
  }

  withUser(user: OperatorUser): ExploitationWorkflow {
    this.user = user;
    return this;
  }

  logout() {
    exploitNavigation.logout();
  }

  toIdentityProviderTab() {
    exploitNavigation.identityProviderLink.click();
    return this;
  }

  createIdp(idpConfig, idpName) {
    this.idpConfig = idpConfig;
    this.idpConfig.name = idpName;
    exploitIdpListPage.createIdpButton.click();
    exploitIdpFormPage.fillDefaultValues(idpConfig);
    exploitIdpFormPage.validateForm(this.user);
    exploitIdpListPage.checkConfirmCreateMessage(idpName);
    return this;
  }

  activateIdp(idpName) {
    exploitIdpListPage.navigateToUpdateIdpPage(idpName, this.idpConfig);
    exploitIdpFormPage.fillValue('active', 'true');
    exploitIdpFormPage.fillValue('display', 'true');
    exploitIdpFormPage.validateForm(this.user);
    exploitIdpListPage.checkConfirmUpdateMessage(this.idpConfig.title);
    return this;
  }

  deleteIdp(idpName) {
    exploitIdpListPage.deleteIdp(idpName, this.user);
    exploitIdpListPage.checkConfirmDeleteMessage(idpName);
    return this;
  }
}

When(
  "je crée le fournisseur d'identité {string} avec la configuration {string} sur le site d'exploitation",
  function (idpName, idpConfigName) {
    expect(this.env).to.exist;
    const operatorUser = getOperatorUserByType('exploitant');
    getIdentityProviderConfig(idpConfigName).then((idpConfig) => {
      new ExploitationWorkflow(this.env)
        .init()
        .login(operatorUser)
        .toIdentityProviderTab()
        .createIdp(idpConfig, idpName)
        .activateIdp(idpName)
        .logout();
    });
  },
);

When(
  "je supprime le fournisseur d'identité {string} sur le site d'exploitation",
  function (idpName) {
    expect(this.env).to.exist;
    const operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(operatorUser)
      .toIdentityProviderTab()
      .deleteIdp(idpName)
      .logout();
  },
);
