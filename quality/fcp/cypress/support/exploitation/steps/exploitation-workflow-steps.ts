import { When } from 'cypress-cucumber-preprocessor/steps';

import { navigateTo } from '../../common/helpers';
import { Environment } from '../../common/types';
import { IdentityProviderConfig } from '../../common/types/identity-provider-config';
import { getOperatorUserByType } from '../helpers';
import { getIdentityProviderConfig } from '../helpers/idp-config-provider';
import OperatorUser from '../helpers/operator-user';
import ExploitIdpFormPage from '../pages/exploit-idp-form-page';
import ExploitIdpListPage from '../pages/exploit-idp-list-page';
import ExploitLoginPage from '../pages/exploit-login-page';
import ExploitNavigation from '../pages/exploit-navigation';
import ExploitSpFormPage from '../pages/exploit-sp-form-page';
import ExploitSpListPage from '../pages/exploit-sp-list-page';

const exploitNavigation = new ExploitNavigation();
const exploitSpListPage = new ExploitSpListPage();
const exploitSpFormPage = new ExploitSpFormPage();
const exploitIdpListPage = new ExploitIdpListPage();
const exploitIdpFormPage = new ExploitIdpFormPage();

declare interface IdpState {
  display?: boolean;
  active?: boolean;
}

class ExploitationWorkflow {
  allAppsUrl: string;
  exploitAppId: string;
  exploitRootUrl: string;
  user: OperatorUser;
  idpConfig: IdentityProviderConfig;

  constructor({ allAppsUrl, exploitAppId, exploitRootUrl }: Environment) {
    this.allAppsUrl = allAppsUrl;
    this.exploitAppId = exploitAppId;
    this.exploitRootUrl = exploitRootUrl;
  }

  /**
   * Navigate to the exploitation website and setup the ExploitLoginPage
   * @returns l'instance de ConnectionWorkflow
   */
  init(): this {
    navigateTo({
      appId: this.exploitAppId,
      baseUrl: this.allAppsUrl,
    });
    return this;
  }

  /**
   * Log the user in on the exploitation website
   * @param user a user of the exploitation website
   * @returns the current ExploitationWorkflow instance
   */
  login(user: OperatorUser): this {
    this.user = user;
    const exploitLoginPage = new ExploitLoginPage(this.exploitRootUrl);
    exploitLoginPage.login(user);
    return this;
  }

  withUser(user: OperatorUser): this {
    this.user = user;
    return this;
  }

  logout(): void {
    exploitNavigation.logout();
  }

  toServiceProviderTab(): this {
    exploitNavigation.getServiceProviderLink().click();
    return this;
  }

  setSpIdpRestriction(
    spName: string,
    restrictionType: string,
    idpIds: string[],
  ): this {
    exploitSpListPage.navigateToUpdateSpPage(spName);
    exploitSpFormPage.fillValue('idpFilterExclude', restrictionType);
    exploitSpFormPage.fillIdpFilterListValues(idpIds);
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmSuccessMessage();
    return this;
  }

  resetSpIdpRestriction(spName: string): this {
    exploitSpListPage.navigateToUpdateSpPage(spName);
    exploitSpFormPage.fillValue('idpFilterExclude', 'Aucune restriction');
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmSuccessMessage();
    return this;
  }

  toIdentityProviderTab(): this {
    exploitNavigation.getIdentityProviderLink().click();
    return this;
  }

  createIdp(idpConfig, idpName): this {
    this.idpConfig = idpConfig;
    this.idpConfig.name = idpName;
    exploitIdpListPage.getCreateIdpButton().click();
    exploitIdpFormPage.fillDefaultValues(idpConfig);
    exploitIdpFormPage.validateForm(this.user);
    exploitIdpListPage.checkConfirmCreateMessage(idpName);
    return this;
  }

  activateIdp(idpName): this {
    this.setIdpState(idpName, { active: true, display: true });
    return this;
  }

  setIdpState(idpName: string, state: IdpState): this {
    exploitIdpListPage.navigateToUpdateIdpPage(idpName);
    const { active, display } = state;
    if (active !== undefined) {
      exploitIdpFormPage.fillValue('active', `${active}`);
    }
    if (display !== undefined) {
      exploitIdpFormPage.fillValue('display', `${display}`);
    }
    exploitIdpFormPage.validateForm(this.user);
    exploitIdpListPage.checkConfirmSuccessMessage();
    return this;
  }

  deleteIdp(idpName): this {
    exploitIdpListPage.deleteIdp(idpName, this.user);
    exploitIdpListPage.checkConfirmDeleteMessage(idpName);
    return this;
  }
}

When(
  /^j'ajoute "([^"]+)" à la "(Blacklist|Whitelist)" du fournisseur de service "([^"]+)" sur le site d'exploitation$/,
  function (idpName: string, restrictionType: string, spName: string) {
    expect(this.env).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .setSpIdpRestriction(spName, restrictionType, [idpName])
      .logout();
  },
);

When(
  /^je retire les restrictions de FI du fournisseur de service "([^"]+)" sur le site d'exploitation$/,
  function (spName: string) {
    expect(this.env).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .resetSpIdpRestriction(spName)
      .logout();
  },
);

When(
  "je crée le fournisseur d'identité {string} avec la configuration {string} sur le site d'exploitation",
  function (idpName, idpConfigName) {
    expect(this.env).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    this.idpConfig = getIdentityProviderConfig(this.idpConfigs, idpConfigName);
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toIdentityProviderTab()
      .createIdp(this.idpConfig, idpName)
      .activateIdp(idpName)
      .logout();
  },
);

When(
  /^je configure le fournisseur d'identité "([^"]+)" (visible|invisible) et (actif|désactivé) sur le site d'exploitation$/,
  function (idpName: string, displayText: string, activeText: string) {
    expect(this.env).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    const active = activeText === 'actif';
    const display = displayText === 'visible';
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toIdentityProviderTab()
      .setIdpState(idpName, { active, display })
      .logout();
  },
);

When(
  "je supprime le fournisseur d'identité {string} sur le site d'exploitation",
  function (idpName) {
    expect(this.env).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toIdentityProviderTab()
      .deleteIdp(idpName)
      .logout();
  },
);
