import * as otplib from 'otplib';

import { OperatorUserData } from '../../common/types/operator-user';

const MIN_REMAINING_TIME = 5;

async function generateTotp(key): Promise<string> {
  return new Promise((resolve) => {
    const ttl = otplib.authenticator.timeRemaining();
    // If TOTP expires in less than 5 seconds
    // we'll wait for the next timeframe
    // in order to be sure to have a valid TOTP
    // at the time the form is submited
    const wait = ttl < MIN_REMAINING_TIME ? ttl + 1 : 0;

    setTimeout(() => {
      resolve(otplib.authenticator.generate(key));
    }, wait * 1000);
  });
}

export default class OperatorUser {
  public username: string;
  public password: string;
  private totpSecret: string;
  public role: string;

  constructor(userData: OperatorUserData) {
    this.username = userData.username;
    this.password = userData.password;
    this.totpSecret = userData.secretTotp;
    this.role = userData.role;
  }

  private async getTotp(): Promise<string> {
    return generateTotp(this.totpSecret);
  }

  wrapTotp(): Cypress.Chainable<string> {
    const timeout = (MIN_REMAINING_TIME + 1) * 1000;
    return cy.wrap(this.getTotp(), { timeout });
  }
}
