import { When } from '@badeball/cypress-cucumber-preprocessor';

import { getDefaultIdentityProviderConfig } from '../../common/helpers';
import ExploitIdpFormPage from '../pages/exploit-idp-form-page';

const exploitIdpFormPage = new ExploitIdpFormPage();

When(
  /^j'entre les valeurs par défaut pour le fournisseur d'identité "(.+)"$/,
  function (providerName: string) {
    exploitIdpFormPage.fillDefaultValues(
      getDefaultIdentityProviderConfig(providerName),
    );
  },
);

When(
  /^j'entre "([^"]+)" dans le champ "([^"]+)" du formulaire de (?:création|modification) de FI$/,
  function (value: string, key: string) {
    exploitIdpFormPage.fillValue(key, value);
  },
);

When(
  /^j'entre les valeurs "([^"]+)" dans le champ "([^"]+)" du formulaire de (?:création|modification) de FI$/,
  function (value: string, key: string) {
    exploitIdpFormPage.fillValue(key, value.split(','));
  },
);

When(
  /^j'ajoute la valeur "([^"]+)" au champ "([^"]+)" du formulaire de (?:création|modification) de FI$/,
  function (value: string, key: string) {
    exploitIdpFormPage.getVisibleInputFromName(key).then((previous) => {
      const target = previous.text().split('\n').concat(value);
      exploitIdpFormPage.fillValue(key, target);
    });
  },
);

When(
  /^je retire la valeur "([^"]+)" du champ "([^"]+)" du formulaire de (?:création|modification) de FI$/,
  function (value: string, key: string) {
    exploitIdpFormPage.getVisibleInputFromName(key).then((previous) => {
      const target = previous
        .text()
        .split('\n')
        .filter((x) => x !== value);
      exploitIdpFormPage.fillValue(key, target);
    });
  },
);

When(
  /^je valide le formulaire de (?:création|modification) de FI$/,
  function () {
    exploitIdpFormPage.validateForm(this.operatorUser);
  },
);
