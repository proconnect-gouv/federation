fcp-low:
  stage: 'End to end'
  image: ${E2E_DOCKER_IMAGE}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "staging"'
  timeout: 1h
  tags:
    - cypress
  variables:
    TZ: 'Europe/Paris'
  cache:
    key: "${CI_PROJECT_ID}"
    policy: pull
    paths:
      - back/node_modules/
      - quality/node_modules/
      - $CYPRESS_CACHE_FOLDER
  before_script:
    # Ensure a clean docker environnement
    - if [ "$(docker ps -aq --filter name=^fc |wc -l) -ge 1" ]; then docker container rm -f $(docker ps -aq --filter name=^fc) || true; docker volume prune -f; fi
    - shopt -s expand_aliases
    - alias docker-stack=$FC_ROOT/fc/docker/docker-stack
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - if [[ ! -d $FC_ROOT/mocks ]]; then cp -R /var/www/mocks $FC_ROOT/; fi
    - RETURN_CODE=0
    # Bind sources in docker volumes
    - ln -s $CI_PROJECT_DIR $FC_ROOT/fc/docker/volumes/src/fc
    - for mock in `find $FC_ROOT/mocks -maxdepth 1 -mindepth 1 -type d`; do cd $mock && git fetch && git checkout -f origin/master && git clean -df && echo "Installing depedencies for $(/usr/bin/basename $mock)" && npm install; ln -sfn $mock $FC_ROOT/fc/docker/volumes/src; done
    # Return to project directory
    - wait
    - cd $CI_PROJECT_DIR
  script:
    # Up the docker-stack with minimal requirement
    - docker-stack up all-fcp-low
    - docker exec fc_core-fcp-low_1 bash -c "yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION"
    - docker-stack dep core-fcp-low
    - cd $CI_PROJECT_DIR/quality/fcp && yarn install
    - cd $CI_PROJECT_DIR
    # Start the NodeJS apps
    - docker-stack start rnipp fsp1-low fip1-low core-fcp-low
    # Ensure the required apps are running
    - timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' https://core-fcp-low.docker.dev-franceconnect.fr/api/v2/.well-known/openid-configuration)" != "200" ]];
      do echo "Waiting for core-fcp-low..." && sleep 10; done' || (
      (echo 'Cannot connect to core-fcp-low') &&
      (docker exec fc_core-fcp-low_1 cat /tmp/.pm2/logs/core-fcp-low-error-0.log || true) &&
      (docker exec fc_core-fcp-low_1 cat /tmp/.pm2/logs/core-fcp-low-out-0.log || true) &&
      $CI_PROJECT_DIR/back/scripts/ci/extract-pm2-logs.sh &&
      exit 1)
    # Starting Cypress Quality checks
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Starting Quality checks"
    - cd $CI_PROJECT_DIR/quality/fcp
    - CYPRESS_TEST_ENV=docker yarn test:low:ci -c video=${CYPRESS_VIDEO} || RETURN_CODE=1
    - yarn report:prepare
    - CYPRESS_PLATFORM=fcp-low CYPRESS_TEST_ENV=docker yarn report:generate
    # Exit if return code equals 1
    - if [ $RETURN_CODE -ne 0 ]; then $CI_PROJECT_DIR/back/scripts/ci/extract-pm2-logs.sh && (docker cp fc-rp-all:/var/log/nginx /tmp/artifacts-logs || echo "[fc-rp-all] No NginX logs found") && exit $RETURN_CODE; fi
    # Starting Cypress E2E checks
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Starting E2E checks"
    - cd $CI_PROJECT_DIR
    - npx cypress${CYPRESS_VERSION} run -c video=${CYPRESS_VIDEO} -P back/instances/core-fcp-low || RETURN_CODE=1
    # Extract logs in case of failure
    - if [ $RETURN_CODE -ne 0 ]; then $CI_PROJECT_DIR/back/scripts/ci/extract-pm2-logs.sh && (docker cp fc-rp-all:/var/log/nginx /tmp/artifacts-logs || echo "[fc-rp-all] No NginX logs found"); fi
    # Exit with return code
    - exit $RETURN_CODE
  interruptible: true
  artifacts:
    expire_in: 1 hrs
    when: always
    paths:
      - $CI_PROJECT_DIR/back/instances/core-fcp-low/cypress/screenshots
      - $CI_PROJECT_DIR/back/instances/core-fcp-low/cypress/videos
      - $CI_PROJECT_DIR/back/instances/core-fcp-low/cypress/logs
      - $CI_PROJECT_DIR/quality/fcp/cypress/reports/cucumber/html-report
      - $CI_PROJECT_DIR/artifacts-logs
  after_script:
    - bash $CI_BUILDS_DIR/france-connect/fc/docker/docker-stack halt
    - docker container prune -f && docker volume prune -f && docker network prune -f
