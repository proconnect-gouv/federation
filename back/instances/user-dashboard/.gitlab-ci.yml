user-dashboard:
  stage: 'End to end'
  image: ${E2E_DOCKER_IMAGE}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "staging"'
  timeout: 1h
  tags:
    - cypress
  variables:
    TZ: 'Europe/Paris'
  cache:
    key: ${CACHE_KEY}
    policy: pull
    paths:
      # Back
      - back/node_modules/
      # Front
      - front/node_modules/
      - front/apps/agent-connect/node_modules/
      - front/apps/exploit-fca-low/node_modules/
      - front/apps/exploit-fcp-high/node_modules/
      - front/apps/partners-fca/node_modules/
      - front/apps/partners-fcp/node_modules/
      - front/apps/user-dashboard/node_modules/
      # Quality
      - quality/node_modules/
      # Fc-apps
      - cache/fc-apps/fc-exploitation/node_modules/
      - cache/fc-apps/fc-stats/node_modules/
      - cache/fc-apps/fc-support/node_modules/
      - cache/fc-apps/fc-workers/node_modules/
      - cache/fc-apps/node_modules/
      - cache/fc-apps/shared/node_modules/
      # Cypress
      - $CYPRESS_CACHE_FOLDER
  before_script:
    # Ensure a clean docker environnement
    - yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION
    - echo "FC_DOCKER_VERSION=$FC_DOCKER_VERSION"
    - echo "FC_LEGACY_VERSION=${FC_LEGACY_VERSION:=staging}"
    - echo "FC_APPS_VERSION=${FC_APPS_VERSION:=staging}"
    - if [ "$(docker ps -aq --filter name=^fc |wc -l) -ge 1" ]; then docker container rm -f $(docker ps -aq --filter name=^fc) || true; docker volume prune -f; fi
    - shopt -s expand_aliases
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # Shallow clone depth 1 fc-docker repository
    - rm -rf $FC_ROOT/fc-docker
    - git clone -b $FC_DOCKER_VERSION --depth 1 https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.dev-franceconnect.fr/france-connect/fc-docker.git $FC_ROOT/fc-docker  --single-branch
    # Shallow clone depth 1 core-legacy repository
    - export FC_LEGACY_ROOT=$FC_ROOT/fc-docker/volumes/src/FranceConnect
    - git clone -b ${FC_LEGACY_VERSION:=staging} --depth 1 https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.dev-franceconnect.fr/france-connect/core-legacy.git $FC_LEGACY_ROOT
    # Shallow clone depth 1 fc-apps repository
    - rm -rf $FC_ROOT/fc-apps
    - git clone -b $FC_APPS_VERSION --depth 1 https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.dev-franceconnect.fr/france-connect/fc-apps.git $FC_ROOT/fc-apps
    # Bind sources in docker volumes
    - ln -s $CI_PROJECT_DIR $FC_ROOT/fc-docker/volumes/src/fc
    - ln -s $FC_ROOT/fc-apps $FC_ROOT/fc-docker/volumes/src/fc-apps
    # Setup the mocks
    - if [[ ! -d $FC_ROOT/mocks ]]; then cp -R /var/www/mocks $FC_ROOT/; fi
    - for mock in `find $FC_ROOT/mocks -maxdepth 1 -mindepth 1 -type d`; do cd $mock && git fetch && git checkout -f origin/master && git clean -df && echo "Installing depedencies for $(/usr/bin/basename $mock)" && npm install; ln -sfn $mock $FC_ROOT/fc-docker/volumes/src; done
    # Setup ElasticSearch
    - cp -R /var/www/elasticsearch/data/ $FC_ROOT/fc-docker/volumes/elasticsearch/
    - mv /var/www/GeoLite2-City.mmdb $FC_ROOT/fc-docker/volumes/maxmind/database/GeoLite2-City/
    - chown -R 1000:0 $FC_ROOT/fc-docker/volumes/elasticsearch/data/
  script:
    # Up the docker-stack with minimal requirement
    - rsync -a $CI_PROJECT_DIR/cache/fc-apps/ $FC_ROOT/fc-apps/ || true
    - cd $FC_ROOT/fc-apps/fc-exploitation && yarn install
    - rsync -a $CI_PROJECT_DIR/cache/core-legacy/ $FC_LEGACY_ROOT/ || true
    - cd $FC_LEGACY_ROOT && yarn install
    - rm -rf $FC_LEGACY_ROOT/projects/fc/core/node_modules/fc-commons
    - cp -r $FC_LEGACY_ROOT/projects/fc/fc-commons $FC_LEGACY_ROOT/projects/fc/core/node_modules/fc-commons
    - alias docker-stack=$FC_ROOT/fc-docker/docker-stack
    - docker-stack up all-v1
    - docker-stack exec ud-front yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION
    - docker-stack exec ud-back yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION
    - docker-stack dep ud-front ud-back
    - docker-stack fixtures fc-exploitation fc-support
    # Start mongo-fcp-high to retrieve FC+ AccountIds for the log history
    - $FC_ROOT/fc/docker/docker-stack up mongo-fcp-high
    # Start the NodeJS apps
    - docker-stack start fc-core
      fsp1 fsp3 fip1 fip3 fip4 rnipp
      ud-back ud-front
      csmr-tracks-high csmr-tracks-legacy csmr-aggregate-tracks
      csmr-user-preferences-high
      fc-exploitation fc-support
    # Ensure the required apps are running
    - timeout 180 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' https://ud.docker.dev-franceconnect.fr)" != "200" ]];
      do echo "Waiting for ud-front..." && sleep 10; done' || (
      (echo 'Cannot connect to ud-front') &&
      (docker exec fc_ud-front_1 cat /tmp/.pm2/logs/ud-front-error-0.log || true) &&
      (docker exec fc_ud-front_1 cat /tmp/.pm2/logs/ud-front-out-0.log || true) &&
      $CI_PROJECT_DIR/back/scripts/ci/extract-pm2-logs.sh &&
      exit 1)
    # Starting Cypress Quality checks
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Starting Quality checks"
    - cd $CI_PROJECT_DIR/quality/fcp
    - yarn install
    # Run Visual BDD tests and abort if failed
    - CYPRESS_TEST_ENV=docker yarn test:ud:snapshot
    # Run Functional BDD tests
    - CYPRESS_TEST_ENV=docker yarn test:ud -c video=${CYPRESS_VIDEO} || RETURN_CODE=1
    - yarn report:prepare
    - CYPRESS_PLATFORM=fcp-legacy CYPRESS_TEST_ENV=docker yarn report:generate
    # Extract logs in case of failure
    - if [ $RETURN_CODE -ne 0 ]; then $CI_PROJECT_DIR/back/scripts/ci/extract-pm2-logs.sh && (docker cp fc-rp-all:/var/log/nginx /tmp/artifacts-logs || echo "[fc-rp-all] No NginX logs found"); fi
    # Exit with return code
    - exit $RETURN_CODE
  interruptible: true
  artifacts:
    expire_in: 1 hrs
    when: always
    paths:
      - $CI_PROJECT_DIR/quality/fcp/cypress/reports/cucumber/html-report
      - $CI_PROJECT_DIR/quality/fcp/cypress/snapshots/diff
      - $CI_PROJECT_DIR/artifacts-logs
  after_script:
    - bash $FC_ROOT/fc-docker/docker-stack halt && docker rm -f fc_mongo-fcp-high_1
    - docker container prune -f && docker volume prune -f && docker network prune -f
