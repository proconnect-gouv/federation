user-dashboard:
  stage: 'End to end'
  image: ${E2E_DOCKER_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "staging"'
      variables:
        BDD_TAGS: 'not @ignore'
        SKIP_DIFF_CHECK: 'true'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /CI Test (all|ud)/'
      variables:
        BDD_TAGS: 'not @ignore'
        SKIP_DIFF_CHECK: 'true'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        BDD_TAGS: '@ci and not @ignore'
  timeout: 1h
  tags:
    - cypress
  variables:
    TZ: 'Europe/Paris'
    CYPRESS_PLATFORM: 'fcp-legacy'
    CYPRESS_TEST_ENV: 'docker'
    CYPRESS_INTERNAL_BROWSER_CONNECT_TIMEOUT: 300000
  cache:
    key: ${CACHE_KEY}
    policy: pull
    paths:
      # Back
      - back/node_modules/
      # Front
      - front/node_modules/
      - front/instances/user-dashboard/node_modules/
      # Quality
      - quality/node_modules/
      # Fc-apps
      - cache/fc-apps/fc-exploitation/node_modules/
      - cache/fc-apps/fc-support/node_modules/
      - cache/fc-apps/fc-workers/node_modules/
      - cache/fc-apps/node_modules/
      - cache/fc-apps/shared/node_modules/
      # Cypress
      - cache/Cypress
  before_script:
    # Make docker-stack an alias
    - shopt -s expand_aliases
    - alias docker-stack=$FC_ROOT/fc/docker/docker-stack
    - node -v
    - apt update && apt install -y jq
    # build the main apps and check if they are impacted by MR
    - echo "CI_MERGE_REQUEST_LABELS=$CI_MERGE_REQUEST_LABELS"
    - BACK_DIFF_FILES=$(docker-stack detect-back-changes user-dashboard csmr-tracks-instance csmr-account-instance csmr-user-preferences-high)
    - BACK_DIFF_CHECK_STATUS=$(echo "$BACK_DIFF_FILES" | grep 'STATUS=' | sed 's/STATUS=//')
    - echo "$BACK_DIFF_FILES"
    - if [ "$BACK_DIFF_CHECK_STATUS" == "ERRORS" ]; then echo "$BACK_DIFF_FILES"; exit 1; fi

    - FRONT_DIFF_FILES=$(docker-stack detect-front-changes user-dashboard)
    - echo "$FRONT_DIFF_FILES"
    - FRONT_DIFF_CHECK_STATUS=$(echo "$FRONT_DIFF_FILES" | grep 'STATUS=' | sed 's/STATUS=//')
    - echo "$FRONT_DIFF_FILES"
    - if [ "$FRONT_DIFF_CHECK_STATUS" == "ERRORS" ]; then echo "$FRONT_DIFF_FILES"; exit 1; fi
    - if [ "$BACK_DIFF_CHECK_STATUS" == "NO_CHANGES" ] && [ "$FRONT_DIFF_CHECK_STATUS" == "NO_CHANGES" ]; then exit 0; fi

    # Test Scope definition
    - BDD_TAGS=${BDD_TAGS_UD:-$BDD_TAGS}
    - echo "BDD_TAGS=$BDD_TAGS"
    # Ensure a clean docker environnement
    - yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION
    - echo "FC_LEGACY_VERSION=${FC_LEGACY_VERSION:=staging}"
    - echo "FC_APPS_VERSION=${FC_APPS_VERSION:=staging}"
    - docker-stack prune-ci
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - export FC_LEGACY_ROOT=$FC_ROOT/fc/docker/volumes/src/FranceConnect
    - git clone -b ${FC_LEGACY_VERSION:=staging} --depth 1 https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.dev-franceconnect.fr/france-connect/core-legacy.git $FC_LEGACY_ROOT
    # Shallow clone depth 1 fc-apps repository
    - rm -rf $FC_ROOT/fc-apps
    - git clone -b $FC_APPS_VERSION --depth 1 https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.dev-franceconnect.fr/france-connect/fc-apps.git $FC_ROOT/fc-apps
    # Bind sources in docker volumes
    - ln -s $CI_PROJECT_DIR $FC_ROOT/fc/docker/volumes/src/fc
    - ln -s $FC_ROOT/fc-apps $FC_ROOT/fc/docker/volumes/src/fc-apps
    # Setup the mocks
    - if [[ ! -d $FC_ROOT/mocks ]]; then cp -R /var/www/mocks $FC_ROOT/; fi
    - for mock in `find $FC_ROOT/mocks -maxdepth 1 -mindepth 1 -type d`; do cd $mock && git fetch && git checkout -f origin/master && git clean -df && echo "Installing dependencies for $(/usr/bin/basename $mock)" && npm install; ln -sfn $mock $FC_ROOT/fc/docker/volumes/src; done
    # Setup ElasticSearch
    - cp -R /var/www/elasticsearch/data/ $FC_ROOT/fc/docker/volumes/elasticsearch/
    - mv /var/www/GeoLite2-City.mmdb $FC_ROOT/fc/docker/volumes/maxmind/database/GeoLite2-City/
    - chown -R 1000:0 $FC_ROOT/fc/docker/volumes/elasticsearch/data/
  script:
    # Up the docker-stack with minimal requirement
    - rsync -a $CI_PROJECT_DIR/cache/fc-apps/ $FC_ROOT/fc-apps/ || true
    - rsync -a $CI_PROJECT_DIR/cache/core-legacy/ $FC_LEGACY_ROOT/ || true
    - docker-stack up bdd-ud
    - docker-stack exec ud-front yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION
    - docker-stack exec ud-back yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION
    # Start the NodeJS apps
    - docker-stack start-all-ci
    # Ensure the required apps are running
    - docker-stack wait "ud-front" "https://ud.docker.dev-franceconnect.fr" "240"
    - docker-stack wait "core" "https://fcp.docker.dev-franceconnect.fr/api/v1/statuses"
    # Starting Cypress Quality checks
    - cd $CI_PROJECT_DIR/quality/fcp
    - yarn install --frozen-lockfile
    # Run Visual BDD tests and abort if failed
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Starting visual checks"
    - yarn test:ud:snapshot
    # Run Visual BDD tests as in production and abort if failed
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Setting IDP as in production & Starting visual checks as in production"
    - docker-stack reset-mongo-as-prod mongo-fcp-low
    - yarn test:ud:snapshot --env 'TAGS=@userDashboard and @validationVisuelleProduction and not @ignore'
    # Reset IDP as development
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Resetting IDP as in development"
    - docker-stack reset-mongo mongo-fcp-low
    # Run Functional BDD tests
    - $CI_PROJECT_DIR/back/scripts/ci/broadcast.sh "Starting Quality checks with tags $BDD_TAGS"
    - yarn test:ud -c video=${CYPRESS_VIDEO} --env TAGS="$BDD_TAGS" || RETURN_CODE=1
    - yarn report
    # Extract logs in case of failure
    - if [ $RETURN_CODE -ne 0 ]; then $CI_PROJECT_DIR/back/scripts/ci/extract-pm2-rp-logs.sh &&
      (docker cp fc_fc-core_1:/var/log/fc-evt $CI_PROJECT_DIR/artifacts-logs/fcp || true); fi
    # Exit with return code
    - exit $RETURN_CODE
  interruptible: true
  artifacts:
    expire_in: 1 hrs
    when: always
    paths:
      - artifacts-logs
      - quality/fcp/cypress/reports/cucumber/html-report
      - quality/fcp/cypress/screenshots
      - quality/fcp/cypress/snapshots/diff
      - quality/fcp/cypress/videos
  after_script:
    - $FC_ROOT/fc/docker/docker-stack halt
