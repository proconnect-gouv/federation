import {
  Controller,
  Get,
  Req,
  Res,
  Body,
  Post,
  Inject,
  ValidationPipe,
  UsePipes,
} from '@nestjs/common';
import { SessionService } from '@fc/session';
import { IDENTITY_PROVIDER_SERVICE } from './tokens';
import { IIdentityProviderService } from './interfaces';
import { RedirectToIdp } from './dto';
import { OidcClientRoutes } from './enums';
import { OidcClientService } from './services';

@Controller()
export class OidcClientController {
  // Dependency injection can require more than 4 parameters
  /* eslint-disable-next-line max-params */
  constructor(
    private readonly oidcClient: OidcClientService,
    private readonly session: SessionService,
    @Inject(IDENTITY_PROVIDER_SERVICE)
    private readonly identityProvider: IIdentityProviderService,
  ) {}
  /**
   * @todo #242 get configured parameters (scope and acr)
   */
  @Post(OidcClientRoutes.REDIRECT_TO_IDP)
  @UsePipes(new ValidationPipe({ whitelist: true }))
  async redirectToIdp(
    @Res() res,
    @Req() req,
    @Body() body: RedirectToIdp,
  ): Promise<void> {
    const {
      scope,
      claims,
      providerUid,
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/naming-convention
      acr_values,
    } = body;
    /**
     * @TODO This controller should not be generic
     * This is a specific behaviour for FC and not for fsp*v2
     */
    let serviceProviderId: string | null;
    const { interactionId } = req.fc;
    try {
      const { spId } = await this.session.get(interactionId);
      serviceProviderId = spId;
    } catch (error) {
      serviceProviderId = null;
    }
    if (serviceProviderId) {
      await this.oidcClient.utils.checkIdpBlacklisted(
        serviceProviderId,
        providerUid,
      );
    }

    // TODO END

    const {
      state,
      nonce,
    } = await this.oidcClient.utils.buildAuthorizeParameters();

    const authorizationUrl = await this.oidcClient.utils.getAuthorizeUrl({
      state,
      scope,
      providerUid,
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/naming-convention
      acr_values,
      nonce,
      claims,
    });

    const { name: idpName } = await this.identityProvider.getById(providerUid);

    await this.session.patch(req.fc.interactionId, {
      idpId: providerUid,
      idpName,
      idpState: state,
      idpNonce: nonce,
    });

    res.redirect(authorizationUrl);
  }

  /**
   * @TODO #141 implement proper well-known
   * @see https://gitlab.dev-franceconnect.fr/france-connect/fc/-/issues/141
   *  - generated by openid-client
   *  - pub keys orverrided by keys from HSM
   */
  @Get(OidcClientRoutes.WELL_KNOWN_KEYS)
  async getWellKnownKeys() {
    return this.oidcClient.utils.wellKnownKeys();
  }
}
