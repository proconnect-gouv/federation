import {
  Body,
  Controller,
  Get,
  Post,
  Res,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';

import { ConfigService } from '@fc/config';
import { IdentityProviderAdapterEnvService } from '@fc/identity-provider-adapter-env';
import { LoggerLevelNames, LoggerService } from '@fc/logger';
import {
  OidcClientConfig,
  OidcClientService,
  OidcClientSession,
  RedirectToIdp,
} from '@fc/oidc-client';
import {
  ISessionService,
  Session,
  SessionCsrfService,
  SessionInvalidCsrfSelectIdpException,
} from '@fc/session';

import { OidcClientRoutes } from '../enums';

@Controller(OidcClientRoutes.BASE_ROUTE)
export class OidcClientController {
  // eslint-disable-next-line max-params
  constructor(
    private readonly logger: LoggerService,
    private readonly oidcClient: OidcClientService,
    private readonly config: ConfigService,
    private readonly csrfService: SessionCsrfService,
    private readonly identityProvider: IdentityProviderAdapterEnvService,
  ) {
    this.logger.setContext(this.constructor.name);
  }

  /**
   * @TODO #141 implement proper well-known
   * @see https://gitlab.dev-franceconnect.fr/france-connect/fc/-/issues/141
   *  - generated by openid-client
   *  - pub keys orverrided by keys from HSM
   */
  @Get(OidcClientRoutes.WELL_KNOWN_KEYS)
  async getWellKnownKeys() {
    this.logger.trace({
      route: OidcClientRoutes.WELL_KNOWN_KEYS,
      method: 'GET',
      name: 'OidcClientRoutes.WELL_KNOWN_KEYS',
    });
    return this.oidcClient.utils.wellKnownKeys();
  }

  /**
   * @todo #242 get configured parameters (scope and acr)
   */
  @Post(OidcClientRoutes.REDIRECT_TO_IDP)
  @UsePipes(new ValidationPipe({ whitelist: true }))
  async redirectToIdp(
    @Res() res,
    @Body() body: RedirectToIdp,
    /**
     * @todo Adaptation for now, correspond to the oidc-provider side.
     * Named "OidcClient" because we need a future shared session between our libs oidc-provider and oidc-client
     * without a direct dependance like now.
     * @author Hugues
     * @date 2021-04-16
     * @ticket FC-xxx
     */
    @Session('OidcClient')
    sessionOidc: ISessionService<OidcClientSession>,
  ): Promise<void> {
    // acr_values is an oidc defined variable name
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { acr: acr_values, scope } =
      this.config.get<OidcClientConfig>('OidcClient');
    const { csrfToken } = body;

    const IDP_ID = 'envIssuer';

    // -- control if the CSRF provided is the same as the one previously saved in session.
    try {
      await this.csrfService.validate(sessionOidc, csrfToken);
    } catch (error) {
      this.logger.trace({ error }, LoggerLevelNames.WARN);
      throw new SessionInvalidCsrfSelectIdpException(error);
    }

    // TODO END
    const { nonce, state } =
      await this.oidcClient.utils.buildAuthorizeParameters();

    const authorizationUrl = await this.oidcClient.utils.getAuthorizeUrl({
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/naming-convention
      acr_values,
      nonce,
      idpId: IDP_ID,
      scope,
      state,
    });

    const { name: idpName } = await this.identityProvider.getById(IDP_ID);
    const session: OidcClientSession = {
      idpId: IDP_ID,
      idpName,
      idpNonce: nonce,
      idpState: state,
    };

    await sessionOidc.set(session);

    this.logger.trace({
      body,
      method: 'POST',
      name: 'OidcClientRoutes.REDIRECT_TO_IDP',
      redirect: authorizationUrl,
      res,
      route: OidcClientRoutes.REDIRECT_TO_IDP,
      session,
    });

    res.redirect(authorizationUrl);
  }
}
