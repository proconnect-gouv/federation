/* istanbul ignore file */

// Declarative code

import { MiddlewareConsumer, Module } from '@nestjs/common';

import { ConfigService } from '@fc/config';
import { ExceptionsModule } from '@fc/exceptions';
import {
  IdentityProviderAdapterEnvModule,
  IdentityProviderAdapterEnvService,
} from '@fc/identity-provider-adapter-env';
import { OidcClientModule } from '@fc/oidc-client';
import {
  ServiceProviderAdapterEnvModule,
  ServiceProviderAdapterEnvService,
} from '@fc/service-provider-adapter-env';
import {
  SessionConfig,
  SessionMiddleware,
  SessionModule,
  SessionTemplateMiddleware,
} from '@fc/session';

import { ExploitationController, OidcClientController } from './controllers';
import { ExploitationSession } from './dtos';

@Module({
  imports: [
    ExceptionsModule,
    IdentityProviderAdapterEnvModule,
    OidcClientModule.register(
      IdentityProviderAdapterEnvService,
      IdentityProviderAdapterEnvModule,
      ServiceProviderAdapterEnvService,
      ServiceProviderAdapterEnvModule,
    ),
    SessionModule.forRoot({
      schema: ExploitationSession,
    }),
  ],
  controllers: [ExploitationController, OidcClientController],
  providers: [],
})
export class ExploitationModule {
  constructor(private readonly config: ConfigService) {}

  configure(consumer: MiddlewareConsumer) {
    const { excludedRoutes } = this.config.get<SessionConfig>('Session');

    consumer
      .apply(SessionMiddleware, SessionTemplateMiddleware)
      .exclude(...excludedRoutes)
      .forRoutes('*');
  }
}
