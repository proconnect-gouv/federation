<%

// Hard coded claims order for identity claims
const sortedNames = [
  'family_name',
  'preferred_username',
  'given_name',
  'gender',
  'birthdate',
  'birthplace',
  'birthcountry',
  'address',
  'email',
  'phone_number',
];

const dataProviderOrder = (a, b) => {
  // FC Must Come First
  if (a[0].provider.key === 'FCP_HIGH') {
    return -1;
  }
  
  if (b[0].provider.key === 'FCP_HIGH') {
    return 1;
  }

  // Normal sort
  return a[0].provider.label < b[0].provider.label ? -1 : 1;
}

const claimOrder = (a, b) => {
  if (a.provider.key === 'FCP_HIGH') { // Sort is hard coded for identity claims
    return sortedNames.indexOf(a.identifier) - sortedNames.indexOf(b.identifier);
  }

  return a.label < b.label ? -1 : 1; 
}

const regroup = (groups, claim) => {
   if (!groups[claim.provider.key]) {
      groups[claim.provider.key] = [];
    }

    groups[claim.provider.key].push(claim);
}

const hasLabel = ({ label }) => label;


const claimsGroups = {};

locals.claims
  .filter(hasLabel) // Omit claims with falsy label (sub, amr...)
  .forEach(regroup.bind(null, claimsGroups));

%>

  <div>

    <% Object.values(claimsGroups).sort(dataProviderOrder).forEach((group) => { %>
      
        <p class="provider">Informations récupérées depuis <%= group[0].provider.label%>&nbsp;:</p>

        <ul data-testid="consent-detail">
        <% group.sort(claimOrder).forEach((claim) => { %>
          <li>
            <%= claim.label %>
          </li>
        <% })%>
        </ul>

    <% }) %>

  </div>
