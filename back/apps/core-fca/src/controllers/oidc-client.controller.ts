import {
  Body,
  Controller,
  Get,
  Post,
  Render,
  Req,
  Res,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';

import { ConfigService } from '@fc/config';
import { IdentityProviderAdapterMongoService } from '@fc/identity-provider-adapter-mongo';
import { LoggerLevelNames, LoggerService } from '@fc/logger-legacy';
import {
  OidcClientConfig,
  OidcClientRoutes,
  OidcClientService,
  OidcClientSession,
  RedirectToIdp,
} from '@fc/oidc-client';
import { OidcProviderService } from '@fc/oidc-provider';
import {
  ISessionService,
  Session,
  SessionCsrfService,
  SessionInvalidCsrfSelectIdpException,
  SessionService,
} from '@fc/session';

@Controller()
export class OidcClientController {
  // Dependency injection can require more than 4 parameters
  /* eslint-disable-next-line max-params */
  constructor(
    private readonly config: ConfigService,
    private readonly logger: LoggerService,
    private readonly oidcClient: OidcClientService,
    private readonly identityProvider: IdentityProviderAdapterMongoService,
    private readonly csrfService: SessionCsrfService,
    private readonly oidcProvider: OidcProviderService,
    private readonly sessionService: SessionService,
  ) {
    this.logger.setContext(this.constructor.name);
  }

  /**
   * @todo #242 get configured parameters (scope and acr)
   */
  @Post(OidcClientRoutes.REDIRECT_TO_IDP)
  @UsePipes(new ValidationPipe({ whitelist: true }))
  async redirectToIdp(
    @Req() req,
    @Res() res,
    @Body() body: RedirectToIdp,
    /**
     * @todo Adaptation for now, correspond to the oidc-provider side.
     * Named "OidcClient" because we need a future shared session between our libs oidc-provider and oidc-client
     * without a direct dependance like now.
     * @author Hugues
     * @date 2021-04-16
     * @ticket FC-xxx
     */
    @Session('OidcClient')
    sessionOidc: ISessionService<OidcClientSession>,
  ): Promise<void> {
    const { providerUid: idpId, csrfToken } = body;

    let serviceProviderId: string | null;
    try {
      const { spId } = await sessionOidc.get();
      serviceProviderId = spId;
    } catch (error) {
      this.logger.trace({ error }, LoggerLevelNames.WARN);
      serviceProviderId = null;
    }

    const { scope } = this.config.get<OidcClientConfig>('OidcClient');
    const { params } = await this.oidcProvider.getInteraction(req, res);

    const {
      // oidc parameter
      // eslint-disable-next-line @typescript-eslint/naming-convention
      acr_values,
    } = params;

    // -- control if the CSRF provided is the same as the one previously saved in session.
    try {
      await this.csrfService.validate(sessionOidc, csrfToken);
    } catch (error) {
      this.logger.trace({ error }, LoggerLevelNames.WARN);
      throw new SessionInvalidCsrfSelectIdpException(error);
    }

    if (serviceProviderId) {
      await this.oidcClient.utils.checkIdpBlacklisted(serviceProviderId, idpId);
    }

    // TODO END
    const { state, nonce } =
      await this.oidcClient.utils.buildAuthorizeParameters();

    const authorizationUrl = await this.oidcClient.utils.getAuthorizeUrl({
      state,
      scope,
      idpId,
      // acr_values is an oidc defined variable name
      // eslint-disable-next-line @typescript-eslint/naming-convention
      acr_values,
      nonce,
      /**
       * @todo Retrieve the true claims value requested by the service provider
       * after FC-675 was merged
       * @author Emmanuel Maravilha
       * @date 2022-01-02
       */
      claims: '{"id_token":{"amr":{"essential":true}}}',
    });

    const authorizationUrlWithSpId = this.appendSpIdToAuthorizeUrl(
      serviceProviderId,
      authorizationUrl,
    );

    const { name: idpName, title: idpLabel } =
      await this.identityProvider.getById(idpId);
    const session: OidcClientSession = {
      idpId,
      idpName,
      idpLabel,
      idpState: state,
      idpNonce: nonce,
    };

    await sessionOidc.set(session);

    this.logger.trace({
      route: OidcClientRoutes.REDIRECT_TO_IDP,
      method: 'POST',
      name: 'OidcClientRoutes.REDIRECT_TO_IDP',
      body,
      res,
      session,
      redirect: authorizationUrlWithSpId,
    });

    res.redirect(authorizationUrlWithSpId);
  }

  /**
   * @TODO #141 implement proper well-known
   * @see https://gitlab.dev-franceconnect.fr/france-connect/fc/-/issues/141
   *  - generated by openid-client
   *  - pub keys orverrided by keys from HSM
   */
  @Get(OidcClientRoutes.WELL_KNOWN_KEYS)
  async getWellKnownKeys() {
    this.logger.trace({
      route: OidcClientRoutes.WELL_KNOWN_KEYS,
      method: 'GET',
      name: 'OidcClientRoutes.WELL_KNOWN_KEYS',
    });
    return this.oidcClient.utils.wellKnownKeys();
  }

  @Post(OidcClientRoutes.DISCONNECT_FROM_IDP)
  async logoutFromIdp(
    @Res() res,
    @Session('OidcClient')
    sessionOidc: ISessionService<OidcClientSession>,
  ) {
    this.logger.trace({
      route: OidcClientRoutes.DISCONNECT_FROM_IDP,
      method: 'POST',
      name: 'OidcClientRoutes.DISCONNECT_FROM_IDP',
    });
    const { idpIdToken, idpState, idpId } = await sessionOidc.get();

    const endSessionUrl: string =
      await this.oidcClient.getEndSessionUrlFromProvider(
        idpId,
        idpState,
        idpIdToken,
      );

    return res.redirect(endSessionUrl);
  }

  @Get(OidcClientRoutes.CLIENT_LOGOUT_CALLBACK)
  @Render('oidc-provider-logout-form')
  async redirectAfterIdpLogout(
    @Req() req,
    @Res() res,
    @Session('OidcClient')
    sessionOidc: ISessionService<OidcClientSession>,
  ) {
    const { oidcProviderLogoutForm } = await sessionOidc.get();

    await this.sessionService.destroy(req, res);

    return { oidcProviderLogoutForm };
  }

  /**
   * Append the sp_id query param to the authorize url
   * @see https://gitlab.dev-franceconnect.fr/france-connect/fc/-/issues/475
   *
   * @param serviceProviderId The client_id of the SP
   * @param authorizationUrl The authorization url built by the library oidc-client
   * @returns The final url
   */
  private appendSpIdToAuthorizeUrl(
    serviceProviderId: string,
    authorizationUrl: string,
  ): string {
    return `${authorizationUrl}&sp_id=${serviceProviderId}`;
  }
}
