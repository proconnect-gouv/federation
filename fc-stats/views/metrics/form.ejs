<%
function computeFilterValues(items, key) {
  return items.map(item => ({
    key: item.key,
    value: key+':'+item.key,
    count: item.doc_count
  }));
}

// We need to sort ranges by meaning, not alpha.
function sortRanges(rangeList) {
  const sorted = [];
  // For this we use mapping, wich is sorted.
  Object.keys(locals.helpers.MAPPINGS.granularity).forEach(key => {
    const item = rangeList.find(sub => sub.key === key);
    if (item) {
      sorted.push(item);
    }
  });

  return sorted;
}

%>

<div>
  <form id="search" action="<%= APP_ROOT %>/metrics" method="get">

    <div class="form-inline">

      <div class="form-group form-inline col-md-3">

          <label class="p-1" for="start">Du</label>
          <input
            id="start"
            name="start"
            type="text"
            data-init="datePicker"
            data-secondField="stop"
            data-form="search"
            class="form-control form-control-sm mb-1"
            value="<%= moment(params.start).format('YYYY-MM-DD') %>"
            style="width: 90px;"
            >

          <label class="p-1" for="stop">Au</label>
          <input
            id="stop"
            name="stop"
            type="text"
            value="<%= moment(params.stop).format('YYYY-MM-DD') %>"
            class="form-control  form-control-sm mb-1"
            style="width: 90px;"
          />
      </div>

        <div class="form-group col-md-7">
        <% if (locals.meta) { %>
          <%- include('../partials/dropdown', {
            name: 'filters[]',
            label: 'Clé',
            key: 'key',
            valueType: 'composed',
            type: 'multiple',
            mapping: locals.helpers.MAPPINGS.metrics,
            values: computeFilterValues(locals.meta.keyList, 'key'),
          }) %>
          <% } %>
          <%- include('../partials/dropdown', {
            name: 'visualize',
            label: 'Vue',
            key: 'visualize',
            type: 'unique',
            valueType: 'plain',
            className: 'warning',
            mandatory: true,
            mapping: locals.helpers.MAPPINGS.visualize,
            values: Object.keys(locals.helpers.MAPPINGS.visualize).map(item => ({ key: item, value: item }))
          }) %>

          <% if (locals.meta) { %>
          <%- include('../partials/dropdown', {
            name: 'filters[]',
            label: 'Grain',
            key: 'range',
            type: 'unique',
            valueType: 'composed',
            className: 'warning',
            mandatory: true,
            mapping: locals.helpers.MAPPINGS.granularity,
            values: sortRanges(computeFilterValues(locals.meta.rangeList, 'range'))
          }) %>

          <% } %>
          <%
            const columns = ['date', 'key', 'range', 'value'];
            const columnValues = columns.map(item => ({key: item, value: item }));
           %>


        </div>




        <div class="col-md-2">
          <button type="submit" id="bouton-filtrer" class="btn btn-sm btn-primary m-1"><i class="fa fa-search"></i></button>
          <a class="" href="<%= APP_ROOT %>/metrics" title="Réinitialiser"><i class="fa fa-undo"></i></a>
        </div>

    </div>

<!--    <% if (locals.meta) { %>
      &nbsp; <%= meta.total %> rés.
    <% } %>
-->

    <div
      id="graph-settings"
      class="row d-<%= (params.visualize && params.visualize !== 'list') ? 'inherit' : 'none' %>"
      data-init="graphSetting"
    >
      <div class="col-md-3"></div>
        <div class="form-group form-inline col-md-9">

        <% if (params.visualize === 'pie') { %>
        <label>Paramètres graphique :</label>

          <%- include('../partials/dropdown', {
            name: 'x',
            label: 'comparer périodes ?',
            key: 'x',
            type: 'unique',
            valueType: 'plain',
            className: 'warning',
            values: [{key: 'oui', value: 'date'}],
          }) %>

            <input type="hidden" name="y" value="key" />
        <% } else { %>

          <input type="hidden" name="x" value="date" />
          <input type="hidden" name="y" value="key" />
      <% } %>
      </div>
    </div>


  </form>
</div>
