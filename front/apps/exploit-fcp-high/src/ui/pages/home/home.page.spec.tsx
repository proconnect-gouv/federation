import { render } from '@testing-library/react';
import { mocked } from 'ts-jest/utils';

import { useUserinfos } from '@fc/oidc-client';

import { HomePageComponent } from './home.page';

jest.mock('@fc/oidc-client');

describe('Homepage', () => {
  const userInfosMocked = mocked(useUserinfos);

  const userInfosMockedValue = {
    connected: true,
    userinfos: {
      birthcountry: 'birthcountryMockValue',
      birthdate: 'birthdateMockValue',
      birthplace: 'birthplaceMockValue',
      email: 'emailMockValue',
      // oidc defined variable
      // eslint-disable-next-line @typescript-eslint/naming-convention
      family_name: 'family_nameMockValue',
      gender: 'genderMockValue',
      // oidc defined variable
      // eslint-disable-next-line @typescript-eslint/naming-convention
      given_name: 'given_nameMockValue',
      // oidc defined variable
      // eslint-disable-next-line @typescript-eslint/naming-convention
      phone_number: 'MockValue',
      // oidc defined variable
      // eslint-disable-next-line @typescript-eslint/naming-convention
      preferred_username: 'MockValue',
      sub: 'subMockValue',
    },
  };

  beforeEach(() => {
    jest.resetAllMocks();

    userInfosMocked.mockImplementation(() => userInfosMockedValue);
  });

  it('should say "bonjour" to connected user', () => {
    // given
    const { getByText } = render(<HomePageComponent />);
    // when
    const linkElement = getByText(/birthdate/i);
    // then
    expect(linkElement).toBeInTheDocument();
  });

  it('should say "pas connecté" to disconnected user', () => {
    // given
    userInfosMocked.mockImplementationOnce(() => ({
      ...userInfosMockedValue,
      connected: false,
    }));

    const { getByText } = render(<HomePageComponent />);
    // when
    const linkElement = getByText("Vous n'êtes pas connecté :'(");
    // then
    expect(linkElement).toBeInTheDocument();
  });
});
