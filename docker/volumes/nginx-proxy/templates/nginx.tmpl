{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ $external_http_port := coalesce $.Env.HTTP_PORT "80" }}
{{ $external_https_port := coalesce $.Env.HTTPS_PORT "443" }}

{{ define "upstream" }}
  {{ if .Address }}
  server {{ .Address }}:{{ .Port }} max_fails=3 fail_timeout=30s;
  {{ else }}
  server 127.0.0.1 down;
  {{ end }}
  keepalive 64;
{{ end }}

# Default dhparam
{{ if (exists "/etc/nginx/dhparam/dhparam.pem") }}
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ $vhostContainer := $containers | first }}

{{ $host := trim $host }}

### {{ $host }}

upstream {{ $host }} {
{{ range $knownNetwork := $CurrentContainer.Networks }}
  {{ range $containerNetwork := $vhostContainer.Networks }}
    {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
      {{ $port := coalesce $vhostContainer.Env.VIRTUAL_PORT "80" }}
      {{ $address := where $vhostContainer.Addresses "Port" $port | first }}
      {{ template "upstream" (dict "Container" $vhostContainer "Address" $containerNetwork.IP "Port" $port) }}
    {{ end }}
  {{ end }}
{{ end }}
}

server {
  listen {{ $external_http_port }};
  server_name {{ $host }};

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen {{ $external_https_port }} ssl;
  server_name {{ $host }};

  include includes/common.vhost.conf;

{{ $proto := coalesce $vhostContainer.Env.App_PROTOCOL "http" }}
{{ if $vhostContainer.Env.SSL_CLIENT_PROTECTED_URIS }}
  {{ range $protected_uri := split $vhostContainer.Env.SSL_CLIENT_PROTECTED_URIS "," }}
  location {{ $protected_uri }} {
    # URL protégée : requiert certificat client valide.
    if ($ssl_client_verify != "SUCCESS") {
      return 403;
    }
    proxy_pass {{ $proto }}://{{ trim $host }};
  }
  {{ end }}
{{ end }}

{{ $proto := coalesce $vhostContainer.Env.App_PROTOCOL "http" }}
  location / {
    proxy_pass {{ $proto }}://{{ trim $host }};
  }
}
{{ end }}
