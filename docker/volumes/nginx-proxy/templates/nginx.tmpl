{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ $external_http_port := coalesce $.Env.HTTP_PORT "80" }}
{{ $external_https_port := coalesce $.Env.HTTPS_PORT "443" }}

{{ define "upstream" }}
  {{ if .Address }}
  server {{ .Address }}:{{ .Port }} max_fails=3 fail_timeout=30s;
  {{ else }}
  server 127.0.0.1 down;
  {{ end }}
  keepalive 64;
{{ end }}

# Default dhparam
{{ if (exists "/etc/nginx/dhparam/dhparam.pem") }}
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
{{ end }}

{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}

{{ range $container := $containers }}

{{ $upstream := trim (print $container.Name ".docker.dev-franceconnect.fr") }}

upstream {{ $upstream }} {
  {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
  {{ template "upstream" (dict "Container" $container "Address" $container.Name "Port" $port) }}
}
{{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ $host := trim $host }}

### {{ $host }}



server {
  listen {{ $external_http_port }};
  server_name {{ $host }};

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen {{ $external_https_port }} ssl;
  server_name {{ $host }};

  include includes/common.vhost.conf;

  {{ range $container := $containers }}

    {{ $upstream := trim (print $container.Name ".docker.dev-franceconnect.fr") }}
    {{ $proto := coalesce $container.Env.App_PROTOCOL "http" }}

    {{ if $container.Env.SSL_CLIENT_PROTECTED_URIS }}
      {{ range $protected_uri := split $container.Env.SSL_CLIENT_PROTECTED_URIS "," }}
      location {{ $protected_uri }} {
        # URL protégée : requiert certificat client valide.
        if ($ssl_client_verify != "SUCCESS") {
          return 403;
        }
        proxy_pass {{ $proto }}://{{ $upstream }};
      }
      {{ end }}
    {{ end }}

    {{ $location := coalesce $container.Env.VIRTUAL_HOST_PATH "/" }}
    location {{ $location }} {
      proxy_pass {{ $proto }}://{{ $upstream }};
    }
  {{ end }}
}
{{ end }}