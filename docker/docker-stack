#!/usr/bin/env bash
set -e

if [ -z "$FC_ROOT"  ]
then
  read -p "Missing FC_ROOT path. Please fill in: " FC_ROOT
fi

#### Global Functions:
function join_by { local IFS="$1"; shift; echo "$*"; }

#### Global Variables:
COMPOSE_PROJECT_NAME=fc
DEFAULT_NODE_VERSION=latest
COMPOSE_DIR="$FC_ROOT/fc/docker/compose"
COMPOSE_FILES=$(find $COMPOSE_DIR -name "*.yml")
VOLUMES_DIR="$FC_ROOT/fc/docker/volumes"
WORKING_DIR="$( cd "$( dirname "$0" )" >/dev/null 2>&1 && pwd )"

# https://docs.docker.com/compose/reference/envvars/#compose_file
COMPOSE_PATH_SEPARATOR=":"
COMPOSE_FILE=$(join_by $COMPOSE_PATH_SEPARATOR $COMPOSE_FILES)
export COMPOSE_PATH_SEPARATOR
export COMPOSE_FILE
export COMPOSE_DIR
export VOLUMES_DIR
export COMPOSE_PROJECT_NAME
export WORKING_DIR

# Get current uid/gid to use it within docker-compose:
# see https://medium.com/redbubble/running-a-docker-container-as-a-non-root-user-7d2e00f8ee15
# Modf 2020-06-04: récupération de l'id du groupe docker (nécessaire pour le conteneur 'docker-gen')
export CURRENT_UID="$(id -u):$(grep docker /etc/group | cut -d: -f3)"

# Fix node version to use
if [ "${NODE_VERSION:-xxx}" = "xxx" ]
then
  NODE_VERSION=${DEFAULT_NODE_VERSION}
fi
export NODE_VERSION

# Disable TTY on CI env
[ $CI ] && NO_TTY=" -T" || NO_TTY=""

# Find which nodejs containers are running and store it into $RUNNING_CONTAINERS
_get_running_containers() {
  NODEJS_CONTAINERS=`docker ps -qf ancestor=$FC_DOCKER_REGISTRY/nodejs:$NODE_VERSION-dev`

  if [ "${NODEJS_CONTAINERS:-xxx}" != "xxx" ]
  then
    RUNNING_CONTAINERS=`docker inspect -f '{{index (.Config.Labels) "com.docker.compose.service" }}' $NODEJS_CONTAINERS`

    # Quick dirty trick to not match any legacy container in CI
    # This will get all running containers ($RUNNING_CONTAINERS) and match them against the container list from docker-compose (which is for sure not containing legacy containers)
    # Objective is to use the $COMPOSE_PROJECT_NAME later.
    _ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS=`comm -12 <(docker-compose ps --services --filter "status=running" | sort) <(echo $RUNNING_CONTAINERS | tr ' ' '\n' | sort)`
  fi
}

_up() {
  apps=${@:-none}
  services=rp-all
  for app in $apps
  do
    case "$app" in
      rp-all)
        services="rp-all"
        ;;
      all-eidas-high)
        services="$services all-eidas-high"
      ;;
      min-eidas-high)
        services="$services min-eidas-high"
      ;;
      lemon-ldap)
        services="$services lemon-ldap"
        ;;
      hybridge-fca-low)
        services="$services hybridge-fca-low"
        ;;
      all-fca-low)
        services="$services all-fca-low"
        ;;
      bdd-fca-low)
        services="$services bdd-fca-low"
        ;;
      min-fca-low)
        services="$services min-fca-low"
        ;;
      exploit-fca-low)
        services="$services exploit-fca-low"
        ;;
      rnipp)
        services="$services rnipp"
        ;;
      all-fcp-high)
        services="$services all-fcp-high"
        ;;
      bdd-fcp-high)
        services="$services bdd-fcp-high"
        ;;
      min-fcp-high)
        services="$services min-fcp-high"
        ;;
      exploit-fcp-high)
        services="$services exploit-fcp-high"
        ;;
      bridge-proxy-rie)
        services="$services bridge-proxy-rie"
        ;;
      eidas-bridge)
        services="$services eidas-bridge"
        ;;
      eidas-fr)
        services="$services eidas-fr"
        ;;
      eidas-mock)
        services="$services eidas-mock"
        ;;
      eidas-be)
        services="$services eidas-be"
        ;;
      exploitation-fca-low)
        services="$services exploitation-fca-low"
        ;;
      exploit-fcp-high-front)
        services="$services exploit-fcp-high-front"
        ;;
      exploit-fcp-high-back)
        services="$services exploit-fcp-high-back"
        ;;
      exploitation-high)
        services="$services exploitation-high"
        ;;
      exploit-fca-low-front)
        services="$services exploit-fca-low-front"
        ;;
      exploit-fca-low-back)
        services="$services exploit-fca-low-back"
        ;;
      all-fcp-low)
        services="$services all-fcp-low"
        ;;
      bdd-fcp-low)
        services="$services bdd-fcp-low"
        ;;
      min-fcp-low)
        services="$services min-fcp-low"
        ;;
      mongo-fcp-high)
        # Needed for user dashboard, do not start rp-all
        services="mongo-fcp-high"
        ;;
      partners-fca)
        services="$services partners-fca"
        ;;
      partners-fcp)
        services="$services partners-fcp"
        ;;
      min-storybook)
        services="$services min-storybook"
        ;;
      all)
        services=all
        break
        ;;
      *)
        echo "Usage: $script <option>:"
        echo "----"
        echo "* up => Select the apps you want to up as well as their dependencies (multiple arguments allowed) :"
        echo "  - min-eidas-high => up minimal needed services to run eidas (min-fcp-high + eidas + 2 mocks)"
        echo "  - all-eidas-high => all needed services to run eidas (all-fcp-high + eidas + 2 mocks)"
        echo "  - min-fcp-high => up minimal needed services to run fcp-high (core-fcp-high, fsp1-high, fip1-high, etc.)"
        echo "  - bdd-fcp-high => up needed services to run the bdd tests on fcp-high"
        echo "  - all-fcp-high => all needed services to run fcp-high (core-fcp-high, fsp1-high, fsp2-high, fsp3-high, fsp5-high, fsp6-high, fip1-high, fip2-high, fip6-high, rnipp, haproxy, hsm, etc.)"
        echo "  - exploit-fcp-high => up minimal needed services to run the FranceConnect High fc-apps"
        echo "  - min-fcp-low => up minimal needed services to run core-fcp-low fsp1-low fip1-low"
        echo "  - bdd-fcp-low => up needed services to run the bdd tests on fcp-low"
        echo "  - all-fcp-low => up all needed services to run core-fcp-low and all other future services"
        echo "  - min-fca-low => up minimal needed services to run core-fca-low fsa1-low fia1-low"
        echo "  - bdd-fca-low => up needed services to run the bdd tests on fca-low"
        echo "  - all-fca-low => all needed services to run fca-low stack (core-fca-low, fsa[n]-low, fia[n]-low, exploit, hsm, etc.)"
        echo "  - exploit-fca-low => up minimal needed services to run the Agentconnect Low fc-apps"
        echo "  - lemon-ldap => up needed services to run lemon-ldap and to access his manager"
        echo "  - hybridge-fca-low => up minimal needed services to run core-fca-low fca-low-front bridge-proxy-rie fsa1-low lemon-ldap"
        echo "  - partners-fca => up minimal needed services to run partners fca front and back"
        echo "  - partners-fcp => up minimal needed services to run partners fcp front and back"
        echo "  - min-storybook => up minimal needed services to run storybook"
        echo "  - all => run all services"
        echo "----"
        exit 1
        ;;
    esac
  done
    echo "Starting FC Dev environment... $@"
    docker login ${FC_DOCKER_REGISTRY}
    docker pull registry.gitlab.dev-franceconnect.fr/france-connect/fc-docker/nodejs:${DEFAULT_NODE_VERSION}-dev
    cd ${WORKING_DIR} && docker-compose up --build -d $services

    _get_running_containers
    if [ "${_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS:-xxx}" != "xxx" ]
    then
      echo "Installing node modules..."
      _install_dependencies $_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS
    fi

    case $services in
      *"lemon-ldap"*)
        # Sleep to wait for configuration initialization
        echo "Restore LemonLDAP configuration"
        cd ${WORKING_DIR} && docker-compose exec fia-llng-low bash /scripts/init.sh
        echo "Loaded !"
        ;;
      *"hybridge-"*)
        # Sleep to wait for configuration initialization
        echo "Restore LemonLDAP configuration"
        sleep 10
        cd ${WORKING_DIR} && docker-compose exec fia-llng-low bash /scripts/init.sh
        # Sleep to wait for mongodb replicat initialization
        echo "Reseting database to default state..."
        sleep 10
        docker-compose exec $NO_TTY mongo-fca-low /opt/scripts/manage.sh --reset-db
        echo "Loaded !"
        ;;
      *"-fcp-low"*)
        # Sleep to wait for mongodb replicat initialization
        echo "Reseting database to default state..."
        echo $services
        sleep 10
        docker-compose exec $NO_TTY mongo-fcp-low /opt/scripts/manage.sh --reset-db
        echo "Loaded !"
        ;;
      *"-fcp-high"*)
        # Sleep to wait for mongodb replicat initialization
        echo "Reseting database to default state..."
        sleep 10
        docker-compose exec $NO_TTY mongo-fcp-high /opt/scripts/manage.sh --reset-db
        echo "Loaded !"
        ;;
      *"-fca-low"*)
        # Sleep to wait for mongodb replicat initialization
        echo "Reseting database to default state..."
        sleep 10
        docker-compose exec $NO_TTY mongo-fca-low /opt/scripts/manage.sh --reset-db
        echo "Loaded !"
        ;;
      *"-eidas"*)
        # Sleep to wait for mongodb replicat initialization
        echo "Reseting database to default state..."
        echo $services
        sleep 10
        docker-compose exec $NO_TTY mongo-fcp-high /opt/scripts/manage.sh --reset-db
        echo "Loaded !"
        ;;
      *"partners-fca"*)
        echo "Running migrations on database..."
        _migrations-partners "partners-fca-back"
        echo "Inserting fixtures in database..."
        _fixtures-partners "partners-fca-back"
        ;;
      *"partners-fcp"*)
        echo "Running migrations on database..."
        _migrations-partners "partners-fcp-back"
        echo "Inserting fixtures in database..."
        _fixtures-partners "partners-fcp-back"
        ;;
    esac
}

_run_prod() {
  apps=${@:-none}
  for app in $apps
  do
    case "$app" in
      csmr-hsm-prod)
        services="$services csmr-hsm-prod"
        ;;
      *)
        echo "Usage: $script <option>:"
        echo "----"
        echo "* run-prod => Select the production image you want to run:"
        echo "  - csmr-hsm-prod"
        echo "----"
        exit 1
        ;;
    esac
  done
    echo "Starting production image for... $@"
    docker login ${FC_DOCKER_REGISTRY}
    cd ${WORKING_DIR} && docker-compose up --build -d $services
}

_install_dependencies() {
  apps=${@:-no-container}
  for app in $apps
  do
    echo "Installing dependencies for [$app]:"
    err=false
    if [ "$PROXY_EXPLOITATION" ];
    then
      echo "Setting up yarn proxy for [$app]..."
      cd ${WORKING_DIR} && docker-compose exec $NO_TTY $app bash -c "yarn config set proxy $PROXY_EXPLOITATION && yarn config set https-proxy $PROXY_EXPLOITATION"
    fi
    cd ${WORKING_DIR} && docker-compose exec $NO_TTY $app "/opt/scripts/install.sh" || err=true
  done
}

_test() {
  apps=${@:-no-container}
  for app in $apps
  do
    cd ${WORKING_DIR} && docker-compose exec $NO_TTY $app "/opt/scripts/test.sh" || err=true
  done
}


_e2e() {
  app=${1:-no-container}
  [ $# -gt 0 ] && shift
  case "$app" in
    *)
      echo "Usage: $script <option>:"
      echo "----"
      echo "* e2e ==> only this stack are allowed :"
      echo "@todo Implements this"
      echo "----"
      exit 1
    ;;
  esac
  command="open"
  if [ "${@:-xxx}" = "run" ]
  then
    command='run'
  fi
  cd ${FC_ROOT}/${directory} && npx cypress ${command}
}

_start() {
  apps=${@:-no-container}
  for app in $apps
  do
    echo "Starting ${app} app..."
    cd ${WORKING_DIR} && docker-compose exec $NO_TTY ${app} "/opt/scripts/start.sh" || err=true
  done
}

_start_ci() {
  apps=${@:-no-container}
  for app in $apps
  do
    echo "Starting ${app} app..."
    cd ${WORKING_DIR} && docker-compose exec $NO_TTY ${app} "/opt/scripts/start-ci.sh" || err=true
  done
}

_stop() {
  apps=${@:-no-container}
  for app in $apps
  do
    echo "Stopping ${app} app..."
    cd ${WORKING_DIR} && docker-compose exec $NO_TTY ${app} "/opt/scripts/stop.sh" || err=true
  done
}

_log() {
  app=${@:-no-container}
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY ${app} pm2 logs
}

_fixtures_fcp_high() {
  echo "**************************************"
  echo " Resetting fixtures in database..."
  echo "**************************************"
  apps="exploitation-high"
  for app in $apps
  do
    echo "**************************************"
    echo "\n\nFixture for ${app} app...\n\n"
    echo "**************************************"
    cd ${WORKING_DIR}
    docker-compose exec $NO_TTY ${app} yarn typeorm schema:drop
    docker-compose exec $NO_TTY ${app} yarn migrations:run
    docker-compose exec $NO_TTY ${app} yarn fixtures:load

    cd ${FC_ROOT}/fc-apps/shared/cypress/support/ && ./db.sh ${app} create
  done

  echo "**************************************"
  echo "\n\n\n FIXTURES DONE ! \n\n\n"
  echo "**************************************"
}

_fixtures_fca_low() {
  echo "**************************************"
  echo " Resetting fixtures in database..."
  echo "**************************************"
  apps="exploitation-fca-low"
  for app in $apps
  do
    echo "**************************************"
    echo "\n\nFixture for ${app} app...\n\n"
    echo "**************************************"
    cd ${WORKING_DIR}
    docker-compose exec $NO_TTY ${app} yarn typeorm schema:drop
    docker-compose exec $NO_TTY ${app} yarn migrations:run
    docker-compose exec $NO_TTY ${app} yarn fixtures:load

    cd ${FC_ROOT}/fc-apps/shared/cypress/support/ && ./db.sh ${app} create
  done

  echo "**************************************"
  echo "\n\n\n FIXTURES DONE ! \n\n\n"
  echo "**************************************"
}

_storybook() {
  echo "**************************************"
  echo " Up and Start Storybook..."
  echo "**************************************"
  cd ${WORKING_DIR} && docker-compose up storybook
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY storybook "/opt/scripts/install.sh" || err=true
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY storybook "/opt/scripts/start.sh" || err=true
  echo "**************************************"
  echo "\n\n\n Storybook DONE ! \n\n\n"
  echo "**************************************"
}

_reset_db_fcp_high() {
  echo "Reseting Core FCP High mongo database..."
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY mongo-fcp-high /opt/scripts/manage.sh --reset-db
}

_reset_db_core_fca_low() {
  echo "Reseting Core FCA LOW mongo database..."
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY mongo-fca-low /opt/scripts/manage.sh --reset-db
}

_idp_as_prod_v2() {
  echo "Set IdP as production ..."
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY mongo-fcp-high /opt/scripts/manage.sh --reset-db=display-idp-as-in-prod
}

_halt() {
  echo "Stopping FC Dev environment..."
  cd ${WORKING_DIR} && docker-compose stop
}

_exec() {
  app=${1:-empty}
[ $# -gt 0 ] && shift

  case $app in
    empty)
      echo "Usage: docker-stack exec <container_name> <command>"
      exit 1
      ;;
    *)
      cd ${WORKING_DIR} && docker-compose exec $NO_TTY $app $@
      ;;
  esac
}

_mongo_shell_core_fca_low() {
 echo "starting mongo `core-fca-low` database in shell..."
  cd ${WORKING_DIR} && docker-compose exec mongo-fca-low mongo -u 'rootAdmin' -p 'pass' --authenticationDatabase admin core-fca-low --tls
}

_mongo_shell_core-fcp-high() {
 echo "starting mongo `core-fcp-high` database in shell..."
  cd ${WORKING_DIR} && docker-compose exec mongo-fcp-high mongo core-fcp-high -u 'fc' -p 'pass' --authenticationDatabase core-fcp-high --tls
}

_mongo_shell_core-fcp-low() {
 echo "starting mongo `core-fcp-low` database in shell..."
  cd ${WORKING_DIR} && docker-compose exec mongo-fcp-low mongo core-fcp-low -u 'core-fcp-low' -p 'pass' --authenticationDatabase core-fcp-low --tls
}

_fca_low_front() {
  cd ${WORKING_DIR}
  docker-compose exec $NO_TTY fca-low-front yarn install
  docker-compose exec $NO_TTY fca-low-front yarn build:fca-low-front
  cd ${FC_ROOT}/fc/back/apps/core-fca/src/

  if [ -d 'public' ]
  then
    rm -rf public
  fi

  mkdir public
  # @TODO agent-connect application path
  # should be moved into a bashrc global variables ?
  cd ${FC_ROOT}/fc/front/instances/agent-connect/
  cp -r ${FC_ROOT}/fc/front/instances/agent-connect/build/** ${FC_ROOT}/fc/back/apps/core-fca/src/public

  if [ -e 'interaction.ejs' ]
  then
    rm ${FC_ROOT}/fc/back/apps/core-fca/src/views/interaction.ejs
  fi

  mv ${FC_ROOT}/fc/back/apps/core-fca/src/public/index.html ${FC_ROOT}/fc/back/apps/core-fca/src/views/interaction.ejs
  echo ""
  echo "L'application AgenConnect est maintenant prête à être utilisée..."
  echo ""
}

_migrations-partners() {
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY $1 yarn typeorm:migrations-run
}

_migrations-generate-partners() {
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY $1 yarn typeorm:migrations-generate $2
}

_fixtures-partners() {
  cd ${WORKING_DIR} && docker-compose exec $NO_TTY $1 yarn typeorm:fixtures:load
}

script=$0
action=${1:-help}
[ $# -gt 0 ] && shift
case "$action" in
  checkout)
    _checkout $@
    ;;
  dep|dependencies)
    _install_dependencies $@
    ;;
  dep-all|dependencies-all)
    _get_running_containers
    _install_dependencies $_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS
    ;;
  exec)
    _exec $@
    ;;
  halt)
    _halt
    ;;
  log)
    _log $@
    ;;
  llng-configure)
    cd ${WORKING_DIR} && docker-compose exec fia-llng-low bash /scripts/init.sh
    ;;
  compose)
    cd ${WORKING_DIR} && docker-compose $@
    ;;
  log-rotate)
    echo "Send SIGUSR2 to core-fcp-high app..."
    cd ${WORKING_DIR} && docker-compose exec core-fcp-high pkill -SIGUSR2 -f '/usr/bin/node -r source-map-support/register --inspect=0.0.0.0:9235 /var/www/app/dist/instances/core-fcp-high/main'
    echo "... Signal done"
    ;;
  fixtures-fcp-high)
    _fixtures_fcp_high
    ;;
  fixtures-fca-low)
    _fixtures_fca_low
    ;;
  fca-low-front)
    _fca_low_front
    ;;
  mongo-shell-core-fca-low)
    _mongo_shell_core_fca_low
    ;;
  mongo-shell-core-fcp-high)
    _mongo_shell_core-fcp-high
    ;;
  mongo-shell-core-fcp-low)
    _mongo_shell_core-fcp-low
    ;;
  reload-rp)
    cd ${WORKING_DIR} && docker-compose kill -s SIGHUP rp-all
    ;;
  reload)
    _start $@
    ;;
  reload-all)
    _get_running_containers
    _start $_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS
    ;;
  reset-db-core-fcp-high)
    _reset_db_fcp_high $@
    ;;
  reset-db-core-fca-low)
    _reset_db_core_fca_low $@
    ;;
  idp-as-prod-v2)
    _idp_as_prod_v2 $@
    ;;
  start)
    _start $@
    ;;
  start-ci)
    _start_ci $@
    ;;
  stop)
    _stop $@
    ;;
  # -- start all up's containers (FCP and/or FCA)
  start-all)
    _get_running_containers
    _start $_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS
    ;;
  # -- stop all up's containers (FCP and/or FCA)
  stop-all)
    _get_running_containers
    _stop $_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS
    ;;
  test)
    _test $@
    ;;
  test-all)
    _get_running_containers
    _test $_ONLY_NODEJS_NON_LEGACY_RUNNING_CONTAINERS
    ;;
  e2e)
    _e2e $@
    ;;
  migrations-partners-fcp)
    _migrations-partners "partners-fcp-back"
    ;;
  migrations-partners-fca)
    _migrations-partners "partners-fca-back"
    ;;
  migrations-generate-partners-fcp)
    _migrations-generate-partners "partners-fcp-back" $@
    ;;
  migrations-generate-partners-fca)
    _migrations-generate-partners "partners-fca-back" $@
    ;;
  fixtures-partners-fcp)
    _fixtures-partners "partners-fcp-back"
    ;;
  fixtures-partners-fca)
    _fixtures-partners "partners-fca-back"
    ;;
  storybook)
    _storybook
    ;;
  prune)
    _halt
    docker network prune -f && docker container prune -f
    ;;
  prune-all)
    echo ""
    echo "                                ,sS$$Ss.,sS$$Ss.,s"
    echo "                           ,sS$''$'.ss''''$$$$$$:'    ,sSs."
    echo "                          ;$$$$oo.$$$$l;$o$$$$'',s.   '$$$$Ss."
    echo "                          ''$'$''$$$$'''',ss.'',S$$$$$'Ss.'$$$$$;"
    echo "                        ,s.  $l;$$$$$$$$$$Ss.$$$$$$$o$$$;;$'''.s."
    echo "                  ,s.,sS',sS's$s$$$$$$$$$$$$$;''$',s.'$',sS$$sS$$;"
    echo "           ,sS$Ss.'',s. $o$$o$$$$$$$$$$$$$$$'$Ss.'$$$$ $$'$$$$'''"
    echo "        ,s.'$$$'$';;$$;;$$$$$$$$$$$'$$$$$$$$$'$$$  ''''sS$$$',sS"
    echo "        '''''$$o' s '$$ $$$$''''$''o$$$$$$$$'o''  ,sSS'  '''   ''."
    echo "               ''' ''Ss.'''$oos.'oo's'''''Ss ,s'   '''            '"
    echo "                      ''    ''''.   $ooooo$$"
    echo "                                '   $$$$$$$$"
    echo "                                    $$$$$$$$"
    echo "                                    $'$$$$$$ '                ::"
    echo "                                    $o$$$$$$              ,$:"
    echo "                                    '''$$$''             ,$'"
    echo "                          .sS$Ss..sS$$Ss. $$Ss.,sS$Ss.   $'"
    echo "                          .s'$$'$$$$$$$$$$$$''sS$$$$$Ss. '  ,s'"
    echo "                          ''o$$o$s. s sssss. '''    ''''    $'"
    echo "                 ,s               ' $ $$$$$$        :"
    echo "                 sS$s          #    $$$$$ $$    # ,$'"
    echo "                 's''''Ss           $$$$$$$$     ,$'   :"
    echo "                        ''s         $$$$$ $$    ,$' ,:"
    echo "          .                '    .s'$$$$$$ $$ .sS ' ,$'"
    echo "            '' s      s        s$l$';$'$$$$''s's.  $''"
    echo "                '    ;$l    .s'$$$$$'$$$$$$$$$$$''     ,s"
    echo "                      ''     ''o'$'''o' '  '''$$$$    ,''"
    echo "                                              '''"
    echo ""
    _halt
    docker system prune -af && docker image prune -af && docker system prune -af --volumes && docker system df && (cypress cache prune || echo "skipped cypress cache prune") && npm cache clean --force && yarn cache clean && sudo du -sh /var/cache/apt/archives && cd ${FC_ROOT} && find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
    ;;
  up)
    _up $@
    ;;
  run-prod)
    _run_prod $@
    ;;
  help)
    echo "Usage: $script <option>:"
    echo "----"
    echo "* build [-var 'key=value'] <image_name> [<other_image_name> <...>] => build specific images"
    echo "* fca-low-front build de l'application front FCA (react)"
    echo "* dependencies [<app1> <app2> <...>] / dep [...] => install dependencies (using npm or yarn) on given nodejs applications (Ex. core-fcp-high)"
    echo "* dependencies-all | dep-all => install dependencies (using npm or yarn) on all nodejs applications"
    echo "* exec <container_name> <command> => exec a command inside a container"
    echo "* halt => stop docker-compose and delete containers"
    echo "* llng-configure => Restore LemonLDAP configuration from ./docker/volumes/llng/llng-conf.json dump file"
    echo "* log [<app>] => exec pm2 logs for given instance (Ex. core-fcp-high)"
    echo "* fixtures-fca-low => drop and restore default postgres database for exploitation fca low"
    echo "* fixtures-fcp-high => drop and restore default postgres database for exploitation fcp high"
    echo "* mongo-shell-core-fcp-high => open mongo-fcp-high shell for core-fcp-high stack"
    echo "* mongo-shell-core-fca-low => open mongo-fca-low shell for core-fca-low stack"
    echo "* reload [<app1> <app2> <...>] => (re)start given pm2 instances (Ex. core-fcp-high)"
    echo "* reload-all => (re)start all pm2 instances"
    echo "* reload-rp => reload nginx conf"
    echo "* reset-db-core-fcp-high => drop and restore default mongodb database for mongo core-fcp-high"
    echo "* reset-db-core-fcp-low => drop and restore default mongodb database for mongo core-fcp-low"
    echo "* reset-db-core-fca-low => drop and restore default mongodb database for mongo fca low"
    echo "* start [<app1> <app2> <...>] => (re)start given pm2 instances (Ex. core-fcp-high)"
    echo "* start-all => (re)start all pm2 instances"
    echo "* stop [<app1> <app2> <...>] => stop given pm2 instances (Ex. core-fcp-high)"
    echo "* stop-all => stop all pm2 instances"
    echo "* test [<app1> <app2> <...>] => exec tests on given nodejs applications (Ex. core-fcp-high)"
    echo "* test-all => exec tests on all nodejs applications"
    echo "* e2e => exec e2e tests on given nodejs application (Ex. core-fcp-high)"
    echo "* up => Select the apps you want to up (run without argument to show the lsit of apps)"
    echo "* log-rotate => Send SIGUSR2 signal to node process (core-fcp-high only)"
    # will be replaced in next technical task by a typeorm-fixtures to run migrations and load fixtures for a given app
    echo "migrations-partners-fcp => runs migrations on the container partners-fcp-back"
    echo "migrations-partners-fca => runs migrations on the container partners-fca-back"
    echo "migrations-generate-partners-fcp \"$1\" => generates a new migration on the container partners-fcp-back having the name timestamp-first parameter"
    echo "migrations-generate-partners-fca \"$1\" => generates a new migration on the container partners-fca-back having the name timestamp-first parameter"
    echo "fixtures-partners-fcp => runs fixtures on the container partners-fcp-back"
    echo "fixtures-partners-fca => runs fixtures on the container partners-fca-back"
    echo "storybook => up and start storybook container"
    echo "----"
    echo "Other commands mapped to docker-compose: see https://docs.docker.com/compose/reference/overview/"
    echo " (example: $script ps)"
    exit 1
    ;;
  *)
    cd ${WORKING_DIR} && docker-compose $action $@
    ;;
esac
