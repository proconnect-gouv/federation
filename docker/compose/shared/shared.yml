####################
####################
services:
  all:
    image: alpine
    depends_on:
      - 'rp-all'
      - 'large'

  ####################
  # Shared Services
  ####################

  rp-all:
    image: nginx:1.14.2
    container_name: pc-rp-all
    environment:
      DHPARAM_GENERATION: 'false'
    depends_on:
      - docker-gen
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ${VOLUMES_DIR}/nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${VOLUMES_DIR}/nginx-proxy/etc:/etc/nginx/conf.d:ro
      - ${VOLUMES_DIR}/nginx-proxy/includes:/etc/nginx/includes:ro
      - ${VOLUMES_DIR}/nginx-proxy/public:/var/www:ro
      - ${VOLUMES_DIR}/nginx-proxy/default-vhost:/etc/nginx/html:ro
      - ${VOLUMES_DIR}/ssl:/etc/nginx/docker_host:ro
      - ${VOLUMES_DIR}/ssl:/etc/nginx/client_certs:ro
      - ${VOLUMES_DIR}/log/nginx:/var/log/nginx
    networks:
      public:
        aliases:
          # FCA LOW
          - core-fca-low.docker.dev-franceconnect.fr
          - bridge-proxy-rie.docker.dev-franceconnect.fr
          - fca-low-front.docker.dev-franceconnect.fr
          - fsa1-low.docker.dev-franceconnect.fr
          - fsa2-low.docker.dev-franceconnect.fr
          - fsa3-low.docker.dev-franceconnect.fr
          - fsa4-low.docker.dev-franceconnect.fr
          - fia1-low.docker.dev-franceconnect.fr
          - fia2-low.docker.dev-franceconnect.fr
          - moncomptepro.docker.dev-franceconnect.fr
          # Aliases to access exploitation from test runner
          # TODO: Move those aliases to exploitation network once runner workaround found
          - exploitation-fca-low.docker.dev-franceconnect.fr
          - exploitation-high.docker.dev-franceconnect.fr
          # Mock Data Provider
          - dpa1-low.docker.dev-franceconnect.fr
          - dpa2-low.docker.dev-franceconnect.fr
          # Generic
          - docker.dev-franceconnect.fr
      fc:
      rie:
        aliases:
          - auth.llng.docker.dev-franceconnect.fr
          - fia-rie-low.docker.dev-franceconnect.fr
      exploitation:

  docker-gen:
    user: ${CURRENT_UID}
    image: jwilder/docker-gen
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${VOLUMES_DIR}/nginx-proxy/default-vhost:/etc/nginx/html
      - ${VOLUMES_DIR}/nginx-proxy/etc:/etc/nginx/conf.d
      - ${VOLUMES_DIR}/docker-gen/config:/etc/docker-gen/config:ro
      - ${VOLUMES_DIR}/nginx-proxy/templates:/etc/docker-gen/templates:ro
    networks:
      - public
      - fc
      - exploitation
      - rie
    command: -config /etc/docker-gen/config

  log-hub:
    hostname: log-hub
    image: ${PC_DOCKER_REGISTRY}/nodejs:${NODE_VERSION}-dev
    user: ${CURRENT_UID}
    working_dir: /var/www/app
    volumes:
      - '${PC_ROOT}/federation/docker/log-hub:/var/www/app'
      - '${VOLUMES_DIR}/app:/opt/scripts'
      - '${VOLUMES_DIR}/log:/var/log/app'
      - '${VOLUMES_DIR}/.home:/home'
      - '${VOLUMES_DIR}/ssl:/etc/ssl/docker_host:ro'
    environment:
      - 'DEFAULT_MODE=dev'
    env_file:
      - '${COMPOSE_DIR}/shared/.env/base-app.env'
    ports:
      - 6666:6666
    tty: true
    command: 'node --inspect=0.0.0.0:6666 ./app.js /var/log/app'

  broker:
    build:
      context: '${WORKING_DIR}'
      dockerfile: '${WORKING_DIR}/builds/broker/Dockerfile'
    # Specify hostname to fix cluster name
    hostname: broker
    networks:
      - data
    ports:
      - '5672:5672'
      - '15672:15672'

  ####################
  # Data storage
  ####################

  redis-pwd:
    image: 'bitnami/redis:6.0.15'
    env_file:
      - ${COMPOSE_DIR}/shared/.env/redis.env
    environment:
      - REDIS_TLS_CERT_FILE=/bitnami/redis/data/ssl/redis-pwd.crt
      - REDIS_TLS_KEY_FILE=/bitnami/redis/data/ssl/redis-pwd.key
    volumes:
      - '${VOLUMES_DIR}/ssl:/bitnami/redis/data/ssl'
    healthcheck:
      test: redis-cli -a $${REDIS_PASSWORD} --tls --cacert $${REDIS_TLS_CA_FILE} role | grep master
      interval: 2s
      start_period: 5s
    networks:
      rie:
      data:
        ipv4_address: 172.16.4.105

  redis-cluster-master:
    image: 'bitnami/redis:6.0.15'
    env_file:
      - ${COMPOSE_DIR}/shared/.env/redis.env
    environment:
      - REDIS_REPLICATION_MODE=master
    volumes:
      - '${VOLUMES_DIR}/ssl:/bitnami/redis/data/ssl'
    healthcheck:
      test: redis-cli -a $${REDIS_PASSWORD} --tls --cacert $${REDIS_TLS_CA_FILE} role | grep master
      interval: 2s
      start_period: 5s
    networks:
      data:
        ipv4_address: 172.16.4.100

  redis-cluster-replica:
    image: 'bitnami/redis:6.0.15'
    env_file:
      - ${COMPOSE_DIR}/shared/.env/redis.env
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-cluster-master
      - REDIS_MASTER_PORT_NUMBER=6379
    volumes:
      - '${VOLUMES_DIR}/ssl:/bitnami/redis/data/ssl'
    healthcheck:
      test: redis-cli -a $${REDIS_PASSWORD} --tls --cacert $${REDIS_TLS_CA_FILE} role | grep slave
      interval: 2s
      start_period: 5s
    depends_on:
      - redis-cluster-master
    networks:
      data:
        ipv4_address: 172.16.4.101

  redis-sentinel:
    image: 'bitnami/redis-sentinel:6.0.15'
    scale: 3
    env_file:
      - ${COMPOSE_DIR}/shared/.env/redis.env
    environment:
      - REDIS_SENTINEL_QUORUM=2
      - REDIS_MASTER_SET=fc_core_v2
      - REDIS_MASTER_HOST=redis-cluster-master
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=1000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=2000
      - REDIS_SENTINEL_TLS_ENABLED=true
      - REDIS_SENTINEL_TLS_PORT=26379
      - REDIS_SENTINEL_TLS_CERT_FILE=/bitnami/redis/data/ssl/redis.crt
      - REDIS_SENTINEL_TLS_KEY_FILE=/bitnami/redis/data/ssl/redis.key
      - REDIS_SENTINEL_TLS_CA_FILE=/bitnami/redis/data/ssl/docker-stack-ca.crt
      - REDIS_SENTINEL_TLS_AUTH_CLIENTS=no
    volumes:
      - '${VOLUMES_DIR}/ssl:/bitnami/redis/data/ssl'
    healthcheck:
      test: redis-cli -p 26379 --tls --cacert $${REDIS_SENTINEL_TLS_CA_FILE} ping
      interval: 2s
      start_period: 5s
    depends_on:
      - redis-cluster-master
      - redis-cluster-replica
    networks:
      - data

  postgres:
    image: postgres:13-bullseye
    volumes:
      - '${VOLUMES_DIR}/postgres/init-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/init-multiple-postgresql-databases.sh:ro'
      - '${VOLUMES_DIR}/postgres/start.sh:/usr/bin/start.sh:ro'
      - '${VOLUMES_DIR}/postgres/postgresql.conf:/etc/postgresql/postgresql.conf'
      - '${VOLUMES_DIR}/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf'
      - ${VOLUMES_DIR}/ssl:/etc/ssl/docker_host:ro
    env_file:
      - '${COMPOSE_DIR}/shared/.env/postgres/base.env'
      - '${COMPOSE_DIR}/shared/.env/postgres/databases.env'
    command: ['start.sh']
    ports:
      - '5432:5432'
    networks:
      - data

  ####################
  # Shared Mocks
  ####################

  openldap:
    image: ${PC_DOCKER_REGISTRY}/openldap:0.2
    networks:
      - rie

  maildev:
    hostname: maildev
    image: maildev/maildev:2.0.5
    environment:
      - 'VIRTUAL_HOST=maildev.docker.dev-franceconnect.fr'
      - 'VIRTUAL_PORT=1080'
    networks:
      - data
      - public

####################
# Networks
####################

networks:
  public:
    ipam:
      config:
        - subnet: 172.16.1.0/24
  fc:
    ipam:
      config:
        - subnet: 172.16.2.0/24
  exploitation:
    ipam:
      config:
        - subnet: 172.16.3.0/24
  data:
    ipam:
      config:
        - subnet: 172.16.4.0/24
  rie:
    ipam:
      config:
        - subnet: 172.16.6.0/24
