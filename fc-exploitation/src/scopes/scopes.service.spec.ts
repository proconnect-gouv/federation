import { ObjectID } from 'mongodb';
import { Repository } from 'typeorm';
import { Test, TestingModule } from '@nestjs/testing';
import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';
import { Scopes } from '../scopes/scopes.mongodb.entity';
import { ScopesService } from './scopes.service';
import { IScopes } from './interface';
import { scopesMock, scopesListMock } from './fixture';

const id: ObjectID = new ObjectID('5d9c677da8bb151b00720451');

const scopesRepositoryMock = {
  find: jest.fn(),
  count: jest.fn(),
  findOne: jest.fn(),
  findAndCount: jest.fn(),
  save: jest.fn(),
  update: jest.fn(),
  delete: jest.fn(),
};

describe('ScopesService', () => {
  let service: ScopesService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([Scopes], 'fc-mongo')],
      providers: [ScopesService, Repository],
    })
      .overrideProvider(getRepositoryToken(Scopes, 'fc-mongo'))
      .useValue(scopesRepositoryMock)
      .compile();

    service = module.get<ScopesService>(ScopesService);

    jest.resetAllMocks();

    scopesRepositoryMock.find.mockResolvedValueOnce(scopesListMock);
    scopesRepositoryMock.findOne.mockResolvedValueOnce(scopesMock);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('getAllScopes()', () => {
    it('should exist', () => {
      expect(service.getAllScopes).toBeDefined();
    });

    it('shoud return the array of all scopes', async () => {
      // Action
      const result = await service.getAllScopes();

      // Expected
      expect(result.length).toEqual(3);
    });
  });

  describe('getScopesbyId()', () => {
    it('should exist', () => {
      expect(service.getScopesById).toBeDefined();
    });

    it('shoud return a scope entry for a specific ID', async () => {
      // Action
      const result = await service.getScopesById(id);

      // Expected
      expect(result).toEqual({
        id,
        scope: 'Seldon',
        label: 'Seldon Label',
        fd: 'DGFIP',
      });
    });
  });

  describe('count()', () => {
    it('should exist', () => {
      expect(service.count).toBeDefined();
    });

    it('should return the labels count', async () => {
      // Setup
      const countSpy = jest
        .spyOn(scopesRepositoryMock, 'count')
        .mockResolvedValue(3);

      // Action
      const result = await service.count();

      // Expected
      expect(countSpy).toBeCalledTimes(1);

      expect(result).toEqual(3);
    });
  });

  describe('create()', () => {
    let scopeAndLabel: IScopes;

    beforeEach(() => {
      scopeAndLabel = {
        id,
        scope: 'Seldon',
        label: 'Seldon Label',
        fd: 'DGFIP',
      };
    });

    it('should exist', () => {
      expect(service.create).toBeDefined();
    });

    it('should create a new label', async () => {
      // Setup
      const saveSpy = jest
        .spyOn(scopesRepositoryMock, 'save')
        .mockResolvedValue(scopeAndLabel);

      // Action
      const result: Scopes = await service.create(scopeAndLabel);

      // Expected
      expect(saveSpy).toBeCalledTimes(1);
    });
  });

  describe('update()', () => {
    let scopeAndLabel: IScopes;

    beforeEach(() => {
      scopeAndLabel = {
        id,
        fd: 'DGFIP',
        scope: 'Seldon',
        label: 'Seldon Label (DGFIP)',
      };
    });

    it('should be defined', () => {
      expect(service.update).toBeDefined();
    });

    it('should update the label matching the id param', async () => {
      const saveSpy = jest
        .spyOn(scopesRepositoryMock, 'save')
        .mockResolvedValue(scopesMock);

      // Action
      await service.update(id, scopesMock);

      // Expected
      expect(saveSpy).toBeCalledTimes(1);
      expect(saveSpy).toBeCalledWith({
        id,
        scope: 'Seldon',
        label: 'Seldon Label (DGFIP)',
        fd: 'DGFIP',
      });
    });
  });

  describe('delete()', () => {
    it('should exist', () => {
      expect(service.delete).toBeDefined();
    });

    it('should delete the `scope` matching the id', async () => {
      // Setup
      const deleteSpy = jest
        .spyOn(scopesRepositoryMock, 'delete')
        .mockResolvedValue({});

      // Action
      await service.delete(id);

      // Expected
      expect(deleteSpy).toBeCalledTimes(1);
      expect(deleteSpy).toBeCalledWith(id);
    });
  });
});
