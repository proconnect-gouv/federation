import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ObjectID } from 'mongodb';
import { IMinistryDTO } from './interface/ministry.interface';
import { Ministries } from './ministries.mongodb.entity';
import { MinistryService } from './ministry.service';

describe('MinistryService', () => {
  let ministryService: MinistryService;

  const ministryRepository = {
    find: jest.fn(),
    findOne: jest.fn(),
    update: jest.fn(),
    insert: jest.fn(),
    delete: jest.fn(),
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([Ministries], 'fc-mongo')],
      providers: [MinistryService, Repository],
    })
      .overrideProvider(getRepositoryToken(Ministries, 'fc-mongo'))
      .useValue(ministryRepository)
      .compile();

    ministryService = await module.get<MinistryService>(MinistryService);

    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(ministryService).toBeDefined();
  });

  it('should return an existing ministry', async () => {
    const ministry = {
      id: new ObjectID('5ff6d63de1326615c30da492'),
      name: 'Test ministry',
      acronym: 'TM',
      identityProviders: [
        {
          uid: '5ff381802e09a9ac9dcbfb79',
          name: 'fip1',
        },
      ],
    };

    ministryRepository.findOne.mockResolvedValueOnce(ministry);

    const ministryReturn = await ministryService.find(
      '5ff6d63de1326615c30da492',
    );

    expect(ministryRepository.findOne).toHaveBeenCalledTimes(1);
    expect(ministryReturn).toBe(ministry);
  });

  it('should find all ministries', async () => {
    const ministries = [
      {
        id: new ObjectID('5ff6d63de1326615c30da492'),
        name: 'Test ministry',
        acronym: 'TM',
        identityProviders: [
          {
            uid: '5ff381802e09a9ac9dcbfb79',
            name: 'fip1',
          },
        ],
      },
      {
        id: new ObjectID('5ff6d63de1326615c30da493'),
        name: 'Test ministry 2',
        acronym: 'TM2',
        identityProviders: [
          {
            uid: '5ff381802e09a9ac9dcbfb7b',
            name: 'fip2',
          },
        ],
      },
    ];

    ministryRepository.find.mockResolvedValueOnce(ministries);

    const ministriesReturn = await ministryService.findAll();

    expect(ministryRepository.find).toHaveBeenCalledTimes(1);
    expect(ministriesReturn).toBe(ministries);
  });

  it('should create a new ministry', async () => {
    const ministry: IMinistryDTO = {
      name: 'Test ministry',
      acronym: 'TM',
      identityProviders: ['fip1'],
      sort: 1,
    };

    ministryRepository.insert.mockResolvedValueOnce(ministry);
    await ministryService.update(ministry);

    expect(ministryRepository.insert).toHaveBeenCalledTimes(1);
  });

  it('should update a ministry', async () => {
    const ministry: IMinistryDTO = {
      name: 'Test update ministry',
      acronym: 'TUM',
      identityProviders: ['fip1'],
      sort: 1,
    };

    ministryRepository.update.mockResolvedValueOnce({ generatedMaps: [] });
    await ministryService.update(ministry, '5ff82c4dba9b1db9836c0c62');

    expect(ministryRepository.update).toHaveBeenCalledTimes(1);
  });

  it('should delete a ministry', async () => {
    ministryRepository.delete.mockResolvedValueOnce({});
    await ministryService.delete('5ff82c4dba9b1db9836c0c62');

    expect(ministryRepository.delete).toHaveBeenCalledTimes(1);
  });
});
