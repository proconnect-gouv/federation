import { DeleteResult } from 'typeorm';
import { Repository } from 'mongodb';

import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';

import { LoggerService } from '@fc/shared/logger/logger.service';

import { ICrudTrack } from '../interfaces';

import { Ministries } from './ministries.mongodb.entity';
import { IMinistryDTO } from './interface/ministry.interface';

@Injectable()
export class MinistryService {
  constructor(
    @InjectRepository(Ministries, 'fc-mongo')
    private readonly ministryRepository: Repository<Ministries>,
    private readonly logger: LoggerService,
  ) {}

  private track(log: ICrudTrack) {
    this.logger.businessEvent(log);
  }

  async find(id: string): Promise<Ministries> {
    const ministry = await this.ministryRepository.findOne(id);

    if (!ministry) {
      throw new NotFoundException();
    }

    return ministry;
  }

  async findAll(): Promise<Ministries[]> {
    const ministries = await this.ministryRepository.find();

    if (!ministries) {
      throw new NotFoundException();
    }

    return ministries.sort((a, b) => (a.name > b.name ? 1 : -1));
  }

  async update(
    ministry: IMinistryDTO,
    user: string,
    id?: string,
  ): Promise<string> {
    let logId = id;

    if (id) {
      await this.ministryRepository.update(id, ministry);
    } else {
      const result = await this.ministryRepository.insertOne(ministry);
      logId = result.insertedId;
    }

    this.track({
      entity: 'ministry',
      action: id ? 'update' : 'create',
      user,
      id: logId,
      name: ministry.acronym,
    });

    return id;
  }

  async delete(id: string, user: string): Promise<DeleteResult> {
    const ministry = await this.ministryRepository.findOne(id);

    if (!ministry) {
      throw new NotFoundException();
    }

    await this.ministryRepository.delete(id);

    this.track({
      entity: 'ministry',
      action: 'delete',
      user,
      id,
      name: ministry.acronym,
    });

    return ministry;
  }
}
