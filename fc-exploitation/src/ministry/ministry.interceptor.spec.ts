import { MinistryInterceptor } from './ministry.interceptor';

describe('MinistryInterceptor', () => {
  const ministryInterceptor = new MinistryInterceptor();

  const request = {
    body: {},
    csrfToken: jest.fn(),
    flash: jest.fn(),
  };
  const response = {
    redirect: jest.fn(),
  };

  const executionContext = {
    switchToHttp: jest.fn(),
    switchToRpc: jest.fn(),
    switchToWs: jest.fn(),
    getClass: jest.fn(),
    getArgs: jest.fn(),
    getArgByIndex: jest.fn(),
    getHandler: jest.fn(),
    getType: jest.fn(),
  };

  const callHandler = {
    handle: jest.fn(),
  };

  beforeEach(() => {
    jest.resetAllMocks();

    request.csrfToken.mockReturnValue('ThIs_Is_A_cSrF_tOkEn');

    executionContext.switchToHttp.mockReturnValue({
      getRequest: jest.fn().mockReturnValue(request),
      getResponse: jest.fn().mockReturnValue(response),
    });
  });

  it('should be defined', () => {
    expect(ministryInterceptor).toBeDefined();
  });

  it('should return an undefined id and an empty array of identity providers', async () => {
    request.body = { notIdentityProviders: '6017ecc4662a411e8cc65341;fip1' };
    await ministryInterceptor.intercept(executionContext, callHandler);

    expect(executionContext.switchToHttp().getRequest().body).toEqual({
      id: undefined,
      identityProviders: [],
      notIdentityProviders: '6017ecc4662a411e8cc65341;fip1',
    });
    expect(callHandler.handle).toBeCalledTimes(1);
  });

  describe('should return a defined id and an array with', () => {
    it('with only one identity provider', async () => {
      request.body = { acronym: 'TEST', identityProviders: 'fip1' };
      await ministryInterceptor.intercept(executionContext, callHandler);

      expect(executionContext.switchToHttp().getRequest().body).toEqual({
        acronym: 'TEST',
        id: 'TEST',
        identityProviders: ['fip1'],
      });
      expect(callHandler.handle).toBeCalledTimes(1);
    });

    it('with multiple identity provider', async () => {
      request.body = {
        acronym: 'TEST',
        identityProviders: ['fip1', 'fip2', 'fip3'],
      };

      await ministryInterceptor.intercept(executionContext, callHandler);

      expect(executionContext.switchToHttp().getRequest().body).toEqual({
        acronym: 'TEST',
        id: 'TEST',
        identityProviders: ['fip1', 'fip2', 'fip3'],
      });
      expect(callHandler.handle).toBeCalledTimes(1);
    });
  });
});
