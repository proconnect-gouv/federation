import { Repository } from 'typeorm';
import {
  Controller,
  Get,
  Render,
  UseInterceptors,
  Delete,
  Param,
  Req,
  Res,
  Body,
  Post,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { UserRole } from '@fc/shared/user/roles.enum';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { MinistryService } from './ministry.service';
import { IdentityProvider } from '../identity-provider/identity-provider.mongodb.entity';
import { Ministries } from './ministries.mongodb.entity';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { MinistryInterceptor } from './ministry.interceptor';

@Controller('ministry')
export class MinistryController {
  constructor(
    private readonly ministryService: MinistryService,
    @InjectRepository(IdentityProvider, 'fc-mongo')
    private readonly identityProviderRepository: Repository<IdentityProvider>,
  ) {}

  @Get()
  @Roles(UserRole.OPERATOR)
  @Render('ministry/list')
  async list(@Req() req) {
    const ministries = await this.ministryService.findAll();
    const csrfToken = req.csrfToken();

    return {
      ministries,
      csrfToken,
    };
  }

  @Get('create')
  @Roles(UserRole.OPERATOR)
  @Render('ministry/form')
  async create(@Req() req) {
    const csrfToken = req.csrfToken();
    const identityProviders = await this.identityProviderRepository.find();

    return {
      identityProviders,
      csrfToken,
    };
  }

  @Post()
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(
    new MinistryInterceptor(),
    new FormErrorsInterceptor('/ministry/create'),
  )
  @UsePipes(new ValidationPipe({ transform: true }))
  async ministryCreate(@Body() ministry: Ministries, @Req() req, @Res() res) {
    try {
      await this.ministryService.update(ministry, req.user.username);
    } catch (e) {
      req.flash('globalError', e.message);
      return res.status(500);
    }

    req.flash('success', `Le ministère "${ministry.name}" a bien été créé !`);

    return res.redirect(`${res.locals.APP_ROOT}/ministry`);
  }

  @Get(':id')
  @Roles(UserRole.OPERATOR)
  @Render('ministry/form')
  async update(@Param('id') id, @Req() req) {
    const csrfToken = req.csrfToken();
    const ministry = await this.ministryService.find(id);
    const identityProviders = await this.identityProviderRepository.find();

    return {
      ministry,
      identityProviders,
      csrfToken,
    };
  }

  @Post(':id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(
    new MinistryInterceptor(),
    new FormErrorsInterceptor('/ministry/:id'),
  )
  @UsePipes(new ValidationPipe({ transform: true }))
  async ministryUpdate(
    @Param('id') id: string,
    @Body() ministry: Ministries,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.ministryService.update(ministry, req.user.username, id);
    } catch (e) {
      req.flash('globalError', e.message);
      return res.status(500);
    }

    req.flash(
      'success',
      `Le ministère "${ministry.name}" a bien été mis à jour !`,
    );

    return res.redirect(`${res.locals.APP_ROOT}/ministry`);
  }

  @Delete(':id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor('/ministry'))
  async delete(
    @Param('id') id: string,
    @Body() ministry,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.ministryService.delete(id, req.user.username);
    } catch (e) {
      req.flash('globalError', e.message);
      return res.status(500).redirect(`${res.locals.APP_ROOT}/ministry`);
    }

    req.flash(
      'success',
      `Le ministère "${ministry.name}" a été supprimé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/ministry`);
  }
}
