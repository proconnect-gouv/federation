import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { IdentityProvider } from '../identity-provider/identity-provider.mongodb.entity';
import { MinistryController } from './ministry.controller';
import { Ministries } from './ministries.mongodb.entity';
import { MinistryService } from './ministry.service';
import { ObjectID } from 'mongodb';
import { DeleteResult, UpdateResult } from 'typeorm';

describe('Ministry Controller', () => {
  let ministryController: MinistryController;
  let ministryService: MinistryService;

  const ministryRepositoryMock = {
    find: jest.fn(),
    findOne: jest.fn(),
    update: jest.fn(),
    insert: jest.fn(),
    delete: jest.fn(),
  };

  const identityProviderRepositoryMock = {
    find: jest.fn(),
  };

  const ministryServiceMock = {
    find: jest.fn(),
    findAll: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
  };

  const ministryDTO = {
    name: 'Test ministry',
    acronym: 'TM',
    identityProviders: ['fip1'],
    sort: 1,
  };

  const identityProviderDTO: IdentityProvider = {
    id: new ObjectID('648c1742c74d6a3d84b31943'),
    name: 'MonFI',
    uid: 'MonFI',
    url: 'https://issuer.fr',
    hoverMsg: 'Disponible prochainement',
    hoverRedirectLink: '',
    display: false,
    title: 'Mon FI mieux écrit',
    image: '',
    alt: '',
    imageFocus: '',
    eidas: 1,
    mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
    statusURL: '',
    authzURL: 'https://issuer.fr/auth',
    tokenURL: 'https://issuer.fr/token',
    userInfoURL: 'https://issuer.fr/userinfo',
    endSessionURL: '',
    discoveryUrl: '',
    discovery: true,
    clientID: '09a1a257648c1742c74d6a3d84b31943',
    client_secret: '**********',
    order: 0,
    jwksURL: '',
    jwtAlgorithm: [],
    trustedIdentity: false,
    specificText:
      'Une erreur est survenue lors de la transmission de votre identité.',
    active: false,
    createdAt: new Date('1970-01-01T00:00:00.000Z'),
    updatedAt: new Date('1970-01-01T00:00:00.000Z'),
    updatedBy: 'user',
    blacklistByIdentityProviderActivated: false,
    WhitelistByServiceProviderActivated: false,
  };

  const req = {
    flash: jest.fn(),
    csrfToken: function csrfToken() {
      return 'mygreatcsrftoken';
    },
    session: {
      flash: {},
    },
    user: {
      username: 'jean_moust',
    },
    body: ministryDTO,
  };

  const res = {
    redirect: jest.fn(),
    status: jest.fn(),
    locals: {
      APP_ROOT: '/foo/bar',
    },
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [MinistryController],
      imports: [TypeOrmModule.forFeature([IdentityProvider], 'fc-mongo')],
      providers: [MinistryService],
    })
      .overrideProvider(getRepositoryToken(Ministries, 'fc-mongo'))
      .useValue(ministryRepositoryMock)
      .overrideProvider(MinistryService)
      .useValue(ministryServiceMock)
      .overrideProvider(getRepositoryToken(IdentityProvider, 'fc-mongo'))
      .useValue(identityProviderRepositoryMock)
      .compile();

    ministryController = module.get<MinistryController>(MinistryController);

    ministryService = await module.get<MinistryService>(MinistryService);

    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(ministryController).toBeDefined();
  });

  it('should return ministries list', async () => {
    const ministries = [
      {
        _id: new ObjectID('5ff6d63de1326615c30da492'),
        name: 'Test ministry',
        id: 'TM',
        acronym: 'TM',
        identityProviders: ['fip1'],
        sort: 1,
      },
      {
        _id: new ObjectID('5ff6d63de1326615c30da493'),
        name: 'Test ministry 2',
        id: 'TM2',
        acronym: 'TM2',
        identityProviders: ['fip2'],
        sort: 2,
      },
    ];

    const spy = jest
      .spyOn(ministryService, 'findAll')
      .mockImplementation(() => Promise.resolve(ministries));

    const rs = await ministryController.list(req);

    expect(spy).toHaveBeenCalled();
    expect(rs.ministries.length).toEqual(2);
  });

  it('should create a ministry', async () => {
    const ministry = {
      _id: new ObjectID('5ff6d63de1326615c30da492'),
      name: 'Test ministry',
      id: 'TM',
      acronym: 'TM',
      identityProviders: ['fip1'],
      sort: 1,
    };

    const updateResult: UpdateResult = { raw: '', generatedMaps: [] };

    const spy = jest
      .spyOn(ministryService, 'update')
      .mockImplementation(() => Promise.resolve(updateResult));

    await ministryController.ministryCreate(ministry, req, res);

    expect(spy).toHaveBeenCalled();
    expect(res.redirect).toHaveBeenCalledTimes(1);
    expect(res.redirect).toHaveBeenCalledWith(
      `${res.locals.APP_ROOT}/ministry`,
    );
  });

  it('should display a form for ministry modification', async () => {
    const ministry = {
      _id: new ObjectID('5ff6d63de1326615c30da492'),
      name: 'Test ministry',
      id: 'TM',
      acronym: 'TM',
      identityProviders: ['fip1'],
      sort: 1,
    };

    const spy = jest
      .spyOn(ministryService, 'find')
      .mockImplementation(() => Promise.resolve(ministry));
    identityProviderRepositoryMock.find.mockResolvedValueOnce([
      identityProviderDTO,
    ]);

    await ministryController.update('5ff82c4dba9b1db9836c0c62', req);

    expect(spy).toHaveBeenCalled();
    expect(identityProviderRepositoryMock.find).toHaveBeenCalledTimes(1);
  });

  it('should update a ministry', async () => {
    const ministry = {
      _id: new ObjectID('5ff6d63de1326615c30da492'),
      name: 'Test ministry',
      id: 'TM',
      acronym: 'TM',
      identityProviders: ['fip1'],
      sort: 1,
    };

    const updateResult: UpdateResult = { raw: '', generatedMaps: [] };

    const spy = jest
      .spyOn(ministryService, 'update')
      .mockImplementation(() => Promise.resolve(updateResult));

    await ministryController.ministryUpdate(
      '5ff6d63de1326615c30da492',
      ministry,
      req,
      res,
    );

    expect(spy).toHaveBeenCalled();
    expect(res.redirect).toHaveBeenCalledTimes(1);
    expect(res.redirect).toHaveBeenCalledWith(
      `${res.locals.APP_ROOT}/ministry`,
    );
  });

  it('should delete a ministry', async () => {
    const ministry = {
      id: new ObjectID('5ff6d63de1326615c30da492'),
      name: 'Test update ministry',
      acronym: 'TUM',
      identityProviders: [
        {
          uid: '5ff381802e09a9ac9dcbfb79',
          name: 'fip1',
        },
      ],
    };

    const deleteResult: DeleteResult = { raw: '' };

    const spy = jest
      .spyOn(ministryService, 'delete')
      .mockImplementation(() => Promise.resolve(deleteResult));

    await ministryController.delete(
      '5ff6d63de1326615c30da492',
      ministry,
      req,
      res,
    );

    expect(spy).toHaveBeenCalled();
    expect(res.redirect).toHaveBeenCalledTimes(1);
    expect(res.redirect).toHaveBeenCalledWith(
      `${res.locals.APP_ROOT}/ministry`,
    );
  });
});
