import {MiddlewareConsumer, Module, NestModule,} from '@nestjs/common';
import {AppController} from './app.controller';
import {TypeOrmModule} from '@nestjs/typeorm';
import {resolve} from 'path';
import {ConfigModule, ConfigService} from 'nestjs-config';
import {AuthenticationModule} from 'shared/authentication/authentication.module';
import {AuthenticatedMiddleware} from 'shared/authentication/middleware/authenticated.middleware';
import {IdentityProviderModule} from "./identity-provider/identity-provider.module";
import {MetaModule} from "shared/meta/meta.module";
import {LocalsInterceptor} from "./meta/locals.interceptor";
import {IdentityProviderController} from "./identity-provider/identity-provider.controller";
import {ServiceProviderModule} from "./service-provider/service-provider.module";

@Module({
  imports: [
    AuthenticationModule,
    IdentityProviderModule,
    ServiceProviderModule,
    MetaModule,
    ConfigModule.load(resolve(__dirname, 'config', '**/!(*.d).{ts,js}')),
    TypeOrmModule.forRootAsync({
      useFactory: (config: ConfigService) => config.get('database'),
      inject: [ConfigService],
    }),
    TypeOrmModule.forRootAsync({
      useFactory: (config: ConfigService) => config.get('mongo-database'),
      inject: [ConfigService],
      name: 'fc-mongo',
    }),
  ],
  providers: [
      LocalsInterceptor,
  ],
  controllers: [AppController],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer): MiddlewareConsumer | void {
    consumer
      .apply(AuthenticatedMiddleware)
      .forRoutes(AppController, IdentityProviderController);
  }
}
