import { IsNumber, IsString, IsBoolean, Matches } from 'class-validator';
import { Transform, Type } from 'class-transformer';
import { IsOptionalExtended } from '@fc/shared/validators/is-optional-extended.validator';
import { IsValidInputString } from '@fc/shared/validators/is-valid-input-string';
import {
  toBoolean,
  linesToArray,
} from '@fc/shared/transforms/string.transform';

// tslint:disable-next-line:max-line-length
const URL_REGEX = /^((https?:\/\/)?((([^\s\/$.?#]{1,})(\.[^\s\/$?#]{2,})*\.[a-z]{2,})|(([0-9]{1,3}\.){3}[0-9]{1,3})|localhost)(:[0-9]{2,5})?(\/[^\s\/$]+)*\/?)$/;
const EMAIL_REGEX = /^([a-zA-Z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,10})$/;
const IMG_REGEX = /\.(png|svg|jpg|gif)$/;

export class IdentityProviderDTO {
  @IsValidInputString({
    message: `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
  })
  readonly name: string;

  @IsValidInputString({
    message: `Veuillez mettre un titre valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
  })
  readonly title: string;

  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-issuer-url.com/ )',
  })
  readonly issuer: string;

  @IsOptionalExtended()
  @Matches(URL_REGEX, {
    message: 'Veuillez mettre une url valide ( Ex: https://my-jwks-url.com/ )',
  })
  readonly jwksUrl: string;

  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-authorization-url.com/ )',
  })
  readonly authorizationUrl: string;

  @Matches(URL_REGEX, {
    message: 'Veuillez mettre une url valide ( Ex: https://my-token-url.com/ )',
  })
  readonly tokenUrl: string;

  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-user-info-url.com/ )',
  })
  readonly userInfoUrl: string;

  @IsOptionalExtended()
  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-user-logout.com/ )',
  })
  readonly logoutUrl: string;

  @IsOptionalExtended()
  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-status-url.com/ )',
  })
  readonly statusUrl: string;

  @IsOptionalExtended()
  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-discovery-url.com/ )',
  })
  readonly discoveryUrl: string;

  @Transform(toBoolean)
  @IsBoolean()
  readonly discovery: boolean;

  @IsString()
  readonly clientId: string;

  @IsString()
  readonly clientSecret: string;

  @IsOptionalExtended()
  @IsString()
  readonly messageToDisplayWhenInactive: string;

  @IsOptionalExtended()
  @Matches(URL_REGEX, {
    message:
      'Veuillez mettre une url valide ( Ex: https://my-redirect-url.com/ )',
  })
  readonly redirectionTargetWhenInactive: string;

  @IsOptionalExtended()
  @IsString()
  readonly alt: string;

  @IsOptionalExtended()
  @Matches(IMG_REGEX, {
    message:
      "Veuillez saisir un nom d'image valide finissant par .svg, .jpg, .gif, .png",
  })
  readonly image: string;

  @IsOptionalExtended()
  @Matches(IMG_REGEX, {
    message:
      "Veuillez saisir un nom d'image valide finissant par .svg, .jpg, .gif, .png",
  })
  @IsString()
  readonly imageFocus: string;

  @Transform(toBoolean)
  @IsBoolean()
  readonly trustedIdentity: boolean;

  @Transform(toBoolean)
  @IsBoolean()
  readonly active: boolean;

  @Transform(toBoolean)
  @IsBoolean()
  readonly display: boolean;

  @IsOptionalExtended()
  @IsNumber()
  @Type(() => Number)
  readonly eidas: number;

  @IsOptionalExtended()
  @IsNumber()
  @Type(() => Number)
  readonly order: number;

  @Transform(linesToArray)
  @Matches(EMAIL_REGEX, {
    each: true,
    message: 'Veuillez mettre des emails valides ( Ex: email@email.com )',
  })
  readonly emails: string[];

  @IsOptionalExtended()
  @IsString()
  readonly specificText: string;
}
