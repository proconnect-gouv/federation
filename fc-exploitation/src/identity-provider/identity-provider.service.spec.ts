import { Repository } from 'typeorm';
import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { ObjectID } from 'mongodb';
import { ConfigService } from 'nestjs-config';
import { IdentityProviderDTO } from './dto/identity-provider.dto';
import { IIdentityProviderLegacy } from './interface/identity-provider-legacy.interface';
import { IdentityProviderService } from './identity-provider.service';
import { IdentityProvider } from './identity-provider.mongodb.entity';
import { SecretManagerService } from '../utils/secret-manager.service';
import * as MockDate from 'mockdate';
import { getModelToken } from '@nestjs/mongoose';
import { ProviderSchema } from './schema/provider.schema';

describe('IdentityProviderService', () => {
  let module: TestingModule;
  let identityProviderService: IdentityProviderService;

  const identityProviderRepository = {
    save: jest.fn(),
    find: jest.fn(),
    findAndCount: jest.fn(),
    findOne: jest.fn(),
    delete: jest.fn(),
  };

  const secretManagerMocked = {
    encrypt: jest.fn(),
    generateSHA256: jest.fn(),
  };

  const encryptedSecret = '**********';
  const objectId = '648c1742c74d6a3d84b31943';

  const configServiceMock = {
    get: jest.fn(),
  };

  beforeEach(async () => {
    module = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([IdentityProvider], 'fc-mongo')],
      providers: [
        IdentityProviderService,
        {
          provide: getModelToken('Provider'),
          useValue: ProviderSchema,
        },
        Repository,
        SecretManagerService,
        ConfigService,
      ],
    })
      .overrideProvider(getRepositoryToken(IdentityProvider, 'fc-mongo'))
      .useValue(identityProviderRepository)
      .overrideProvider(SecretManagerService)
      .useValue(secretManagerMocked)
      .overrideProvider(ConfigService)
      .useValue(configServiceMock)
      .compile();

    identityProviderService = await module.get<IdentityProviderService>(
      IdentityProviderService,
    );

    jest.resetAllMocks();

    MockDate.set('1970-01-01');
    secretManagerMocked.encrypt.mockResolvedValueOnce(encryptedSecret);
  });

  afterAll(async () => {
    MockDate.reset();
    module.close();
  });

  describe('create', () => {
    it('creates the identity provider with all informations filled', async () => {
      const IIdentityProvider: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: 'https://issuer.fr/logout',
        statusUrl: 'https://issuer.fr/state',
        jwksUrl: 'https://issuer.fr/discovery',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: 'SUPER MESSAGE !!!',
        redirectionTargetWhenInactive: 'https://issuer.fr/promo',
        active: false,
        display: false,
        alt: 'MonFI Image',
        image: 'AliceM.svg',
        imageFocus: 'AliceM.svg',
        trustedIdentity: false,
        eidas: 2,
        order: 1,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText:
          "Veuillez fournir une capture d'écran de votre page de profil !",
      };
      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });
      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('creates the identity provider with all informations filled for the FCA version', async () => {
      const IIdentityProvider: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: 'https://issuer.fr/logout',
        statusUrl: 'https://issuer.fr/state',
        jwksUrl: 'https://issuer.fr/discovery',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: 'SUPER MESSAGE !!!',
        redirectionTargetWhenInactive: 'https://issuer.fr/promo',
        active: false,
        display: false,
        alt: 'MonFI Image',
        image: 'AliceM.svg',
        imageFocus: 'AliceM.svg',
        trustedIdentity: false,
        eidas: 2,
        order: 1,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText:
          "Veuillez fournir une capture d'écran de votre page de profil !",
      };
      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCA' });
      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('creates the identity provider with only mandatory informations filled', async () => {
      const IIdentityProvider: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: false,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };
      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });
      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('saves the identity provider with all information filled', async () => {
      const IIdentityProvider: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: 'https://issuer.fr/logout',
        statusUrl: 'https://issuer.fr/statusUrl',
        jwksUrl: 'https://issuer.fr/jwksUrl',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: 'inactive',
        redirectionTargetWhenInactive: 'https://redirect-inactive',
        active: false,
        display: false,
        alt: 'alt',
        image: 'image.png',
        imageFocus: 'image.svg',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: 'specific text',
      };

      const expected: IIdentityProviderLegacy = {
        uid: 'MonFI',
        url: 'https://issuer.fr',
        userInfoURL: 'https://issuer.fr/userinfo',
        active: false,
        alt: 'alt',
        authzURL: 'https://issuer.fr/auth',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: true,
        display: false,
        eidas: 1,
        endSessionURL: 'https://issuer.fr/logout',
        hoverMsg: 'inactive',
        hoverRedirectLink: 'https://redirect-inactive',
        image: 'image.png',
        imageFocus: 'image.svg',
        jwksURL: 'https://issuer.fr/jwksUrl',
        jwtAlgorithm: [],
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        name: 'MonFI',
        order: 0,
        specificText: 'specific text',
        statusURL: 'https://issuer.fr/statusUrl',
        title: 'Mon FI mieux écrit',
        tokenURL: 'https://issuer.fr/token',
        trustedIdentity: false,
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };
      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });
      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('convert the identity provider input to legacy format and add the defaults values before saving', async () => {
      const IIdentityProvider: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: false,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IIdentityProviderLegacy = {
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: true,
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: false,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };
      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });
      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('set to "false" the "active" and "display" fields before saving', async () => {
      const IIdentityProvider: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: true,
        display: true,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IIdentityProviderLegacy = {
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: true,
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: false,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });
      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });
  });

  describe('update', () => {
    beforeEach(() => {
      const identityProvider: IdentityProvider = {
        id: new ObjectID(objectId),
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: true,
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: false,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };
      identityProviderRepository.findOne.mockResolvedValueOnce(
        identityProvider,
      );
    });

    it('updates the identity provider with all informations filled', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: 'https://issuer.fr/logout',
        statusUrl: 'https://issuer.fr/state',
        jwksUrl: 'https://issuer.fr/discovery',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: 'SUPER MESSAGE !!!',
        redirectionTargetWhenInactive: 'https://issuer.fr/promo',
        active: false,
        display: false,
        alt: 'MonFI Image',
        image: 'AliceM.svg',
        imageFocus: 'AliceM.svg',
        trustedIdentity: false,
        eidas: 2,
        order: 1,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText:
          "Veuillez fournir une capture d'écran de votre page de profil !",
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(objectId, updateForm, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('updates the identity provider with all informations filled for FCA version', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: 'https://issuer.fr/logout',
        statusUrl: 'https://issuer.fr/state',
        jwksUrl: 'https://issuer.fr/discovery',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: 'SUPER MESSAGE !!!',
        redirectionTargetWhenInactive: 'https://issuer.fr/promo',
        active: false,
        display: false,
        alt: 'MonFI Image',
        image: 'AliceM.svg',
        imageFocus: 'AliceM.svg',
        trustedIdentity: false,
        eidas: 2,
        order: 1,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText:
          "Veuillez fournir une capture d'écran de votre page de profil !",
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCA' });

      await identityProviderService.update(objectId, updateForm, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('updates the identity provider with only mandatory informations filled', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://issuer.fr',
        authorizationUrl: 'https://issuer.fr/auth',
        tokenUrl: 'https://issuer.fr/token',
        userInfoUrl: 'https://issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: false,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(objectId, updateForm, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('updates the identity provider if some fields are updated', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://new-issuer.fr',
        authorizationUrl: 'https://new-issuer.fr/auth',
        tokenUrl: 'https://new-issuer.fr/token',
        userInfoUrl: 'https://new-issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: true,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IdentityProvider = {
        id: new ObjectID(objectId),
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://new-issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://new-issuer.fr/auth',
        tokenURL: 'https://new-issuer.fr/token',
        userInfoURL: 'https://new-issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: true,
        clientID: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: true,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(objectId, updateForm, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('should not update the identity provider technical name', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFIButChanged',
        name: 'MonFIButChanged',
        title: 'Mon FI mieux écrit',
        issuer: 'https://new-issuer.fr',
        authorizationUrl: 'https://new-issuer.fr/auth',
        tokenUrl: 'https://new-issuer.fr/token',
        userInfoUrl: 'https://new-issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: true,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IdentityProvider = {
        id: new ObjectID(objectId),
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://new-issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://new-issuer.fr/auth',
        tokenURL: 'https://new-issuer.fr/token',
        userInfoURL: 'https://new-issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: true,
        clientID: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: true,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(objectId, updateForm, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('saves who updated the identity provider', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://new-issuer.fr',
        authorizationUrl: 'https://new-issuer.fr/auth',
        tokenUrl: 'https://new-issuer.fr/token',
        userInfoUrl: 'https://new-issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: true,
        clientId: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: true,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IdentityProvider = {
        id: new ObjectID(objectId),
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://new-issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://new-issuer.fr/auth',
        tokenURL: 'https://new-issuer.fr/token',
        userInfoURL: 'https://new-issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: true,
        clientID: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: true,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'NoobMaster69',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(
        objectId,
        updateForm,
        'NoobMaster69',
      );

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('saves the updated identity provider if discoveryurl is empty and discovery is false', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://new-issuer.fr',
        authorizationUrl: 'https://new-issuer.fr/auth',
        tokenUrl: 'https://new-issuer.fr/token',
        userInfoUrl: 'https://new-issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl: '',
        discovery: false,
        clientId: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: true,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IdentityProvider = {
        id: new ObjectID(objectId),
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://new-issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://new-issuer.fr/auth',
        tokenURL: 'https://new-issuer.fr/token',
        userInfoURL: 'https://new-issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl: '',
        discovery: false,
        clientID: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: true,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'NoobMaster69',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(
        objectId,
        updateForm,
        'NoobMaster69',
      );

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('saves the updated identity provider if discoveryurl is filled and discovery is false', async () => {
      const updateForm: IdentityProviderDTO = {
        uid: 'MonFI',
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        issuer: 'https://new-issuer.fr',
        authorizationUrl: 'https://new-issuer.fr/auth',
        tokenUrl: 'https://new-issuer.fr/token',
        userInfoUrl: 'https://new-issuer.fr/userinfo',
        logoutUrl: '',
        statusUrl: '',
        jwksUrl: '',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: false,
        clientId: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '1234567890AZERTYUIOP',
        messageToDisplayWhenInactive: '',
        redirectionTargetWhenInactive: '',
        active: true,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        emails: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IdentityProvider = {
        id: new ObjectID(objectId),
        uid: 'MonFI',
        name: 'MonFI',
        url: 'https://new-issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://new-issuer.fr/auth',
        tokenURL: 'https://new-issuer.fr/token',
        userInfoURL: 'https://new-issuer.fr/userinfo',
        endSessionURL: '',
        discoveryUrl:
          'https://my-discovery-url/.well-known/openid-configuration',
        discovery: false,
        clientID: 'new-09a1a257648c1742c74d6a3d84b31943',
        client_secret: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: true,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'NoobMaster69',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      configServiceMock.get.mockResolvedValue({ instanceFor: 'FCP' });

      await identityProviderService.update(
        objectId,
        updateForm,
        'NoobMaster69',
      );

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });
  });

  describe('delete identity provider by id', () => {
    it('calls the delete function of the identityProviderRepository with a string as argument', async () => {
      // set up
      const id = { id: '123' };
      const expectedRepositoryDeleteArguments = { id: '123' };
      // action
      await identityProviderService.deleteIdentityProvider(id);
      // assertion
      expect(identityProviderRepository.delete).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.delete).toHaveBeenCalledWith(
        expectedRepositoryDeleteArguments,
      );
    });
  });
});
