import { Repository } from 'typeorm';
import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { CreateIdentityProviderDTO } from './dto/identity-provider.dto';
import { IIdentityProviderLegacy } from './interface/identity-provider-legacy.interface';
import { IdentityProviderService } from './identity-provider.service';
import { IdentityProvider } from './identity-provider.entity';
import { SecretManagerService } from '../common/secret-manager.service';
import * as MockDate from 'mockdate';

describe('IdentityProviderService', () => {
  let module: TestingModule;
  let identityProviderService: IdentityProviderService;

  const identityProviderRepository = {
    save: jest.fn(),
    findAndCount: jest.fn(),
    findOne: jest.fn(),
    delete: jest.fn(),
  };

  const secretManagerMocked = {
    encrypt: jest.fn(),
    generateSHA256: jest.fn(),
  };

  const encryptedSecret = '**********';

  beforeEach(async () => {
    module = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([IdentityProvider], 'fc-mongo')],
      providers: [IdentityProviderService, Repository, SecretManagerService],
    })
      .overrideProvider(getRepositoryToken(IdentityProvider, 'fc-mongo'))
      .useValue(identityProviderRepository)
      .overrideProvider(SecretManagerService)
      .useValue(secretManagerMocked)
      .compile();

    identityProviderService = await module.get<IdentityProviderService>(
      IdentityProviderService,
    );

    jest.resetAllMocks();

    MockDate.set('1970-01-01');
    secretManagerMocked.encrypt.mockResolvedValueOnce(encryptedSecret);
  });

  afterAll(async () => {
    MockDate.reset();
    module.close();
  });

  describe('createUser', () => {
    it('creates the user with all informations filled', async () => {
      const IIdentityProvider: CreateIdentityProviderDTO = {
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        url: 'https://issuer.fr',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/token',
        statusURL: 'https://issuer.fr/state',
        jwksURL: 'https://issuer.fr/discovery',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        clientSecret: '1234567890AZERTYUIOP',
        hoverMsg: 'SUPER MESSAGE !!!',
        hoverRedirectLink: 'https://issuer.fr/promo',
        active: false,
        display: false,
        alt: 'MonFI Image',
        image: 'AliceM.svg',
        imageFocus: 'AliceM.svg',
        trustedIdentity: false,
        eidas: 2,
        order: 1,
        mailto: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText:
          "Veuillez fournir une capture d'écran de votre page de profil !",
      };

      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('creates the user with only mandatory informations filled', async () => {
      const IIdentityProvider: CreateIdentityProviderDTO = {
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        url: 'https://issuer.fr',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/token',
        statusURL: '',
        jwksURL: '',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        clientSecret: '1234567890AZERTYUIOP',
        hoverMsg: '',
        hoverRedirectLink: '',
        active: false,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        mailto: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('convert the user input to legacy format and add the defaults values before saving', async () => {
      const IIdentityProvider: CreateIdentityProviderDTO = {
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        url: 'https://issuer.fr',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/token',
        statusURL: '',
        jwksURL: '',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        clientSecret: '1234567890AZERTYUIOP',
        hoverMsg: '',
        hoverRedirectLink: '',
        active: false,
        display: false,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        mailto: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IIdentityProviderLegacy = {
        name: 'MonFI',
        url: 'https://issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/token',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: false,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });

    it('set to "false" the "active" and "display" fields before saving', async () => {
      const IIdentityProvider: CreateIdentityProviderDTO = {
        name: 'MonFI',
        title: 'Mon FI mieux écrit',
        url: 'https://issuer.fr',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/token',
        statusURL: '',
        jwksURL: '',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        clientSecret: '1234567890AZERTYUIOP',
        hoverMsg: '',
        hoverRedirectLink: '',
        active: true,
        display: true,
        alt: '',
        image: '',
        imageFocus: '',
        trustedIdentity: false,
        eidas: 1,
        order: 0,
        mailto: ['sherman@kaliop.com', 'vbonnard@kaliopmail.com'],
        specificText: '',
      };

      const expected: IIdentityProviderLegacy = {
        name: 'MonFI',
        url: 'https://issuer.fr',
        hoverMsg: 'Disponible prochainement',
        hoverRedirectLink: '',
        display: false,
        title: 'Mon FI mieux écrit',
        image: '',
        alt: '',
        imageFocus: '',
        eidas: 1,
        mailto: 'sherman@kaliop.com\r\nvbonnard@kaliopmail.com',
        statusURL: '',
        authzURL: 'https://issuer.fr/auth',
        tokenURL: 'https://issuer.fr/token',
        userInfoURL: 'https://issuer.fr/token',
        clientID: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash: '**********',
        order: 0,
        jwksURL: '',
        jwtAlgorithm: [],
        trustedIdentity: false,
        specificText:
          'Une erreur est survenue lors de la transmission de votre identité.',
        active: false,
        createdAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedAt: new Date('1970-01-01T00:00:00.000Z'),
        updatedBy: 'user',
        blacklistByIdentityProviderActivated: false,
        WhitelistByServiceProviderActivated: false,
      };

      await identityProviderService.create(IIdentityProvider, 'user');

      expect(identityProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(identityProviderRepository.save).toHaveBeenCalledWith(expected);
    });
  });
});
