import { Test } from '@nestjs/testing';
import { Repository } from 'typeorm';
import { ObjectID } from 'mongodb';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { Pagination } from 'nestjs-typeorm-paginate';
import { IdentityProvider } from './identity-provider.entity';
import { IdentityProviderController } from './identity-provider.controller';
import { IdentityProviderService } from './identity-provider.service';

describe('IdentityProviderController', () => {
  let identityProviderController;
  let service: IdentityProviderService;
  const mockedIdentityProviderRepository = {
    find: jest.fn(),
    count: jest.fn(),
    findAndCount: jest.fn(),
  };

  const serviceMock = {
    paginate: jest.fn(),
  };

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      controllers: [IdentityProviderController],
      providers: [
        IdentityProviderService,
        {
          provide: getRepositoryToken(IdentityProviderService),
          useClass: Repository,
        },
      ],
    })
      .overrideProvider(getRepositoryToken(IdentityProvider, 'fc-mongo'))
      .useValue(mockedIdentityProviderRepository)
      .overrideProvider(IdentityProviderService)
      .useValue(serviceMock)
      .compile();

    identityProviderController = module.get<IdentityProviderController>(
      IdentityProviderController,
    );
    service = await module.get<IdentityProviderService>(
      IdentityProviderService,
    );
    jest.resetAllMocks();
  });

  describe('list', () => {
    it('returns the list of the available service providers', async () => {
      // Setup
      const page = 0;
      const limit = 10;

      // //Mocking item id
      const itemId: ObjectID = new ObjectID('5d35b91e70332098440d0f85');
      //
      // //Mocking Items
      const itemTest1: IdentityProvider = {
        id: itemId,
        name: 'fip1',
        active: true,
        order: 2,
        messageToDisplayWhenInactive: 'Message to display',
        redirectionTargetWhenInactive: 'Message to display',
        blacklistByIdentityProviderActivated: true,
        whitelistByServiceProviderActivated: true,
        display: true,
        title: 'Identity Provider Example',
        image: '',
        imageFocus: '',
        alt: 'impots',
        eidas: 2,
        mailto: '',
        specificText: 'specific text fip1',
        url: 'https://fip1.docker.dev-franceconnect.fr/',
        statusUrl: 'https://fip1.docker.dev-franceconnect.fr/',
        authorizationUrl:
          'https://fip1.docker.dev-franceconnect.fr/user/authorize',
        tokenUrl: 'https://fip1.docker.dev-franceconnect.fr/user/token',
        userInfoUrl: 'https://fip1.docker.dev-franceconnect.fr/api/user',
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash:
          'bbe8f1b2a1415d6942b653689a51ba16f22b41e57a4e44b40799d',
        jwksUrl: 'toto',
        updatedAt: new Date(),
        updatedBy: 'admin',
      };
      const itemTest2: IdentityProvider = {
        id: itemId,
        name: 'fip1',
        active: true,
        order: 2,
        messageToDisplayWhenInactive: 'Message to display',
        redirectionTargetWhenInactive: 'Message to display',
        blacklistByIdentityProviderActivated: true,
        whitelistByServiceProviderActivated: true,
        display: true,
        title: 'Identity Provider Example',
        image: '',
        imageFocus: '',
        alt: 'impots',
        eidas: 2,
        mailto: '',
        specificText: 'specific text fip1',
        url: 'https://fip1.docker.dev-franceconnect.fr/',
        statusUrl: 'https://fip1.docker.dev-franceconnect.fr/',
        authorizationUrl:
          'https://fip1.docker.dev-franceconnect.fr/user/authorize',
        tokenUrl: 'https://fip1.docker.dev-franceconnect.fr/user/token',
        userInfoUrl: 'https://fip1.docker.dev-franceconnect.fr/api/user',
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash: 'bbe8f1b2a1415d6942b653689a51ba16f22b',

        jwksUrl: 'toto',
        updatedAt: new Date(),
        updatedBy: 'admin',
      };
      const itemTest3: IdentityProvider = {
        id: itemId,
        name: 'fip1',
        active: true,
        order: 2,
        messageToDisplayWhenInactive: 'Message to display',
        redirectionTargetWhenInactive: 'Message to display',
        blacklistByIdentityProviderActivated: true,
        whitelistByServiceProviderActivated: true,
        display: true,
        title: 'Identity Provider Example',
        image: '',
        imageFocus: '',
        alt: 'impots',
        eidas: 2,
        mailto: '',
        specificText: 'specific text fip1',
        url: 'https://fip1.docker.dev-franceconnect.fr/',
        statusUrl: 'https://fip1.docker.dev-franceconnect.fr/',
        authorizationUrl:
          'https://fip1.docker.dev-franceconnect.fr/user/authorize',
        tokenUrl: 'https://fip1.docker.dev-franceconnect.fr/user/token',
        userInfoUrl: 'https://fip1.docker.dev-franceconnect.fr/api/user',
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash:
          'bbe8f1b2a1415d6942b653689a51ba16f22b41e57a4e44b40799d66c559d',
        jwksUrl: 'toto',
        updatedAt: new Date(),
        updatedBy: 'admin',
      };

      // Mocking return value of serviceProviderController.list(page, limit)
      const identityProviders = {
        items: [itemTest1, itemTest2, itemTest3],
        totalProvider: 3,
        totalItems: 3,
        itemCount: 3,
        pageCount: 1,
        pages: 1,
        next: '',
        previous: '',
      };

      // Actions
      // Mocking the return of the paginate function
      const result: Promise<Pagination<IdentityProvider>> = Promise.resolve(
        identityProviders,
      );

      // Mocking the return of service paginte function
      const spy = jest
        .spyOn(service, 'paginate')
        .mockImplementation(() => Promise.resolve(result));

      // Calling the list function
      const resultat = await identityProviderController.list(page, limit);

      // Expected
      expect(spy).toHaveBeenCalled();
      expect(resultat.totalProvider).toEqual(3);
      expect(resultat.pages).toEqual(1);
      expect(resultat.identityProviders.length).toEqual(3);
    });
  });
});
