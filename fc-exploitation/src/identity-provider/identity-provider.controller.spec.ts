import { Test } from '@nestjs/testing';
import { Repository } from 'typeorm';
import { ObjectID } from 'mongodb';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { Pagination } from 'nestjs-typeorm-paginate';
import { IdentityProvider } from './identity-provider.entity';
import { IdentityProviderController } from './identity-provider.controller';
import { IdentityProviderService } from './identity-provider.service';

describe('IdentityProviderController', () => {
  let identityProviderController;
  let service: IdentityProviderService;
  const mockedIdentityProviderRepository = {
    findAndCount: jest.fn(),
  };

  const serviceMock = {
    paginate: jest.fn(),
    countProviders: jest.fn(),
    create: jest.fn(),
  };

  const identityProviderDTO = {
    name: 'trotro',
    url: 'www.landingPage.com',
    hoverMsg: '',
    hoverRedirectLink: '',
    display: false,
    title: 'title',
    image: '',
    alt: '',
    imageFocus: '',
    eidas: 3,
    mailto: ['trotro@trotro.com'],
    statusURL: 'www.status-url.com',
    authzURL: 'www.auth-url.com',
    tokenURL: 'www.token-url.com',
    userInfoURL: 'www.user-info-url.com',
    clientID: 'hkjhkjhkhkjhjk',
    clientSecret: 'jhkjhkjhkh',
    order: 2,
    jwksURL: 'www.jwks-url.com',
    trustedIdentity: false,
    specificText: '',
  };

  const req = {
    flash: jest.fn(),
    csrfToken: function csrfToken() {
      return 'mygreatcsrftoken';
    },
    user: {
      username: 'jean_moust',
    },
    body: identityProviderDTO,
  };

  const res = {
    redirect: jest.fn(),
    status: jest.fn(),
    locals: {
      APP_ROOT: '/foo/bar',
    },
  };

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      controllers: [IdentityProviderController],
      providers: [
        IdentityProviderService,
        {
          provide: getRepositoryToken(IdentityProviderService),
          useClass: Repository,
        },
      ],
    })
      .overrideProvider(getRepositoryToken(IdentityProvider, 'fc-mongo'))
      .useValue(mockedIdentityProviderRepository)
      .overrideProvider(IdentityProviderService)
      .useValue(serviceMock)
      .compile();

    identityProviderController = module.get<IdentityProviderController>(
      IdentityProviderController,
    );
    service = await module.get<IdentityProviderService>(
      IdentityProviderService,
    );
    jest.resetAllMocks();
  });

  describe('list', () => {
    it('returns the list of the available identity providers', async () => {
      // Setup
      const page = 0;
      const limit = 10;

      // //Mocking item id
      const itemId: ObjectID = new ObjectID('5d35b91e70332098440d0f85');
      //
      // //Mocking Items
      const itemTest1: IdentityProvider = {
        id: itemId,
        name: 'fip1',
        active: true,
        order: 2,
        messageToDisplayWhenInactive: 'Message to display',
        redirectionTargetWhenInactive: 'Message to display',
        blacklistByIdentityProviderActivated: true,
        whitelistByServiceProviderActivated: true,
        display: true,
        title: 'Identity Provider Example',
        image: '',
        imageFocus: '',
        alt: 'impots',
        eidas: 2,
        mailto: '',
        specificText: 'specific text fip1',
        url: 'https://fip1.docker.dev-franceconnect.fr/',
        statusUrl: 'https://fip1.docker.dev-franceconnect.fr/',
        authorizationUrl:
          'https://fip1.docker.dev-franceconnect.fr/user/authorize',
        tokenUrl: 'https://fip1.docker.dev-franceconnect.fr/user/token',
        userInfoUrl: 'https://fip1.docker.dev-franceconnect.fr/api/user',
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash:
          'bbe8f1b2a1415d6942b653689a51ba16f22b41e57a4e44b40799d',
        jwksUrl: 'toto',
        updatedAt: new Date(),
        updatedBy: 'admin',
      };
      const itemTest2: IdentityProvider = {
        id: itemId,
        name: 'fip1',
        active: true,
        order: 2,
        messageToDisplayWhenInactive: 'Message to display',
        redirectionTargetWhenInactive: 'Message to display',
        blacklistByIdentityProviderActivated: true,
        whitelistByServiceProviderActivated: true,
        display: true,
        title: 'Identity Provider Example',
        image: '',
        imageFocus: '',
        alt: 'impots',
        eidas: 2,
        mailto: '',
        specificText: 'specific text fip1',
        url: 'https://fip1.docker.dev-franceconnect.fr/',
        statusUrl: 'https://fip1.docker.dev-franceconnect.fr/',
        authorizationUrl:
          'https://fip1.docker.dev-franceconnect.fr/user/authorize',
        tokenUrl: 'https://fip1.docker.dev-franceconnect.fr/user/token',
        userInfoUrl: 'https://fip1.docker.dev-franceconnect.fr/api/user',
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash: 'bbe8f1b2a1415d6942b653689a51ba16f22b',

        jwksUrl: 'toto',
        updatedAt: new Date(),
        updatedBy: 'admin',
      };
      const itemTest3: IdentityProvider = {
        id: itemId,
        name: 'fip1',
        active: true,
        order: 2,
        messageToDisplayWhenInactive: 'Message to display',
        redirectionTargetWhenInactive: 'Message to display',
        blacklistByIdentityProviderActivated: true,
        whitelistByServiceProviderActivated: true,
        display: true,
        title: 'Identity Provider Example',
        image: '',
        imageFocus: '',
        alt: 'impots',
        eidas: 2,
        mailto: '',
        specificText: 'specific text fip1',
        url: 'https://fip1.docker.dev-franceconnect.fr/',
        statusUrl: 'https://fip1.docker.dev-franceconnect.fr/',
        authorizationUrl:
          'https://fip1.docker.dev-franceconnect.fr/user/authorize',
        tokenUrl: 'https://fip1.docker.dev-franceconnect.fr/user/token',
        userInfoUrl: 'https://fip1.docker.dev-franceconnect.fr/api/user',
        clientId: '09a1a257648c1742c74d6a3d84b31943',
        clientSecretHash:
          'bbe8f1b2a1415d6942b653689a51ba16f22b41e57a4e44b40799d66c559d',
        jwksUrl: 'toto',
        updatedAt: new Date(),
        updatedBy: 'admin',
      };

      // Mocking return value of serviceProviderController.list(page, limit)
      const identityProviders = {
        items: [itemTest1, itemTest2, itemTest3],
        totalProvider: 3,
        totalItems: 3,
        itemCount: 3,
        pageCount: 1,
        pages: 1,
        next: '',
        previous: '',
      };

      // Actions
      // Mocking the return of the paginate function
      const result: Promise<Pagination<IdentityProvider>> = Promise.resolve(
        identityProviders,
      );

      // Mocking the return of service paginte function
      const spy = jest
        .spyOn(service, 'paginate')
        .mockImplementation(() => Promise.resolve(result));

      // Calling the list function
      const resultat = await identityProviderController.list(page, limit);

      // Expected
      expect(spy).toHaveBeenCalled();
      expect(resultat.totalProvider).toEqual(3);
      expect(resultat.pages).toEqual(1);
      expect(resultat.identityProviders.length).toEqual(3);
    });
  });

  describe('get create', () => {
    it('should get identity provider creation form', async () => {
      // setup
      const spy = jest
        .spyOn(serviceMock, 'countProviders')
        .mockImplementation(() => Promise.resolve('3'));
      // action
      const resultat = await identityProviderController.showCreationForm(req);
      // expectation
      expect(spy).toHaveBeenCalled();
      expect(serviceMock.countProviders).toHaveBeenCalledTimes(1);
    });
  });

  describe('post create', () => {
    it('should call successfully the service provider create function', async () => {
      // action
      await identityProviderController.createIdentityProvider(
        identityProviderDTO,
        req,
        res,
      );
      // expectation
      expect(serviceMock.create).toHaveBeenCalledTimes(1);
      expect(serviceMock.create).toHaveBeenCalledWith(
        identityProviderDTO,
        req.user.username,
      );
      expect(req.flash).toHaveBeenCalledTimes(1);
      expect(req.flash).toHaveBeenCalledWith(
        'success',
        "Le fournisseur d'identité trotro a été créé avec succès !",
      );
      expect(res.redirect).toHaveBeenCalledTimes(1);
      expect(res.redirect).toHaveBeenCalledWith(
        `${res.locals.APP_ROOT}/identity-provider`,
      );
    });

    it('should fall back in the catch if identityProviderService.create could not handle the request', async () => {
      // setup
      serviceMock.create.mockImplementationOnce(() => {
        throw new Error('Try again buddy');
      });
      // action
      await identityProviderController.createIdentityProvider(
        identityProviderDTO,
        req,
        res,
      );
      // expectation
      expect(serviceMock.create).toHaveBeenCalledTimes(1);
      expect(serviceMock.create).toHaveBeenCalledWith(
        identityProviderDTO,
        req.user.username,
      );
      expect(req.flash).toHaveBeenCalledTimes(2);
      expect(req.flash).toHaveBeenCalledWith('globalError', 'Try again buddy');
      expect(req.flash).toHaveBeenCalledWith('values', req.body);
      expect(res.redirect).toHaveBeenCalledTimes(1);
      expect(res.redirect).toHaveBeenCalledWith(
        `${res.locals.APP_ROOT}/identity-provider/create`,
      );
    });
  });
});
