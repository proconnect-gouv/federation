import {
  Controller,
  Get,
  Req,
  Res,
  Render,
  Query,
  Post,
  Body,
  UsePipes,
  ValidationPipe,
  UseInterceptors,
} from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { IdentityProviderService } from './identity-provider.service';
import { IdentityProvider } from './identity-provider.entity';
import { CreateIdentityProviderDTO } from './dto/identity-provider.dto';
import { Pagination } from 'nestjs-typeorm-paginate';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';

@Controller('identity-provider')
export class IdentityProviderController {
  constructor(
    private readonly identityProviderService: IdentityProviderService,
  ) {}

  @Get()
  @Roles(UserRole.OPERATOR, UserRole.SECURITY)
  @Render('identity-provider/list')
  async list(
    @Query('page') pageQuery: string = '0',
    @Query('limit') limitQuery: string = '10',
  ) {
    const page = parseInt(pageQuery, 10);
    const limit = parseInt(limitQuery, 10);

    const identityProviders: Pagination<
      IdentityProvider
    > = await this.identityProviderService.paginate({
      page,
      limit,
      route: '/identity-provider',
    });

    return {
      identityProviders: identityProviders.items,
      totalProvider: identityProviders.totalItems,
      pages: identityProviders.pageCount,
      next: identityProviders.next,
      previous: identityProviders.previous,
    };
  }

  @Get('create')
  @Roles(UserRole.OPERATOR)
  @Render('identity-provider/creation')
  async showCreationForm(@Req() req) {
    const csrfToken = req.csrfToken();
    const nbrProviders = await this.identityProviderService.countProviders();
    return { csrfToken, nbrProviders };
  }

  @Post('create')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/identity-provider/create`))
  @UsePipes(
    new ValidationPipe({
      transform: true,
    }),
  )
  async createIdentityProvider(
    @Body() createIdentityProviderDto: CreateIdentityProviderDTO,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.identityProviderService.create(
        createIdentityProviderDto,
        req.user.username,
      );
    } catch (error) {
      req.flash('globalError', error.message);
      req.flash('values', req.body);
      return res.redirect(`${res.locals.APP_ROOT}/identity-provider/create`);
    }
    req.flash(
      'success',
      `Le fournisseur d'identité ${createIdentityProviderDto.name} a été créé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/identity-provider`);
  }
}
