import { Controller, Get, Render, Query } from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { IdentityProviderService } from './identity-provider.service';
import { IdentityProvider } from './identity-provider.entity';
import { Pagination } from 'nestjs-typeorm-paginate';

@Controller()
export class IdentityProviderController {
  constructor(
    private readonly identityProviderService: IdentityProviderService,
  ) {}

  @Get('identity-provider')
  @Roles(UserRole.OPERATOR, UserRole.SECURITY)
  @Render('identity-provider/list')
  async list(
    @Query('page') pageQuery: string = '0',
    @Query('limit') limitQuery: string = '10',
  ) {
    const page = parseInt(pageQuery, 10);
    const limit = parseInt(limitQuery, 10);

    const identityProviders: Pagination<
      IdentityProvider
    > = await this.identityProviderService.paginate({
      page,
      limit,
      route: '/identity-provider',
    });

    return {
      identityProviders: identityProviders.items,
      totalProvider: identityProviders.totalItems,
      pages: identityProviders.pageCount,
      next: identityProviders.next,
      previous: identityProviders.previous,
    };
  }
}
