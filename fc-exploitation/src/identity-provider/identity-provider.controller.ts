import {
  Controller,
  Get,
  Patch,
  Req,
  Res,
  Render,
  Query,
  Post,
  Param,
  Body,
  Delete,
  UsePipes,
  ValidationPipe,
  UseInterceptors,
} from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { IdentityProviderService } from './identity-provider.service';
import { IdentityProviderDTO } from './dto/identity-provider.dto';

@Controller('identity-provider')
export class IdentityProviderController {
  constructor(
    private readonly identityProviderService: IdentityProviderService,
  ) {}

  @Get()
  @Roles(UserRole.OPERATOR, UserRole.SECURITY)
  @Render('identity-provider/list')
  async list(
    @Req() req,
    @Query('sort') sort: string,
    @Query('action') action: string,
    @Query('page') pageQuery: string = '1',
    @Query('limit') limitQuery: string = '10',
  ) {
    const page = parseInt(pageQuery, 10);
    const limit = parseInt(limitQuery, 10);
    const csrfToken = req.csrfToken();

    const identityProviders = await this.identityProviderService.paginate({
      page,
      limit,
      route: '/identity-provider',
      sort,
      action,
      defaultLimit: 10,
    });

    return {
      identityProviders: identityProviders.items,
      totalProvider: identityProviders.totalItems,
      csrfToken,
      next: identityProviders.next,
      previous: identityProviders.previous,
      pageCount: identityProviders.pageCount,
      page,
      limit,
      sort,
      action,
    };
  }

  @Get('create')
  @Roles(UserRole.OPERATOR)
  @Render('identity-provider/creation')
  async showCreationForm(@Req() req) {
    const csrfToken = req.csrfToken();
    const nbrProviders = await this.identityProviderService.countProviders();
    return { csrfToken, nbrProviders };
  }

  @Post('create')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/identity-provider/create`))
  @UsePipes(
    new ValidationPipe({
      transform: true,
    }),
  )
  async createIdentityProvider(
    @Body() identityProviderDto: IdentityProviderDTO,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.identityProviderService.create(
        identityProviderDto,
        req.user.username,
      );
    } catch (error) {
      req.flash('globalError', error.message);
      req.flash('values', req.body);
      return res.redirect(`${res.locals.APP_ROOT}/identity-provider/create`);
    }
    req.flash(
      'success',
      `Le fournisseur d'identité ${identityProviderDto.name} a été créé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/identity-provider`);
  }

  @Get(':id')
  @Roles(UserRole.OPERATOR)
  @Render('identity-provider/update')
  async findOne(@Param('id') id, @Req() req, @Res() res) {
    const csrfToken = req.csrfToken();

    const identityProvider = await this.identityProviderService.findById(id);

    if (req.session.flash && req.session.flash.errors) {
      // Keep the user last inputs when displaying an error in the form
      req.session.flash.values[0] = Object.assign(
        identityProvider,
        req.session.flash.values[0],
      );
    } else {
      req.flash('values', identityProvider);
    }

    return {
      csrfToken,
      id,
    };
  }

  @Patch(':id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/identity-provider/:id`))
  @UsePipes(new ValidationPipe({ transform: true }))
  async identityProviderUpdate(
    @Body() identityProvider: IdentityProviderDTO,
    @Param('id') id,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.identityProviderService.update(
        id,
        identityProvider,
        req.user.username,
      );
    } catch (error) {
      req.flash('globalError', error.message);
      return res.redirect(`${res.locals.APP_ROOT}/identity-provider/${id}`);
    }

    req.flash(
      'success',
      `Le fournisseur d'identité ${identityProvider.title} a été modifié avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/identity-provider/${id}`);
  }

  @Delete(':name')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor('/identity-provider'))
  async deleteIdentityProvider(
    @Param('name') name: string,
    @Req() req,
    @Res() res,
    @Body() body,
  ) {
    try {
      await this.identityProviderService.deleteIdentityProvider({
        name,
      });
    } catch (error) {
      req.flash('globalError', error.message);
      return res.status(500);
    }

    req.flash(
      'success',
      `Le fournisseur d'identité ${body.name} a été supprimé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/identity-provider`);
  }
}
