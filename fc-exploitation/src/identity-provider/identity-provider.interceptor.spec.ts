import { IdentityProviderInterceptor } from './identity-provider.interceptor';

describe('IdentityProviderInterceptor', () => {
  const identityProviderInterceptor = new IdentityProviderInterceptor();

  const request = {
    body: {},
    csrfToken: jest.fn(),
    flash: jest.fn(),
  };
  const response = {
    redirect: jest.fn(),
  };

  const executionContext = {
    switchToHttp: jest.fn(),
    switchToRpc: jest.fn(),
    switchToWs: jest.fn(),
    getClass: jest.fn(),
    getArgs: jest.fn(),
    getArgByIndex: jest.fn(),
    getHandler: jest.fn(),
    getType: jest.fn(),
  };

  const callHandler = {
    handle: jest.fn(),
  };

  beforeEach(() => {
    jest.resetAllMocks();

    request.csrfToken.mockReturnValue('ThIs_Is_A_cSrF_tOkEn');

    executionContext.switchToHttp.mockReturnValue({
      getRequest: jest.fn().mockReturnValue(request),
      getResponse: jest.fn().mockReturnValue(response),
    });
  });

  it('should be defined', () => {
    expect(identityProviderInterceptor).toBeDefined();
  });

  describe('should return a defined uid and an array with', () => {
    it('with only one identity provider', async () => {
      request.body = { name: 'teentitan' };
      await identityProviderInterceptor.intercept(
        executionContext,
        callHandler,
      );

      expect(executionContext.switchToHttp().getRequest().body).toEqual({
        name: 'teentitan',
        uid: 'teentitan',
      });
      expect(callHandler.handle).toBeCalledTimes(1);
    });
  });
});
