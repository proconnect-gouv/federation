import { ObjectID } from 'mongodb';

export const dataProviderServiceMock = {
  getScopesAndLabels: jest.fn(),
  getScopeAndLabelCount: jest.fn(),
  createScopeAndLabels: jest.fn(),
  updateScopeLabels: jest.fn(),
  deleteScopeAndLabel: jest.fn(),
};

export const scopeAndLabelMock = {
  scope: 'Seldon',
  label: 'Seldon Label',
  fd: 'Seldon Label',
};

export const reqMock = {
  flash: jest.fn(),
  user: {
    username: 'Harry Seldon',
  },
  csrfToken: function csrfToken() {
    return 'foundationCsrfToken';
  },
  body: {
    scope: 'toto',
    label: 'toto label',
    fd: 'dgfip',
  },
};

export const resMock = {
  redirect: jest.fn(),
  status: jest.fn(),
  locals: {
    APP_ROOT: '/trantor/foundation',
  },
};

export const scopeLabelsListMock = [
  {
    id: new ObjectID('5d9c677da8bb151b00720451'),
    scope: 'dgfip_revenu_fiscal_de_reference',
    label: 'Revenu fiscal de référence (DGFIP)',
  },
  {
    id: new ObjectID('5d9c67cda8bd151b00720451'),
    scope: 'dgfip_revenu_fiscal_de_reference',
    label: 'Revenu fiscal de référence (DGFIP)',
  },
  {
    id: new ObjectID('5d9c67cda8bc151b00720451'),
    scope: 'dgfip_revenu_fiscal_de_reference',
    label: 'Revenu fiscal de référence (DGFIP)',
  },
];

export const id = new ObjectID('5d9c677da8bb151b00720451');

export const scopeLabelsRepositoryMock = {
  find: jest.fn(),
  count: jest.fn(),
  findOne: jest.fn(),
  findAndCount: jest.fn(),
  save: jest.fn(),
  update: jest.fn(),
  delete: jest.fn(),
};
