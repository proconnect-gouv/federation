/* istanbul ignore file */

// Declarative code
import { IsNotEmpty, Matches, IsArray, IsOptional } from 'class-validator';
import { Transform, Type } from 'class-transformer';
import { toArray, toBoolean } from '@fc/shared/transforms/string.transform';
import { IsOptionalExtended } from '@fc/shared/validators/is-optional-extended.validator';
import { IsValidInputString } from '@fc/shared/validators/is-valid-input-string';
import { IDataProvider } from '../interface/data-provider.interface';

// Regex retrieved from the 'identity-provider.dto' part to keep the same validation rule for the jwks uri
const URL_REGEX_JWKS = /^((https?:\/\/)?((([^\s\/$.?#]{1,})(\.[^\s\/$?#]{2,})*\.[a-z]{2,})|(([0-9]{1,3}\.){3}[0-9]{1,3})|localhost)(:[0-9]{2,5})?(\/[^\s\/$]+)*\/?)$/;
export class DataProviderDto implements IDataProvider {
  @IsValidInputString({
    message: `Veuillez mettre un nom valide ( Majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
  })
  @IsNotEmpty({
    message: `Le nom du fournisseur de données doit être renseigné`,
  })
  readonly title: string;

  @IsNotEmpty({
    message: 'Veuillez faire un choix',
  })
  @Transform(toBoolean)
  readonly active: boolean;

  @IsOptional()
  @Transform(toArray)
  @IsArray()
  readonly scopes: string[];

  @IsOptionalExtended()
  @Matches(URL_REGEX_JWKS, {
    message:
      ' Veuillez mettre une client keys url valide au format ( Ex: https://urlvalide.fr/jwks )',
  })
  // tslint:disable-next-line: variable-name
  readonly jwks_uri?: string;
}
