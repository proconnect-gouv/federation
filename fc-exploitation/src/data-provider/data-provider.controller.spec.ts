import { ObjectID } from 'mongodb';

import { Test } from '@nestjs/testing';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';

import { DataProviderController } from './data-provider.controller';
import { DataProvider } from './data-provider.mongodb.entity';
import { DataProviderService } from './data-provider.service';
import { ScopesService } from '../scopes';
import { IDataProvider } from './interface/data-provider.interface';

const id: ObjectID = new ObjectID('6d9c677da8bb151b00720451');

const scopeList = ['myscope'];

describe('DataProviderController', () => {
  let dataProviderController: DataProviderController;
  let dataProviderService: DataProviderService;

  const dataProviderRepositoryMock = {
    count: jest.fn(),
    // findAndCount: jest.fn(),
    // find: jest.fn(),
  };

  const dataProviderServiceMock = {
    paginate: jest.fn(),
    createDataProvider: jest.fn(),
    // find: jest.fn(),
    // findById: jest.fn(),
    // update: jest.fn(),
    // deleteManyServiceProvidersById: jest.fn(),
    // deleteServiceProviderById: jest.fn(),
    // generateNewSecret: jest.fn(),
  };

  const renderMock = {
    render: jest.fn(),
  };

  const res = {
    redirect: jest.fn(),
    status: jest.fn(),
    locals: {
      APP_ROOT: '/foo/bar',
    },
  };

  const dataProviderDtoMock: IDataProvider = {
    title: 'monfd',
    jwks_uri: 'https://monfd.com/jwks',
    active: true,
    scopes: [...scopeList],
  };

  const idParam = '05e4fadf-fda6-4ad8-ae75-b7f315843827';

  const req = {
    flash: jest.fn(),
    params: { id: idParam },
    session: {},
    user: { id: idParam, username: 'mocker' },
    csrfToken: () => 'mygreatcsrftoken',
  };

  const scopesServiceMock = {
    getAll: jest.fn(),
    getScopesGroupedByFd: jest.fn(),
  };

  const claimsServiceMock = {
    getAll: jest.fn(),
  };

  const identityProviderServiceMock = {
    getAll: jest.fn(),
  };

  const scopesGroupMock = {
    fd1: [
      {
        fd: 'fd1',
        scope: 'fd1scope1',
        label: 'fd1scope1 label',
      },
      {
        fd: 'fd1',
        scope: 'fd1scope2',
        label: 'fd1scope2 label',
      },
    ],
    fd2: [
      {
        fd: 'fd2',
        scope: 'fd2scope1',
        label: 'fd2scope1 label',
      },
    ],
  };

  const userMock = 'toto';

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      imports: [],
      providers: [
        DataProviderController,
        {
          provide: getRepositoryToken(DataProvider, 'fc-mongo'),
          useValue: dataProviderRepositoryMock,
        },
        {
          provide: DataProviderService,
          useValue: dataProviderServiceMock,
        },
        {
          provide: ScopesService,
          useValue: scopesServiceMock,
        },
      ],
    }).compile();

    dataProviderController = await module.get<DataProviderController>(
      DataProviderController,
    );

    dataProviderService = await module.get<DataProviderService>(
      DataProviderService,
    );

    jest.resetAllMocks();

    // renderMock.render.mockReturnValueOnce(true);
    // res.status.mockReturnValueOnce(renderMock);
    // identityProviderServiceMock.getAll.mockResolvedValue(identityProvidersMock);
  });

  describe('list()', () => {
    it('returns the list of the available data providers', async () => {
      // Setup
      const page = '0';
      const limit = '10';
      const action = '';
      const search = '';

      // Mocking Items
      const itemTest1: DataProvider = {
        id: new ObjectID('5d35b91e70332098440d0f85'),
        uid: '6f21b751-ed06-48b6-a59c-36e1300a368a',
        title: 'dataprovider1',
        active: true,
        client_id: '76eded44d32b40c0cb1006065',
        client_secret:
          '6925fb8143c76eded44d32b40c0cb1006065f7f003de52712b78985704f39950',
        jwks_uri: 'https://monfd.com/jwks',
        secretCreatedAt: new Date(),
        createdAt: new Date(),
        updatedBy: userMock,
        scopes: [...scopeList],
      };

      // Mocking return value of DataProviderService.paginate()
      jest.spyOn(dataProviderService, 'paginate').mockResolvedValue({
        items: [itemTest1],
        itemCount: 1,
        total: 1,
        pageCount: 0,
        next: '',
        previous: '',
        totalItems: 1,
      });

      dataProviderRepositoryMock.count.mockResolvedValue(1);

      // Actions
      const spList = await dataProviderController.list(
        req,
        search,
        action,
        page,
        limit,
      );

      // Expected
      expect(spList.dataProviders).toMatchObject([itemTest1]);
      expect(spList.activeDataProvidersCount).toEqual(1);
    });
  });

  describe('createDataProvider()', () => {
    it('should call correct params when creating a data provider', async () => {
      // when
      await dataProviderController.createDataProvider(
        dataProviderDtoMock,
        req,
        res,
      );

      // then
      expect(dataProviderServiceMock.createDataProvider).toHaveBeenCalledTimes(
        1,
      );
      expect(dataProviderServiceMock.createDataProvider).toHaveBeenCalledWith(
        {
          ...dataProviderDtoMock,
        },
        req.user.username,
      );
    });
  });

  describe('showCreationForm()', () => {
    beforeEach(() => {
      scopesServiceMock.getScopesGroupedByFd.mockResolvedValue(scopesGroupMock);
    });

    it('Should get service provider creation and render view', async () => {
      // when
      const result = await dataProviderController.showCreationForm(req);

      // then
      expect(result).toEqual({
        csrfToken: 'mygreatcsrftoken',
        scopesGroupedByFd: scopesGroupMock,
      });
    });
  });

  describe('findOne(), get a service provider', () => {
    //   const serviceProvider = {
    //     id: idParam,
    //     name: 'ProConnect TEST find one',
    //     redirect_uris: ['https://proConnect.com'],
    //     post_logout_redirect_uris: ['https://proConnect.com'],
    //     site: ['https://proConnect8888.com'],
    //     status: 'public',
    //     jwks_uri: 'https://proConnect8888.com/jwks',
    //     active: 'true',
    //     IPServerAddressesAndRanges: ['1.1.1.1'],
    //     key: 'cb55015c-7fb5-49b4-9006-e523552bc3e7',
    //     scopes: [...scopeList],
    //     trustedIdentity: false,
    //   };
    //   it('should get a service Provider and render update view', async () => {
    //     // setup
    //     const spMock = {
    //       ...serviceProvider,
    //       email: ['v@b.com'],
    //     };
    //     claimsServiceMock.getAll.mockResolvedValue(claimsListMock);
    //     dataProviderServiceMock.findById.mockImplementation(() =>
    //       Promise.resolve(spMock),
    //     );
    //     scopesServiceMock.getScopesGroupedByFd.mockResolvedValue(scopesGroupMock);
    //     // action
    //     const result = await dataProviderController.findOne(idParam, req);
    //     // expect
    //     expect(req.flash).toHaveBeenCalledTimes(1);
    //     expect(req.flash).toHaveBeenCalledWith('values', {
    //       ...spMock,
    //       redirectUri: 'https://proConnect.com',
    //       ipsRanges: '1.1.1.1',
    //       postLogoutUri: 'https://proConnect.com',
    //       jwksUri: 'https://proConnect8888.com/jwks',
    //       emails: 'v@b.com',
    //       site: 'https://proConnect8888.com',
    //     });
    //     expect(result).toEqual({
    //       id: idParam,
    //       csrfToken: 'mygreatcsrftoken',
    //       scopesGroupedByFd: scopesGroupMock,
    //       scopesSelected: scopeList,
    //       claimsSelected: ['amr'],
    //       claims: [
    //         {
    //           name: 'amr',
    //           id,
    //         },
    //       ],
    //     });
    //   });
  });

  describe('serviceProviderUpdate()', () => {
    //   it('should update a servicerProvider and return to the serviceProvider page', async () => {
    //     await dataProviderController.serviceProviderUpdate(
    //       DataProviderDtoMock,
    //       idParam,
    //       req,
    //       res,
    //     );
    //     expect(res.redirect).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider/${idParam}`,
    //     );
    //   });
    //   it('should call serviceProviderService.update()', async () => {
    //     // When
    //     await dataProviderController.serviceProviderUpdate(
    //       DataProviderDtoMock,
    //       idParam,
    //       req,
    //       res,
    //     );
    //     // Then
    //     expect(dataProviderServiceMock.update).toHaveBeenCalledTimes(1);
    //     expect(dataProviderServiceMock.update).toHaveBeenCalledWith(
    //       idParam,
    //       DataProviderDtoMock,
    //       req.user.username,
    //     );
    //   });
    //   it("should redirect to the serviceProvider if we can't update the serviceProvider", async () => {
    //     dataProviderServiceMock.update = jest.fn(() => {
    //       throw Error;
    //     });
    //     // action
    //     await dataProviderController.serviceProviderUpdate(
    //       DataProviderDtoMock,
    //       idParam,
    //       req,
    //       res,
    //     );
    //     // assertion
    //     expect(dataProviderServiceMock.update).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider/${idParam}`,
    //     );
    //   });
    //   it('should update a servicerProvider with URIScheme for redirectUri field and return to the serviceProvider page', async () => {
    //     (DataProviderDtoMock.redirectUri = [
    //       'https://url.com',
    //       'fc+app01://openid_redirect_url',
    //       'FC-app.02://openid_redirect_url',
    //       'franceconnect://openid_redirect_url',
    //     ]),
    //       await dataProviderController.serviceProviderUpdate(
    //         DataProviderDtoMock,
    //         idParam,
    //         req,
    //         res,
    //       );
    //     expect(res.redirect).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider/${idParam}`,
    //     );
    //   });
    //   it('should update a servicerProvider with URIScheme for redirectUriLogout field and return to the serviceProvider page', async () => {
    //     (DataProviderDtoMock.redirectUriLogout = [
    //       'https://url.com',
    //       'fc+app01://openid_redirect_url',
    //       'FC-app.02://openid_redirect_url',
    //       'franceconnect://openid_redirect_url',
    //     ]),
    //       await dataProviderController.serviceProviderUpdate(
    //         DataProviderDtoMock,
    //         idParam,
    //         req,
    //         res,
    //       );
    //     expect(res.redirect).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider/${idParam}`,
    //     );
    //   });
  });

  describe('Delete service provider', () => {
    //   it('Should redirect if service provider is removed', async () => {
    //     // set up
    //     const key = 'key';
    //     const body = { name: 'name' };
    //     // action
    //     dataProviderServiceMock.deleteServiceProviderById.mockReturnValueOnce(
    //       {},
    //     );
    //     await dataProviderController.deleteServiceProvider(
    //       key,
    //       req,
    //       res,
    //       body,
    //     );
    //     // expect
    //     expect(
    //       dataProviderServiceMock.deleteServiceProviderById,
    //     ).toHaveBeenCalledWith(key, req.user.username);
    //     expect(
    //       dataProviderServiceMock.deleteServiceProviderById,
    //     ).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider`,
    //     );
    //   });
    //   it('Should not redirect the user but set the res status to 500 for the error handler', async () => {
    //     // set up
    //     const key = 'key';
    //     const body = { name: 'name' };
    //     // action
    //     dataProviderServiceMock.deleteServiceProviderById.mockRejectedValueOnce(
    //       new Error('Try again buddy'),
    //     );
    //     await dataProviderController.deleteServiceProvider(
    //       key,
    //       req,
    //       res,
    //       body,
    //     );
    //     // expect
    //     expect(
    //       dataProviderServiceMock.deleteServiceProviderById,
    //     ).toHaveBeenCalledWith(key, req.user.username);
    //     expect(
    //       dataProviderServiceMock.deleteServiceProviderById,
    //     ).toHaveBeenCalledTimes(1);
    //     expect(req.flash).toHaveBeenCalledTimes(1);
    //     expect(req.flash).toHaveBeenCalledWith('globalError', 'Try again buddy');
    //     expect(res.status).toHaveBeenCalledWith(500);
    //     expect(res.redirect).toHaveBeenCalledTimes(0);
    //   });
  });

  describe('Delete several service provider', () => {
    //   it('Should redirect after remove several servide provider', async () => {
    //     // set up
    //     const deleteServiceProviderDto = {
    //       deleteItems: ['aaaa', 'bbbb', 'cccc'],
    //       name: 'aaa, bbb, ccc',
    //     };
    //     // action
    //     dataProviderServiceMock.deleteManyServiceProvidersById.mockReturnValueOnce(
    //       {},
    //     );
    //     await dataProviderController.deleteServiceProviders(
    //       deleteServiceProviderDto,
    //       res,
    //       req,
    //     );
    //     // expect
    //     expect(
    //       dataProviderServiceMock.deleteManyServiceProvidersById,
    //     ).toHaveBeenCalledWith(
    //       deleteServiceProviderDto.deleteItems,
    //       req.user.username,
    //     );
    //     expect(
    //       dataProviderServiceMock.deleteManyServiceProvidersById,
    //     ).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider`,
    //     );
    //   });
    //   it('Should not redirect the user but set the res status to 500 for error handler', async () => {
    //     // set up
    //     const deleteServiceProviderDto = {
    //       deleteItems: ['aaaa', 'bbbb'],
    //       name: 'aaa, bbb',
    //     };
    //     // action
    //     dataProviderServiceMock.deleteManyServiceProvidersById.mockRejectedValueOnce(
    //       new Error('Try again buddy'),
    //     );
    //     await dataProviderController.deleteServiceProviders(
    //       deleteServiceProviderDto,
    //       res,
    //       req,
    //     );
    //     // expect
    //     expect(
    //       dataProviderServiceMock.deleteManyServiceProvidersById,
    //     ).toHaveBeenCalledWith(
    //       deleteServiceProviderDto.deleteItems,
    //       req.user.username,
    //     );
    //     expect(
    //       dataProviderServiceMock.deleteManyServiceProvidersById,
    //     ).toHaveBeenCalledTimes(1);
    //     expect(req.flash).toHaveBeenCalledTimes(1);
    //     expect(req.flash).toHaveBeenCalledWith('globalError', 'Try again buddy');
    //     expect(res.status).toHaveBeenCalledWith(500);
    //     expect(res.redirect).toHaveBeenCalledTimes(0);
    //   });
  });

  describe('GenerateNewSecret View', () => {
    //   it('should get a service Provider and render generate client secret view', async () => {
    //     claimsServiceMock.getAll.mockResolvedValue(claimsListMock);
    //     const serviceProvider = {
    //       IPServerAddressesAndRanges: ['1.1.1.1'],
    //       active: 'true',
    //       email: ['v@b.com'],
    //       emails: 'v@b.com',
    //       ipsRanges: '1.1.1.1',
    //       key: 'cb55015c-7fb5-49b4-9006-e523552bc3e7',
    //       name: 'ProConnect Generate Secret 9',
    //       postLogoutUri: 'https://proConnect.com',
    //       post_logout_redirect_uris: ['https://proConnect.com'],
    //       redirectUri: 'https://proConnect.com',
    //       redirect_uris: ['https://proConnect.com'],
    //       site: 'https://proConnect8888.com',
    //       status: 'public',
    //       scopes: [...scopeList],
    //       trustedIdentity: false,
    //     };
    //     dataProviderServiceMock.findById.mockResolvedValue(serviceProvider);
    //     scopesServiceMock.getScopesGroupedByFd.mockResolvedValue(scopesGroupMock);
    //     const result = await dataProviderController.findOne(idParam, req);
    //     expect(req.flash).toHaveBeenCalledTimes(1);
    //     expect(req.flash).toHaveBeenCalledWith('values', {
    //       ...serviceProvider,
    //     });
    //     expect(result).toEqual({
    //       id: idParam,
    //       csrfToken: 'mygreatcsrftoken',
    //       scopesGroupedByFd: scopesGroupMock,
    //       scopesSelected: scopeList,
    //       claimsSelected: ['amr'],
    //       claims: [
    //         {
    //           name: 'amr',
    //           id,
    //         },
    //       ],
    //     });
    //   });
  });

  describe('Generate a new client secret', () => {
    //   it('Should redirect after generation of a client secret', async () => {
    //     // set up
    //     const serviceProvider = {
    //       IPServerAddressesAndRanges: ['1.1.1.1'],
    //       active: 'true',
    //       email: ['v@b.com'],
    //       emails: 'v@b.com',
    //       ipsRanges: '1.1.1.1',
    //       key: 'cb55015c-7fb5-49b4-9006-e523552bc3e7',
    //       name: 'FranceConnect TEST 9',
    //       postLogoutUri: 'https://FranceConnect.com',
    //       post_logout_redirect_uris: ['https://FranceConnect.com'],
    //       redirectUri: 'https://FranceConnect.com',
    //       redirect_uris: ['https://FranceConnect.com'],
    //       site: 'https://FranceConnect8888.com',
    //       status: 'public',
    //       client_secret:
    //         '$2b$10$EO3FnI3YKfnnvUlvr084wegEgEPeRPRMdE2VJwMHpAsNkaMv1n9pG',
    //       scopes: [...scopeList],
    //       trustedIdentity: false,
    //     };
    //     const generateNewClientSecretDTO = {
    //       name: 'aaa, bbb, ccc',
    //       key: 'clientID',
    //       client_secret: 'ancien secret hash',
    //     };
    //     const key = 'key';
    //     // action
    //     dataProviderServiceMock.generateNewSecret.mockReturnValueOnce(
    //       serviceProvider,
    //     );
    //     await dataProviderController.generateNewClientSecret(
    //       key,
    //       generateNewClientSecretDTO,
    //       req,
    //       res,
    //     );
    //     // expect
    //     expect(
    //       dataProviderServiceMock.generateNewSecret,
    //     ).toHaveBeenCalledTimes(1);
    //     expect(res.redirect).toHaveBeenCalledWith(
    //       `${res.locals.APP_ROOT}/service-provider`,
    //     );
    //   });
    //   it('Should redirect after generation of a client secret', async () => {
    //     // set up
    //     const generateNewClientSecretDTO = {
    //       name: 'aaa, bbb, ccc',
    //       key: 'clientID',
    //       client_secret: 'ancien secret hash',
    //     };
    //     const key = 'key';
    //     // action
    //     dataProviderServiceMock.generateNewSecret.mockRejectedValueOnce(
    //       new Error(),
    //     );
    //     await dataProviderController.generateNewClientSecret(
    //       key,
    //       generateNewClientSecretDTO,
    //       req,
    //       res,
    //     );
    //     // expect
    //     expect(
    //       dataProviderServiceMock.generateNewSecret,
    //     ).toHaveBeenCalledTimes(1);
    //     expect(res.status).toHaveBeenCalledWith(500);
    //     expect(res.redirect).toHaveBeenCalledTimes(0);
    //   });
  });

  describe('GET: paginate[mongodb] serviceProvider (list) ', () => {
    //   const itemId: ObjectID = new ObjectID('5d35b91e70332098440d0f85');
    //   const defaultSpMock = {
    //     id: itemId,
    //     name: 'Site Usagers',
    //     redirect_uris: ['https://url.com'],
    //     post_logout_redirect_uris: [''],
    //     jwks_uri: 'https://monfd.com/jwks',
    //     site: ['https://monsite.com'],
    //     email: 'v@b.com',
    //     IPServerAddressesAndRanges: ['192.0.0.0'],
    //     active: true,
    //     type: 'public',
    //     secretCreatedAt: new Date('2019-11-08T09:52:29.984Z'),
    //     client_secret: '76eded44d32b40c0cb1006065',
    //     key: '6925fb8143c76eded44d32b40c0cb1006065f7f003de52712b78985704f39950',
    //     createdAt: new Date('2019-11-08T09:52:29.984Z'),
    //     updatedBy: userMock,
    //     scopes: [...scopeList],
    //     trustedIdentity: false,
    //     entityId:
    //       'a0cd64372db6ecf39c317c0c74ce90f02d8ad7d510ce054883b759d666a996bc',
    //   };
    //   it('should return a list of service providers even with sort/action as undefined values', async () => {
    //     // Setup
    //     const page = '0';
    //     const limit = '10';
    //     const sort = undefined;
    //     const action = undefined;
    //     // Mocking return value of dataProviderController.list(page, limit)
    //     const dataProvidersResult = {
    //       items: [defaultSpMock, defaultSpMock],
    //       itemCount: 2,
    //       totalItems: 2,
    //       pageCount: 0,
    //       next: '',
    //       previous: '',
    //     };
    //     // Actions
    //     // Mocking the return of the paginate function
    //     dataProviderServiceMock.paginate.mockResolvedValueOnce(
    //       dataProvidersResult,
    //     );
    //     // Calling the list function
    //     const result = await dataProviderController.list(
    //       req,
    //       sort,
    //       action,
    //       page,
    //       limit,
    //     );
    //     // Expected
    //     expect(result.dataProviders.length).toEqual(2);
    //     expect(result.dataProviders).toEqual([defaultSpMock, defaultSpMock]);
    //   });
    //   it('should return a list sort alphabetically of service providers if sort="name" and action="asc"', async () => {
    //     // Setup
    //     const page = '0';
    //     const limit = '10';
    //     const sort = 'name';
    //     const action = 'asc';
    //     // Mocking Items
    //     const itemTest1: ServiceProvider = {
    //       name: 'joker',
    //       ...defaultSpMock,
    //     };
    //     const itemTest2: ServiceProvider = {
    //       name: 'Batman',
    //       ...defaultSpMock,
    //     };
    //     // Mocking return value of dataProviderController.list(page, limit)
    //     const dataProvidersResult = {
    //       items: [itemTest1, itemTest2],
    //       itemCount: 2,
    //       totalItems: 2,
    //       pageCount: 0,
    //       next: '',
    //       previous: '',
    //     };
    //     // Actions
    //     // Mocking the return of the paginate function
    //     dataProviderServiceMock.paginate.mockResolvedValueOnce(
    //       dataProvidersResult,
    //     );
    //     // Calling the list function
    //     const resultat = await dataProviderController.list(
    //       req,
    //       sort,
    //       action,
    //       page,
    //       limit,
    //     );
    //     // Expected
    //     expect(resultat.dataProviders.length).toEqual(2);
    //     expect(resultat.dataProviders).toEqual([itemTest2, itemTest1]);
    //   });
    //   it('should return a list sort reverse-alphabetically of service providers if sort="name" and action="desc"', async () => {
    //     // Setup
    //     const page = '0';
    //     const limit = '10';
    //     const sort = 'name';
    //     const action = 'desc';
    //     // Mocking Items
    //     const itemTest1: ServiceProvider = {
    //       name: 'Batman',
    //       ...defaultSpMock,
    //     };
    //     const itemTest2: ServiceProvider = {
    //       name: 'joker',
    //       ...defaultSpMock,
    //     };
    //     // Mocking return value of dataProviderController.list(page, limit)
    //     const dataProvidersResult = {
    //       items: [itemTest1, itemTest2],
    //       itemCount: 2,
    //       totalItems: 2,
    //       pageCount: 0,
    //       next: '',
    //       previous: '',
    //     };
    //     // Actions
    //     // Mocking the return of the paginate function
    //     dataProviderServiceMock.paginate.mockResolvedValueOnce(
    //       dataProvidersResult,
    //     );
    //     // Calling the list function
    //     const resultat = await dataProviderController.list(
    //       req,
    //       sort,
    //       action,
    //       page,
    //       limit,
    //     );
    //     // Expected
    //     expect(resultat.dataProviders.length).toEqual(2);
    //     expect(resultat.dataProviders).toEqual([itemTest2, itemTest1]);
    //   });
    //   it('should return call paginate with correct params when list', async () => {
    //     // Setup
    //     const page = '0';
    //     const limit = '10';
    //     const sort = 'name';
    //     const action = 'desc';
    //     const search = 'joker';
    //     // Mocking return value of dataProviderController.list(page, limit)
    //     const dataProvidersResult = {
    //       items: [
    //         {
    //           id: itemId,
    //           name: 'joker',
    //           ...defaultSpMock,
    //         },
    //       ],
    //       itemCount: 2,
    //       totalItems: 2,
    //       pageCount: 0,
    //       next: '',
    //       previous: '',
    //     };
    //     dataProviderServiceMock.paginate.mockResolvedValue(
    //       dataProvidersResult,
    //     );
    //     // Calling the list function
    //     await dataProviderController.list(
    //       req,
    //       search,
    //       sort,
    //       action,
    //       page,
    //       limit,
    //     );
    //     expect(dataProviderRepository.count).toHaveBeenCalledTimes(1);
    //     expect(dataProviderServiceMock.paginate).toHaveBeenCalledTimes(1);
    //     expect(dataProviderServiceMock.paginate).toHaveBeenCalledWith({
    //       page: 0,
    //       limit: 10,
    //       route: '/service-provider',
    //       sort,
    //       action,
    //       defaultLimit: 10,
    //       userSearch: search,
    //     });
    //   });
  });
});
