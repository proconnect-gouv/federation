import { Test, TestingModule } from '@nestjs/testing';
import { DataProviderController } from './data-provider.controller';
import { DataProviderService } from './data-provider.service';
import { ObjectID } from 'mongodb';

describe('DataProvider Controller', () => {
  let controller: DataProviderController;
  let service: DataProviderService;

  const dataProviderService = {
    getScopesAndLabels: jest.fn(),
    getScopeAndLabelCount: jest.fn(),
  };

  const scopeLabelsList = [
    {
      id: new ObjectID('5d9c677da8bb151b00720451'),
      scope: 'dgfip_revenu_fiscal_de_reference',
      label: 'Revenu fiscal de référence (DGFIP)',
    },
    {
      id: new ObjectID('5d9c67cda8bd151b00720451'),
      scope: 'dgfip_revenu_fiscal_de_reference',
      label: 'Revenu fiscal de référence (DGFIP)',
    },
    {
      id: new ObjectID('5d9c67cda8bc151b00720451'),
      scope: 'dgfip_revenu_fiscal_de_reference',
      label: 'Revenu fiscal de référence (DGFIP)',
    },
  ];

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [DataProviderController],
      providers: [DataProviderService],
    })
      .overrideProvider(DataProviderService)
      .useValue(dataProviderService)
      .compile();

    controller = module.get<DataProviderController>(DataProviderController);
    service = await module.get<DataProviderService>(DataProviderService);

    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('List method', () => {
    it('should exist', () => {
      expect(controller.list()).toBeDefined();
    });

    it('should return an array of scopeLabels', async () => {
      jest
        .spyOn(service, 'getScopesAndLabels')
        .mockImplementation(() => Promise.resolve(scopeLabelsList));
      jest
        .spyOn(service, 'getScopeAndLabelCount')
        .mockImplementation(() => Promise.resolve(3));

      const result = await controller.list();

      expect(result.scopeLabelsCount).toBeDefined();
      expect(result.scopeLabelsCount).toEqual(scopeLabelsList.length);
      expect(result.scopesAndLabelsList).toBeDefined();
      expect(result.scopesAndLabelsList[0].label).toBe(
        'Revenu fiscal de référence (DGFIP)',
      );
    });
  });
});
