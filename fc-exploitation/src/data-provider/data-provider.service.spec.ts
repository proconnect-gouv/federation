import { Test, TestingModule } from '@nestjs/testing';
import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ObjectID } from 'mongodb';
import { DataProviderService } from './data-provider.service';
import {
  scopeLabelsListMock,
  scopeLabelsRepositoryMock,
  id,
} from './fixture/data-provider.fixtures';
import { ScopeLabels } from './scope-labels.entity';

describe('DataProviderService', () => {
  let service: DataProviderService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([ScopeLabels], 'fc-mongo')],
      providers: [DataProviderService, Repository],
    })
      .overrideProvider(getRepositoryToken(ScopeLabels, 'fc-mongo'))
      .useValue(scopeLabelsRepositoryMock)
      .compile();

    service = module.get<DataProviderService>(DataProviderService);

    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('getScopesAndLabels', () => {
    it('should exist', () => {
      expect(service.getScopesAndLabels).toBeDefined();
    });

    it('shoud return a list of scope labels', async () => {
      // Setup
      const findSpy = jest
        .spyOn(scopeLabelsRepositoryMock, 'find')
        .mockResolvedValue(scopeLabelsListMock);

      // Action
      const result = await service.getScopesAndLabels();

      // Expected
      expect(findSpy).toHaveBeenCalled();
      expect(findSpy).toBeCalledTimes(1);

      expect(result.length).toEqual(3);
      expect(result[0]).toEqual({
        id: new ObjectID('5d9c677da8bb151b00720451'),
        scope: 'dgfip_revenu_fiscal_de_reference',
        label: 'Revenu fiscal de référence (DGFIP)',
      });
    });
  });

  describe('getScopesAndLabel', () => {
    it('should exist', () => {
      expect(service.getScopeAndLabel).toBeDefined();
    });

    it('shoud return a scopeLabel entry', async () => {
      const scopeLabelEntry = {
        id: new ObjectID('5d9c677da8bb151b00720451'),
        scope: 'dgfip_revenu_fiscal_de_reference',
        label: 'Revenu fiscal de référence (DGFIP)',
      };

      // Setup
      const findOneSpy = jest
        .spyOn(scopeLabelsRepositoryMock, 'findOne')
        .mockResolvedValue(scopeLabelEntry);

      // Action
      const result = await service.getScopeAndLabel(id);

      // Expected
      expect(findOneSpy).toBeCalledTimes(1);

      expect(result).toEqual({
        scope: 'dgfip_revenu_fiscal_de_reference',
        label: 'Revenu fiscal de référence',
        fd: 'DGFIP',
      });
    });
  });

  describe('getScopeAndLabelCount method', () => {
    it('should exist', () => {
      expect(service.getScopeAndLabelCount).toBeDefined();
    });

    it('should return the labels count', async () => {
      // Setup
      const countSpy = jest
        .spyOn(scopeLabelsRepositoryMock, 'count')
        .mockResolvedValue(3);

      // Action
      const result = await service.getScopeAndLabelCount();

      // Expected
      expect(countSpy).toBeCalledTimes(1);

      expect(result).toEqual(3);
    });
  });

  describe('createScopesAndLabels', () => {
    let scopeAndLabel;

    beforeEach(() => {
      scopeAndLabel = {
        scope: 'Seldon',
        label: 'Seldon Label',
        fd: 'DGFIP',
      };
    });

    it('should exist', () => {
      expect(service.createScopeAndLabels).toBeDefined();
    });

    it('should create a new label', async () => {
      // Setup
      const saveSpy = jest
        .spyOn(scopeLabelsRepositoryMock, 'save')
        .mockResolvedValue(scopeAndLabel);

      // Action
      const result = await service.createScopeAndLabels(scopeAndLabel);
      // Expected
      expect(saveSpy).toBeCalledTimes(1);
      expect(saveSpy).toBeCalledWith({
        scope: 'Seldon',
        label: 'Seldon Label (DGFIP)',
      });
    });
  });

  describe('updateScopeLabels', () => {
    let scopeAndLabel;

    beforeEach(() => {
      scopeAndLabel = {
        id: new ObjectID('5d9c677da8bb151b00720451'),
        scope: 'Seldon',
        label: 'Seldon Label',
        fd: 'DGFIP',
      };
    });

    it('should be defined', () => {
      expect(service.updateScopeLabels).toBeDefined();
    });

    it('should update the label matching the id param', async () => {
      // Setup
      const findOneSpy = jest
        .spyOn(scopeLabelsRepositoryMock, 'findOne')
        .mockResolvedValue(scopeAndLabel);

      const updatedScopeAndLabel = {
        scope: 'Seldon21',
        label: 'Seldon21 Label',
        fd: 'DGFIP',
      };

      const saveSpy = jest
        .spyOn(scopeLabelsRepositoryMock, 'save')
        .mockResolvedValue(updatedScopeAndLabel);
      // Action
      const result = await service.updateScopeLabels(id, updatedScopeAndLabel);
      // Expected
      expect(findOneSpy).toBeCalledTimes(1);

      expect(saveSpy).toBeCalledTimes(1);

      expect(saveSpy).toBeCalledWith({
        id: new ObjectID('5d9c677da8bb151b00720451'),
        scope: 'Seldon21',
        label: 'Seldon21 Label (DGFIP)',
      });
    });
  });

  describe('DeleteScopesAndLabel method', () => {
    it('should exist', () => {
      expect(service.deleteScopeAndLabel).toBeDefined();
    });
  });
});
