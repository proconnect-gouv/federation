import { ObjectID } from 'mongodb';

import { Test, TestingModule } from '@nestjs/testing';
import { getModelToken } from '@nestjs/mongoose';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';

import { DataProviderService } from './data-provider.service';
import { DataProvider } from './data-provider.mongodb.entity';
import { DataProviderSchema } from './schema/data-provider.schema';

describe('DataProviderService', () => {
  let module: TestingModule;
  let dataProviderService: DataProviderService;

  const secretManagerMocked = {
    encrypt: jest.fn(),
    decrypt: jest.fn(),
    generateSHA256: jest.fn(),
  };

  const secretAdapterMock = {
    generateSecret: jest.fn(),
    generateKey: jest.fn(),
  };

  const dataProviderRepositoryMock = {
    save: jest.fn(),
    insertOne: jest.fn(),
    find: jest.fn(),
    findAndCount: jest.fn(),
    findOne: jest.fn(),
    delete: jest.fn(),
  };

  const userMock = 'userMockValue';

  const dataProviderMock = ({
    id: new ObjectID('5d35b91e70332098440d0f85'),
    uid: '6f21b751-ed06-48b6-a59c-36e1300a368a',
    title: 'dataprovider1',
    active: true,
    client_id: '76eded44d32b40c0cb1006065',
    client_secret:
      '6925fb8143c76eded44d32b40c0cb1006065f7f003de52712b78985704f39950',
    jwks_uri: 'https://monfd.com/jwks',
    secretCreatedAt: new Date(),
    createdAt: new Date(),
    updatedBy: userMock,
    scopes: [],
  } as unknown) as any; // IDataProvider;

  // const expectedDataProviderCreated = {
  //   active: true,
  //   name: 'monfs',
  //   site: ['https://monfs.com'],
  //   client_secret: 'FE1CE803iuyiuyiy',
  //   createdAt: expect.any(Date),
  //   credentialFlow: false,
  //   emails: ['v@b.com'],
  //   entityId: 'secretKeyMocked',
  //   ipAddresses: ['192.0.0.0'],
  //   key: 'secretKeyMocked',
  //   redirectUri: ['https://monfs.com'],
  //   redirectUriLogout: ['https://monfs.com/logout'],
  //   scopes: [],
  //   secretCreatedAt: expect.any(Date),
  //   secretUpdatedAt: expect.any(Date),
  //   secretUpdatedBy: 'user',
  //   trustedIdentity: false,
  //   type: 'private',
  //   updatedAt: expect.any(Date),
  //   updatedBy: 'user',
  // };

  // const expectedDataProviderUpdated = {
  //   active: true,
  //   name: 'monfs',
  //   site: ['https://monfs.com'],
  //   email: 'v@b.com',
  //   IPServerAddressesAndRanges: ['192.0.0.0'],
  //   redirect_uris: ['https://monfs.com'],
  //   post_logout_redirect_uris: ['https://monfs.com/logout'],
  //   scopes: ['openid'],
  //   type: 'private',
  //   updatedAt: expect.any(Date),
  //   updatedBy: 'userMockValue',
  // };

  // const insertResultMock = {
  //   insertedId: 'insertedIdMock',
  //   key: 'keyMock',
  // };

  // const loggerMock = {
  //   businessEvent: jest.fn(),
  // };

  beforeEach(async () => {
    jest.resetAllMocks();

    module = await Test.createTestingModule({
      imports: [],
      providers: [
        DataProviderService,
        {
          provide: getRepositoryToken(DataProvider, 'fc-mongo'),
          useValue: dataProviderRepositoryMock,
        },
        {
          provide: getModelToken('DataProvider'),
          useValue: DataProviderSchema,
        },
      ],
    }).compile();

    dataProviderService = await module.get<DataProviderService>(
      DataProviderService,
    );

    dataProviderRepositoryMock.findOne.mockResolvedValue(dataProviderMock);
    // dataProviderRepository.insertOne.mockResolvedValue(insertResultMock);
  });

  // describe('track', () => {
  //   it('should call logger.businessEvent', () => {
  //     // Given
  //     const logMock = {} as ICrudTrack;
  //     // When
  //     // tslint:disable-next-line:no-string-literal
  //     dataProviderService['track'](logMock);
  //     // Then
  //     expect(loggerMock.businessEvent).toHaveBeenCalledTimes(1);
  //     expect(loggerMock.businessEvent).toHaveBeenCalledWith(logMock);
  //   });
  // });

  describe('dummy', () => {
    it('dummy', () => {
      expect(true).toBeTruthy();
    });
  });

  // describe('createDataProvider', () => {
  //   beforeEach(() => {
  //     // tslint:disable-next-line:no-string-literal
  //     dataProviderService['track'] = jest.fn();
  //     secretAdapterMock.generateKey.mockReturnValue('secretKeyMocked');
  //     secretAdapterMock.generateSecret.mockReturnValueOnce('FE1CE803');
  //     secretManagerMocked.encrypt.mockReturnValueOnce('FE1CE803iuyiuyiy');
  //   });

  //   it('should call the tracking method', async () => {
  //     // When
  //     await dataProviderService.createDataProvider(
  //       dataProviderMock,
  //       userMock,
  //     );

  //     // Then
  //     // tslint:disable-next-line:no-string-literal
  //     expect(dataProviderService['track']).toHaveBeenCalledTimes(1);
  //     // tslint:disable-next-line:no-string-literal
  //     expect(dataProviderService['track']).toHaveBeenCalledWith({
  //       entity: 'data-provider',
  //       action: 'create',
  //       user: userMock,
  //       id: 'insertedIdMock',
  //       name: 'secretKeyMocked',
  //     });
  //   });

  //   it('should call generateKey once if entityId is provide in params', async () => {
  //     // Given
  //     const spMock = {
  //       ...dataProviderMock,
  //       entityId: '12aze3',
  //     };

  //     // When
  //     const _result = await dataProviderService.createDataProvider(
  //       spMock,
  //       'user',
  //     );

  //     // Then
  //     expect(secretAdapterMock.generateKey).toHaveBeenCalledTimes(1);
  //   });

  //   it('should call generateKey twice if entityId is not provide in params', async () => {
  //     // When
  //     const _result = await dataProviderService.createDataProvider(
  //       dataProviderMock,
  //       'user',
  //     );

  //     // Then
  //     expect(secretAdapterMock.generateKey).toHaveBeenCalledTimes(2);
  //   });

  //   it('should call generateSecret method', async () => {
  //     // When
  //     await dataProviderService.createDataProvider(
  //       dataProviderMock,
  //       'user',
  //     );

  //     // Then
  //     expect(secretAdapterMock.generateSecret).toHaveBeenCalledTimes(1);
  //   });

  //   it('should call encrypt method', async () => {
  //     // When
  //     const _result = await dataProviderService.createDataProvider(
  //       dataProviderMock,
  //       'user',
  //     );

  //     // Then
  //     expect(secretManagerMocked.encrypt).toHaveBeenCalledTimes(1);
  //     expect(secretManagerMocked.encrypt).toHaveBeenCalledWith('FE1CE803');
  //   });

  //   // todo: remove this ref to legacy
  //   it('should call transformIntoLegacy method', async () => {
  //     // Given
  //     dataProviderService['transformIntoLegacy'] = jest
  //       .fn()
  //       .mockReturnValue({});

  //     // When
  //     await dataProviderService.createDataProvider(
  //       dataProviderMock,
  //       'user',
  //     );

  //     // Then
  //     expect(
  //       dataProviderService['transformIntoLegacy'],
  //     ).toHaveBeenCalledTimes(1);
  //     expect(
  //       dataProviderService['transformIntoLegacy'],
  //     ).toHaveBeenCalledWith({
  //       key: 'keyMock',
  //       active: true,
  //       emails: ['v@b.com'],
  //       ipAddresses: ['192.0.0.0'],
  //       name: 'monfs',
  //       redirectUri: ['https://monfs.com'],
  //       redirectUriLogout: ['https://monfs.com/logout'],
  //       scopes: [],
  //       site: ['https://monfs.com'],
  //       trustedIdentity: false,
  //       type: 'private',
  //     });
  //   });

  //   it('should call insertOne method', async () => {
  //     // Given
  //     dataProviderService['transformIntoLegacy'] = jest
  //       .fn()
  //       .mockReturnValue(dataProviderMock);

  //     // When
  //     await dataProviderService.createDataProvider(
  //       dataProviderMock,
  //       'user',
  //     );

  //     // Then
  //     expect(dataProviderRepository.insertOne).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.insertOne).toHaveBeenCalledWith(
  //       expectedDataProviderCreated,
  //     );
  //   });
  // });

  // describe('findById', () => {
  //   it("should find a service provider in mongodb and decrypt it's secret", async () => {
  //     // setup
  //     const id = '5d4d6d29bbdfbd203da312f2';
  //     const secretCipher = '<cipher>';
  //     const secret = '◬ La terre est plate ◬';
  //     const dataProvider = {
  //       id: '5d4d6d29bbdfbd203da312f2',
  //       client_secret: secretCipher,
  //     };
  //     dataProviderRepository.findOne.mockResolvedValueOnce(dataProvider);
  //     secretManagerMocked.decrypt.mockReturnValueOnce(secret);

  //     // action
  //     const result = await dataProviderService.findById(id);

  //     // expect
  //     expect(dataProviderRepository.findOne).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.findOne).toHaveBeenCalledWith(id);
  //     expect(secretManagerMocked.decrypt).toHaveBeenCalledTimes(1);
  //     expect(secretManagerMocked.decrypt).toHaveBeenCalledWith(secretCipher);
  //     expect(result).toEqual({
  //       ...dataProvider,
  //       client_secret: secret,
  //     });
  //   });
  // });

  // describe('update()', () => {
  //   const id = '5d4d6d29bbdfbd203da312f2';

  //   beforeEach(() => {
  //     // tslint:disable-next-line:no-string-literal
  //     dataProviderService['track'] = jest.fn();
  //   });

  //   it('should call findOne method to retrieve service provider', async () => {
  //     // action
  //     await dataProviderService.update(id, dataProviderMock, userMock);

  //     // expect
  //     expect(dataProviderRepository.findOne).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.findOne).toHaveBeenCalledWith(id);
  //   });

  //   it('should calls the tracking method', async () => {
  //     // setup
  //     dataProviderRepository.findOne.mockImplementationOnce(() =>
  //       Promise.resolve({
  //         name: 'franceConnect',
  //         redirectUri: ['https://franceConnect.com'],
  //         redirectUriLogout: ['https://franceConnect.com/logout'],
  //         site: 'https://franceConnect.com',
  //         ipAddresses: ['192.0.0.0'],
  //         emails: ['v@b2.com'],
  //         active: true,
  //         type: 'private',
  //         scopes: ['toto', 'tutu'],
  //         trustedIdentity: false,
  //       }),
  //     );

  //     // action
  //     await dataProviderService.update(id, dataProviderMock, userMock);
  //     // assertion
  //     // tslint:disable-next-line:no-string-literal
  //     expect(dataProviderService['track']).toHaveBeenCalledTimes(1);
  //     // tslint:disable-next-line:no-string-literal
  //     expect(dataProviderService['track']).toHaveBeenCalledWith({
  //       entity: 'data-provider',
  //       action: 'update',
  //       id,
  //       user: userMock,
  //     });
  //   });

  //   it('should update service provider', async () => {
  //     // Given
  //     const dataToUpdate = ({
  //       ...dataProviderMock,
  //       id_token_signed_response_alg: 'id_token_signed_response_alg',
  //       userinfo_signed_response_alg: 'userinfo_signed_response_alg',
  //     } as unknown) as IDataProvider;

  //     dataProviderRepository.findOne.mockImplementationOnce(() =>
  //       Promise.resolve({
  //         name: 'proConnect',
  //         redirect_uris: ['https://proConnect.fr'],
  //         post_logout_redirect_uris: ['https://proConnect.fr/logout'],
  //         site: 'https://proConnect.fr',
  //         IPServerAddressesAndRanges: ['192.0.0.0'],
  //         email: ['v@b2.com'],
  //         active: false,
  //         type: 'private',
  //         scopes: ['toto', 'tutu'],
  //         id_token_signed_response_alg: 'id_token_signed_response_alg',
  //         userinfo_signed_response_alg: 'userinfo_signed_response_alg',
  //       }),
  //     );

  //     const expected = {
  //       ...expectedDataProviderUpdated,
  //       id_token_signed_response_alg: 'id_token_signed_response_alg',
  //       userinfo_signed_response_alg: 'userinfo_signed_response_alg',
  //     };

  //     // When
  //     await dataProviderService.update(id, dataToUpdate, userMock);

  //     // Then
  //     expect(dataProviderRepository.save).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.save).toHaveBeenCalledWith(expected);
  //   });
  // });

  // describe('delete service provider by id', () => {
  //   beforeEach(() => {
  //     // tslint:disable-next-line:no-string-literal
  //     dataProviderService['track'] = jest.fn();
  //   });

  //   it('calls the delete function of the dataProviderRepository with a string as argument', async () => {
  //     // set up
  //     const idMock = '123';
  //     // action
  //     await dataProviderService.deleteDataProviderById(idMock, userMock);
  //     // assertion
  //     expect(dataProviderRepository.delete).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.delete).toHaveBeenCalledWith(idMock);
  //   });

  //   it('should call the tracking method', async () => {
  //     // set up
  //     const idMock = '123';

  //     // action
  //     await dataProviderService.deleteDataProviderById(idMock, userMock);
  //     // assertion
  //     // tslint:disable-next-line:no-string-literal
  //     expect(dataProviderService['track']).toHaveBeenCalledTimes(1);
  //     // tslint:disable-next-line:no-string-literal
  //     expect(dataProviderService['track']).toHaveBeenCalledWith({
  //       action: 'delete',
  //       entity: 'data-provider',
  //       id: idMock,
  //       user: userMock,
  //       name: 'keyMock',
  //     });
  //   });
  // });

  // describe('deleteManyDataProvidersById', () => {
  //   it('calls the delete function of the dataProviderRepository with an array of string as argument', async () => {
  //     // set up
  //     const clientsId = ['aaaa', 'bbbb', 'cccc'];
  //     dataProviderService.deleteDataProviderById = jest.fn();
  //     // action
  //     await dataProviderService.deleteManyDataProvidersById(
  //       clientsId,
  //       userMock,
  //     );
  //     // assertion
  //     expect(
  //       dataProviderService.deleteDataProviderById,
  //     ).toHaveBeenCalledTimes(3);
  //     expect(
  //       dataProviderService.deleteDataProviderById,
  //     ).toHaveBeenNthCalledWith(1, clientsId[0], userMock);
  //     expect(
  //       dataProviderService.deleteDataProviderById,
  //     ).toHaveBeenNthCalledWith(2, clientsId[1], userMock);
  //     expect(
  //       dataProviderService.deleteDataProviderById,
  //     ).toHaveBeenNthCalledWith(3, clientsId[2], userMock);
  //   });
  // });

  // describe('generate a new client secret', () => {
  //   it('should generate a new client secret', async () => {
  //     const id = '5d4d6d29bbdfbd203da312f2';

  //     dataProviderRepository.findOne.mockImplementationOnce(() =>
  //       Promise.resolve({
  //         name: 'proConnect',
  //         redirectUri: ['https://proConnect.com'],
  //         redirectUriLogout: ['https://proConnect.com/logout'],
  //         site: 'https://proConnect.com',
  //         ipAddresses: ['192.0.0.0'],
  //         emails: ['v@b2.com'],
  //         active: true,
  //         type: 'private',
  //         key: 'bafe2428-3ab9-4c44-9021-46bde0cd13c5',
  //         client_secret:
  //           '$2b$10$EO3FnI3YKfnnvUlvr084wegEgEPeRPRMdE2VJwMHpAsNkaMv1n9pG',
  //       }),
  //     );

  //     secretManagerMocked.encrypt.mockReturnValueOnce(
  //       '$2b$10$EO3FnI3YKfnnvUlvr084wegEgEPeRPRMdE2VJwMHpAsNkaMv1n9pG',
  //     );

  //     await dataProviderService.generateNewSecret(id, 'user');

  //     expect(secretAdapterMock.generateSecret).toHaveBeenCalledTimes(1);
  //     expect(secretManagerMocked.encrypt).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.findOne).toHaveBeenCalledTimes(1);
  //     expect(dataProviderRepository.save).toHaveBeenCalledTimes(1);
  //   });
  // });
});
