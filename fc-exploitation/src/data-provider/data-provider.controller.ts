import {
  Controller,
  Get,
  Render,
  UseInterceptors,
  Delete,
  Param,
  Req,
  Res,
  Body,
  Post,
  UsePipes,
  ValidationPipe,
  Patch,
} from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { IScopeLabels } from './scope-labels.interface';
import { DataProviderService } from './data-provider.service';

@Controller('data-provider')
export class DataProviderController {
  constructor(private readonly dataProviderService: DataProviderService) {}
  /**
   * Show scope label list
   */
  @Get('label')
  @Roles(UserRole.OPERATOR, UserRole.SECURITY)
  @Render('data-provider/label/list')
  async list(@Req() req) {
    const scopesAndLabelsList = await this.dataProviderService.getScopesAndLabels();
    const scopeLabelsCount = await this.dataProviderService.getScopeAndLabelCount();
    const csrfToken = req.csrfToken();
    return {
      scopeLabelsCount,
      scopesAndLabelsList,
      csrfToken,
    };
  }

  /**
   * Show scope lables creation form
   * @param req
   */
  @Get('label/create')
  @Roles(UserRole.OPERATOR)
  @Render('data-provider/label/creation')
  async showCreateForm(@Req() req) {
    const csrfToken = req.csrfToken();
    return { csrfToken };
  }

  /**
   * Create new label
   * @param scopeAndLabel
   * @param req
   * @param res
   */
  @Post('label/create')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/data-provider/label/create`))
  @UsePipes(
    new ValidationPipe({
      transform: true,
    }),
  )
  async createScopeAndLabels(
    @Body() scopeAndLabel: IScopeLabels,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.dataProviderService.createScopeAndLabels(scopeAndLabel);
    } catch (error) {
      req.flash('globalError', "Impossible d'enregistrer le label");
      req.flash('values', scopeAndLabel);

      return res.redirect(`${res.locals.APP_ROOT}/data-provider/label/create`);
    }
    req.flash(
      'success',
      `Le label ${scopeAndLabel.label} pour le scope ${scopeAndLabel.scope} a été créé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/data-provider/label`);
  }

  /**
   * Show Update form
   * @param req
   */
  @Get('label/update/:id')
  @Roles(UserRole.OPERATOR)
  @Render('data-provider/label/update')
  async showUpdateForm(@Param('id') id: string, @Req() req) {
    const csrfToken = req.csrfToken();
    const {
      scope,
      label,
      fd,
    } = await this.dataProviderService.getScopeAndLabel(id);

    return { csrfToken, scope, label, fd, id };
  }

  /**
   * Update scope label
   * @param scopeAndLabel
   * @param req
   * @param res
   */
  @Patch('label/update/:id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/data-provider/label/update/:id`))
  @UsePipes(
    new ValidationPipe({
      transform: true,
    }),
  )
  async updateScopeAndLabels(
    @Body() scopeAndLabel: IScopeLabels,
    @Param('id') id,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.dataProviderService.updateScopeLabels(id, scopeAndLabel);
    } catch (error) {
      req.flash('globalError', 'Impossible de modifier le label');
      req.flash('values', scopeAndLabel);

      return res.redirect(
        `${res.locals.APP_ROOT}/data-provider/label/update/${id}`,
      );
    }
    req.flash(
      'success',
      `Le label ${scopeAndLabel.label} a été modifié avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/data-provider/label`);
  }

  @Delete('label/list/delete/:id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor('/data-provider/label'))
  async deleteScopeAndLabel(
    @Param('id') id: string,
    @Req() req,
    @Res() res,
    @Body() body,
  ) {
    try {
      await this.dataProviderService.deleteScopeAndLabel(id);
    } catch (error) {
      req.flash('globalError', error.message);
      return res.redirect(`${res.locals.APP_ROOT}/data-provider/label/list`);
    }
    req.flash(
      'success',
      `Le scope ${body.scope}:  ${body.label} a été supprimé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/data-provider/label`);
  }
}
