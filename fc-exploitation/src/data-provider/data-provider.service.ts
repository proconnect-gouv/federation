import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, DeleteResult } from 'typeorm';
import { ScopeLabels } from './scope-labels.entity';
import { IScopeLabels } from './scope-labels.interface';

@Injectable()
export class DataProviderService {
  constructor(
    @InjectRepository(ScopeLabels, 'fc-mongo')
    private readonly scopeLabelsRepository: Repository<ScopeLabels>,
  ) {}
  /**
   * Get scope labels count
   */
  getScopeAndLabelCount() {
    return this.scopeLabelsRepository.count();
  }

  /**
   * Get scope labels list
   */
  getScopesAndLabels(): Promise<ScopeLabels[]> {
    return this.scopeLabelsRepository.find();
  }

  /**
   * Get a scopeLabel with his id
   * @param id
   */
  async getScopeAndLabel(id): Promise<IScopeLabels> {
    const { scope, label: raw } = await this.scopeLabelsRepository.findOne(id);

    const fd = DataProviderService.getFdNameFromLabel(raw);

    /**
     * Get the label whithout fd
     */
    const label = DataProviderService.getLabelFromRaw(raw, fd).trim();

    return {
      scope,
      label,
      fd,
    };
  }

  /**
   * Create new scopeLabels entry
   * @param newScopeAndLabel
   */
  createScopeAndLabels(newScopeAndLabel: IScopeLabels): Promise<ScopeLabels> {
    const scopeLabelToSave = {
      scope: newScopeAndLabel.scope,
      label: `${newScopeAndLabel.label} (${newScopeAndLabel.fd})`,
    };

    return this.scopeLabelsRepository.save(scopeLabelToSave);
  }

  /**
   * Update scopeLabel
   * @param id
   * @param newScopeAndLabel
   */
  async updateScopeLabels(
    id: string,
    newScopeAndLabel: IScopeLabels,
  ): Promise<ScopeLabels> {
    const scopesAndLabel: ScopeLabels = await this.scopeLabelsRepository.findOne(
      id,
    );

    const scopeLabelToUpdate: ScopeLabels = {
      id: scopesAndLabel.id,
      scope: newScopeAndLabel.scope,
      label: `${newScopeAndLabel.label} (${newScopeAndLabel.fd})`,
    };

    return this.scopeLabelsRepository.save(scopeLabelToUpdate);
  }

  deleteScopeAndLabel(id): Promise<DeleteResult> {
    return this.scopeLabelsRepository.delete(id);
  }

  private static getFdNameFromLabel(label): string {
    const regExp = /\(([^()]*)\)/;
    const getFd = regExp.exec(label);
    return getFd[1];
  }

  private static getLabelFromRaw(label, fd): string {
    return label.replace(`(${fd})`, '').trim();
  }
}
