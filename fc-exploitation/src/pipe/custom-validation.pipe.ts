import {
  PipeTransform,
  Injectable,
  ArgumentMetadata,
  HttpStatus,
  HttpException,
} from '@nestjs/common';
import { validate } from 'class-validator';
import { plainToClass } from 'class-transformer';
import { InjectConfig, ConfigService } from 'nestjs-config';
import { CreateServiceProviderIntDto } from '../service-provider/dto/service-provider-input-integration.dto';
import { CreateServiceProviderProdDto } from '../service-provider/dto/service-provider-input-production.dto';

@Injectable()
export class CustomValidationPipe implements PipeTransform<any> {
  constructor(@InjectConfig() private readonly config: ConfigService) {
    this.config = config;
  }
  async transform(value: any, { metatype }: ArgumentMetadata) {
    let dtoToConsume = metatype;

    if (this.config.get('app.isProduction')) {
      dtoToConsume = CreateServiceProviderProdDto;
    } else {
      dtoToConsume = CreateServiceProviderIntDto;
    }
    const object = plainToClass(dtoToConsume, value);
    const errors = await validate(object);

    if (errors.length > 0) {
      throw new HttpException(
        {
          error: 'Input data validation failed',
          message: errors,
        },
        HttpStatus.BAD_REQUEST,
      );
    }
    return object;
  }
}
