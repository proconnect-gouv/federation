import {
  Controller,
  Get,
  Render,
  Post,
  Body,
  UseInterceptors,
  UsePipes,
  ValidationPipe,
  Req,
  Res,
} from '@nestjs/common';
import { ServiceProvider } from './service-provider.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { CreateServiceProviderDto } from './dto/create-service-provider.dto';
import { ServiceProviderService } from './service-provider.service';
import { ICreateServiceProvider } from './interface/create-service-provider.interface';

@Controller('service-provider')
export class ServiceProviderController {
  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository,
    private readonly serviceProviderService: ServiceProviderService,
  ) {}

  @Get()
  @Roles(UserRole.OPERATOR)
  @Render('service-provider/list')
  async list(@Req() req) {
    const serviceProviders = await this.serviceProviderRepository.find();
    const activeServiceProvidersCount = await this.serviceProviderRepository.count(
      { active: true },
    );
    const csrfToken = req.csrfToken();
    return {
      serviceProviders,
      activeServiceProvidersCount,
      csrfToken,
    };
  }

  @Get('/create')
  @Render('service-provider/creation')
  @Roles(UserRole.ADMIN)
  showCreationForm(@Req() req) {
    const csrfToken = req.csrfToken();
    return { csrfToken };
  }

  @Post('create')
  @Roles(UserRole.ADMIN)
  @UseInterceptors(new FormErrorsInterceptor('service-provider/creation'))
  @UsePipes(new ValidationPipe({ transform: true }))
  async createServiceProvider(
    @Body() createServiceProviderDto: CreateServiceProviderDto,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.serviceProviderService.createServiceProvider(this.transformDTO(
        createServiceProviderDto,
      ) as ICreateServiceProvider);
    } catch (error) {
      return res.status(422).render('service-provider/creation', {
        values: createServiceProviderDto,
        globalError: error,
        csrfToken: req.csrfToken(),
      });
    }
    req.flash(
      'success',
      `L'utilisateur ${createServiceProviderDto.name} a été créé avec succès !`,
    );
    return res.redirect('/');
  }

  private transformDTO(createServiceProviderDto: CreateServiceProviderDto) {
    return Object.assign({}, createServiceProviderDto, {
      redirectUri: createServiceProviderDto.redirectUri.result,
      redirectUriLogout: createServiceProviderDto.redirectUriLogout.result,
      emails: createServiceProviderDto.emails.result,
      ipAddresses: createServiceProviderDto.ipAddresses.result,
    });
  }
}
