import {
  Controller,
  Get,
  Render,
  Post,
  Body,
  UseInterceptors,
  UsePipes,
  Req,
  Res,
  Param,
  Query,
  Put,
  ValidationPipe,
} from '@nestjs/common';
import { ServiceProvider } from './service-provider.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { ServiceProviderService } from './service-provider.service';
import { IServiceProvider } from './interface/service-provider.interface';
import { CustomValidationPipe } from '../pipe/custom-validation.pipe';
import { ServiceProviderDTO } from './dto/service-provider-input.dto';
import { Repository } from 'typeorm';

@Controller('service-provider')
export class ServiceProviderController {
  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository: Repository<ServiceProvider>,
    private readonly serviceProviderService: ServiceProviderService,
  ) {}

  @Get()
  @Roles(UserRole.OPERATOR)
  @Render('service-provider/list')
  async list(
    @Req() req,
    @Query('page') pageQuery: string = '0',
    @Query('limit') limitQuery: string = '10',
  ) {
    const activeServiceProvidersCount = await this.serviceProviderRepository.count(
      { active: true },
    );
    const page = parseInt(pageQuery, 10);
    const limit = parseInt(limitQuery, 10);

    const serviceProviders = await this.serviceProviderService.paginate({
      page,
      limit,
      route: '/service-provider',
    });
    const csrfToken = req.csrfToken();
    return {
      pages: serviceProviders.pageCount,
      next: serviceProviders.next,
      previous: serviceProviders.previous,
      serviceProviders: serviceProviders.items,
      activeServiceProvidersCount,
      csrfToken,
    };
  }

  @Get('/create')
  @Render('service-provider/creation')
  @Roles(UserRole.OPERATOR)
  showCreationForm(@Req() req) {
    const csrfToken = req.csrfToken();
    return { csrfToken };
  }

  @Post('create')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor('service-provider/creation'))
  @UsePipes(CustomValidationPipe)
  async createServiceProvider(
    @Body() createServiceProviderDto: ServiceProviderDTO,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.serviceProviderService.createServiceProvider(this.transformDTO(
        createServiceProviderDto,
      ) as IServiceProvider);
    } catch (error) {
      return res.status(400).render('service-provider/creation', {
        values: createServiceProviderDto,
        globalError: error,
        csrfToken: req.csrfToken(),
      });
    }
    req.flash(
      'success',
      `L'utilisateur ${createServiceProviderDto.title} a été créé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/`);
  }

  @Get(':id')
  @Roles(UserRole.OPERATOR)
  @Render('service-provider/update')
  async findOne(@Param('id') id, @Req() req, @Res() res) {
    const csrfToken = req.csrfToken();
    const serviceProvider = await this.serviceProviderService.findById(id);
    return {
      serviceProvider,
      redirectUri: this.AddCarriageReturn(serviceProvider.redirect_uris),
      IPServerAddressesAndRanges: this.AddCarriageReturn(
        serviceProvider.IPServerAddressesAndRanges,
      ),
      post_logout_redirect_uris: this.AddCarriageReturn(
        serviceProvider.post_logout_redirect_uris,
      ),
      emails: this.AddCarriageReturn(serviceProvider.email),
      csrfToken,
    };
  }

  @Post('update/:id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor('service-provider/update'))
  @UsePipes(CustomValidationPipe)
  async serviceProviderUpdate(
    @Body() serviceProviderUpdate: ServiceProviderDTO,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.serviceProviderService.update(
        serviceProviderUpdate.clientId,
        this.transformDTO(serviceProviderUpdate) as IServiceProvider,
      );
    } catch (error) {
      return res.status(400).render(`service-provider/update`, {
        values: serviceProviderUpdate,
        globalError: error,
        csrfToken: req.csrfToken(),
      });
    }
    req.flash(
      'success',
      `Le fournisseur de service ${serviceProviderUpdate.title} a été modifié avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/`);
  }
  private transformDTO(createServiceProviderDto: ServiceProviderDTO) {
    return Object.assign({}, createServiceProviderDto, {
      redirectUri: createServiceProviderDto.redirectUri.result,
      redirectUriLogout: createServiceProviderDto.redirectUriLogout.result,
      emails: createServiceProviderDto.emails.result,
      ipAddresses: createServiceProviderDto.ipAddresses.result,
    });
  }

  private AddCarriageReturn(input: string[]) {
    if (Array.isArray(input)) {
      return input.join('\r\n');
    }
    return input;
  }
}
