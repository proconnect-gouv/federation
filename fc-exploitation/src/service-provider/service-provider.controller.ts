import {
  Controller,
  Get,
  Render,
  Post,
  Body,
  UseInterceptors,
  UsePipes,
  Req,
  Res,
  Param,
  Query,
  Put,
  Delete,
  ValidationPipe,
  Patch,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { ServiceProvider } from './service-provider.mongodb.entity';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { ServiceProviderService } from './service-provider.service';
import { IServiceProvider } from './interface/service-provider.interface';
import { ServiceProviderDto } from './dto/service-provider-input.dto';
import { Repository } from 'typeorm';
import { DeleteServiceProviderDto } from './dto/delete-service-provider.dto';
import { GenerateNewClientSecretDTO } from './dto/generate-new-client-secret.dto';
import { UpdateServiceProviderLogoInputDto } from './dto/update-service-provider-logo-input.dto';
import { DeleteServiceProviderLogoInputDto } from './dto/delete-service-provider-logo-input.dto';
import { IDeleteServiceProvider } from './interface/delete-service-provider.interface';
import { FileStorageService } from '../file-storage/file-storage.service';
import { FileStorage } from '../file-storage/file-storage.mongodb.entity';
import { AlgoName, AlgoValue } from '../enum';

@Controller('service-provider')
export class ServiceProviderController {
  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository: Repository<ServiceProvider>,
    private readonly serviceProviderService: ServiceProviderService,
    private readonly fileStorage: FileStorageService,
  ) {}

  /**
   *
   * @param req
   * @param search
   * @param sort
   * @param action
   * @param pageQuery
   * @param limitQuery
   */
  @Get()
  @Roles(UserRole.OPERATOR, UserRole.SECURITY)
  @Render('service-provider/list')
  async list(
    @Req() req,
    @Query('search') search: string,
    @Query('sort') sort: string,
    @Query('action') action: string,
    @Query('page') pageQuery: string = '1',
    @Query('limit') limitQuery: string = '10',
  ) {
    const activeServiceProvidersCount = await this.serviceProviderRepository.count(
      { active: true },
    );

    const page = parseInt(pageQuery, 10);
    const limit = parseInt(limitQuery, 10);
    const csrfToken = req.csrfToken();
    const userSearch = search;

    const serviceProviders = await this.serviceProviderService.paginate({
      page,
      limit,
      route: '/service-provider',
      sort,
      action,
      defaultLimit: 10,
      userSearch,
    });
    return {
      serviceProviders: serviceProviders.items,
      total: serviceProviders.total,
      activeServiceProvidersCount,
      csrfToken,
      page,
      limit,
      sort,
      action,
      userSearch,
      AlgoName,
      AlgoValue,
    };
  }

  /**
   * Fournit le formulaire de création d'un fournisseur de service
   * @param req
   * @return {string} crsf token
   */
  @Get('create')
  @Render('service-provider/creation')
  @Roles(UserRole.OPERATOR)
  showCreationForm(@Req() req) {
    const csrfToken = req.csrfToken();

    return {
      csrfToken,
      AlgoName,
      AlgoValue,
    };
  }

  /**
   * Récupère les données du formulaire de création d'un fournisseur de service
   * @param createServiceProviderDto
   * @param req
   * @param res
   */
  @Post('create')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/service-provider/create`))
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async createServiceProvider(
    @Body() createServiceProviderDto: ServiceProviderDto,
    @Req() req,
    @Res() res,
  ) {
    try {
      const serviceProvider: IServiceProvider = createServiceProviderDto as IServiceProvider;
      const { logo } = serviceProvider;

      if (!!logo) {
        const file: FileStorage = FileStorageService.fromBase64(logo);
        const uploadResult = await this.fileStorage.storeFile(file);

        // Update the service provider with the logo id to retreive it later
        serviceProvider.logo = uploadResult.filename;
      }
      await this.serviceProviderService.createServiceProvider(
        serviceProvider,
        req.user.username,
      );
    } catch (error) {
      req.flash(
        'globalError',
        "Impossible d'enregistrer le fournisseur de service",
      );
      req.flash('values', createServiceProviderDto);

      return res.redirect(`${res.locals.APP_ROOT}/service-provider/create`);
    }
    req.flash(
      'success',
      `Le fournisseur de service ${createServiceProviderDto.name} a été créé avec succès !`,
    );

    return res.redirect(`${res.locals.APP_ROOT}/`);
  }

  /**
   *  Permet d'afficher la page d'un service-provider à modifier
   * @param id
   * @param req
   * @param res
   */
  @Get(':id')
  @Roles(UserRole.OPERATOR)
  @Render('service-provider/update')
  async findOne(@Param('id') id, @Req() req) {
    const csrfToken = req.csrfToken();

    const serviceProvider = await this.serviceProviderService.findById(id);
    const currentLogo: string = await this.fileStorage.getFileAsDataUri(
      serviceProvider.logo,
    );
    const output = {
      ...serviceProvider,
      signupId: serviceProvider.signup_id,
      redirectUri: this.AddCarriageReturn(serviceProvider.redirect_uris),
      site: this.AddCarriageReturn(serviceProvider.site),
      ipsRanges: this.AddCarriageReturn(
        serviceProvider.IPServerAddressesAndRanges,
      ),
      postLogoutUri: this.AddCarriageReturn(
        serviceProvider.post_logout_redirect_uris,
      ),
      emails: Array.isArray(serviceProvider.email)
        ? this.AddCarriageReturn(serviceProvider.email)
        : this.formatEmailFields(serviceProvider.email),
      currentLogo,
    };

    /**
     * We want to send to the view all the fields that the user
     * has updated if there was an error plus all the fields
     * that were not updated.
     */
    if (req.session.flash && req.session.flash.errors) {
      Object.assign(req.session.flash.values[0], output);
    } else {
      req.flash('values', output);
    }

    return {
      csrfToken,
      id,
      AlgoName,
      AlgoValue,
    };
  }

  /**
   *
   * @param serviceProviderUpdate
   * @param id
   * @param req
   * @param res
   */
  @Patch(':id')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/service-provider/:id`))
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async serviceProviderUpdate(
    @Body() serviceProviderUpdate: ServiceProviderDto,
    @Param('id') id,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.serviceProviderService.update(id, serviceProviderUpdate);
    } catch (error) {
      req.flash('globalError', 'Impossible de mettre à jour le FS');
      return res.redirect(`${res.locals.APP_ROOT}/service-provider/${id}`);
    }
    req.flash(
      'success',
      `Le fournisseur de service ${serviceProviderUpdate.name} a été modifié avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/service-provider/${id}`);
  }

  /**
   * Update only the logo
   * @param logoUpdate
   * @param id
   * @param req
   * @param res
   */
  @Put(':id/logo')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/service-provider/:id`))
  @UsePipes(ValidationPipe)
  async serviceProviderUpdateLogo(
    @Body() logoUpdate: UpdateServiceProviderLogoInputDto,
    @Param('id') id,
    @Req() req,
    @Res() res,
  ) {
    try {
      const { logo, filename } = logoUpdate;

      const file = FileStorageService.fromBase64(logo);
      const uploadResult: any = await this.fileStorage.storeFile(file);

      await this.serviceProviderService.updateLogo(id, uploadResult.filename);

      // Remove the current logo from GridFS if the logo was updated first
      if (filename) {
        await this.fileStorage.deleteFile(filename);
      }
    } catch (error) {
      req.flash('globalError', 'Impossible de mettre à jour le logo');
      return res.redirect(`${res.locals.APP_ROOT}/service-provider/${id}`);
    }
    req.flash('success', `Le logo du fournisseur a été modifié avec succès !`);
    return res.redirect(`${res.locals.APP_ROOT}/service-provider/${id}`);
  }

  /**
   * Delete only the logo
   * @param logoDelete
   * @param id
   * @param req
   * @param res
   * @param logo
   */
  @Delete(':id/logo')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor(`/service-provider/:id`))
  @UsePipes(ValidationPipe)
  async serviceProviderDeleteLogo(
    @Body() logoDelete: DeleteServiceProviderLogoInputDto,
    @Param('id') id,
    @Req() req,
    @Res() res,
  ) {
    try {
      const { filename } = logoDelete;
      // Remove the current logo from the service provider
      await this.serviceProviderService.deleteLogo(id);

      // Remove the logo from GridFS
      await this.fileStorage.deleteFile(filename);
    } catch (error) {
      req.flash('globalError', 'Impossible de supprimer le logo');
      return res.redirect(`${res.locals.APP_ROOT}/service-provider/${id}`);
    }
    req.flash('success', `Le logo du fournisseur a été supprimé avec succès !`);
    return res.redirect(`${res.locals.APP_ROOT}/service-provider/${id}`);
  }

  /**
   *
   * @param key
   * @param req
   * @param res
   * @param body
   */
  @Delete(':key')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(new FormErrorsInterceptor('/service-provider'))
  async deleteServiceProvider(
    @Param('key') key: string,
    @Req() req,
    @Res() res,
    @Body() body,
  ) {
    try {
      await this.serviceProviderService.deleteServiceProviderByKey({
        key,
      });
    } catch (error) {
      req.flash('globalError', error.message);
      return res.status(500);
    }
    req.flash(
      'success',
      `Le fournisseur de service ${body.name} a été supprimé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/service-provider`);
  }

  /**
   *
   * @param deleteServiceProviderDto
   * @param res
   * @param req
   */
  @Post('delete')
  @Roles(UserRole.OPERATOR)
  @UsePipes(new ValidationPipe({ transform: true }))
  @UseInterceptors(new FormErrorsInterceptor('/service-provider'))
  async deleteServiceProviders(
    @Body() deleteServiceProviderDto: DeleteServiceProviderDto,
    @Res() res,
    @Req() req,
  ) {
    try {
      const itemsTodelete: IDeleteServiceProvider[] = [];
      for (const key of deleteServiceProviderDto.deleteItems) {
        itemsTodelete.push({ key });
      }
      await this.serviceProviderService.deleteServiceProviderByKey(
        itemsTodelete,
      );
    } catch (error) {
      req.flash('globalError', error.message);
      return res.status(500);
    }
    req.flash(
      'success',
      `Les fournisseurs de service ${deleteServiceProviderDto.name} ont été supprimés avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/service-provider`);
  }

  /**
   *
   * @param id
   * @param req
   * @param res
   */
  @Get('update/:id/secret')
  @Roles(UserRole.OPERATOR)
  @Render('service-provider/generate-new-client-secret')
  async generateNewSecret(@Param('id') id: string, @Req() req, @Res() res) {
    const csrfToken = req.csrfToken();

    /**
     * If we have an error to flash, we want to render the last user inputs,
     * not the service-provider in database.
     */
    if (req.session.flash && req.session.flash.errors) {
      return {
        csrfToken,
        id,
      };
    }

    const serviceProvider = await this.serviceProviderService.findById(id);
    return {
      csrfToken,
      id,
      messages: {
        values: [serviceProvider],
      },
      AlgoName,
      AlgoValue,
    };
  }

  /**
   *
   * @param id
   * @param generateNewClientSecretDTO
   * @param req
   * @param res
   */
  @Patch('update/:id/secret')
  @Roles(UserRole.OPERATOR)
  @UseInterceptors(
    new FormErrorsInterceptor('/service-provider/update/:id/secret'),
  )
  async generateNewClientSecret(
    @Param('id') id: string,
    @Body() generateNewClientSecretDTO: GenerateNewClientSecretDTO,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.serviceProviderService.generateNewSecret(
        id,
        req.user.username,
      );
    } catch (error) {
      req.flash('gobalError', error);
      return res.status(500);
    }

    req.flash(
      'success',
      `Le nouveau client secret du fournisseur de service ${generateNewClientSecretDTO.name} a été généré avec succés !`,
    );

    return res.redirect(`${res.locals.APP_ROOT}/service-provider`);
  }

  private AddCarriageReturn(input: string[]) {
    if (Array.isArray(input)) {
      return input.join('\r\n');
    }
    return input;
  }

  private formatEmailFields(emails: string): string {
    if (typeof emails !== 'string') {
      return '';
    }
    return emails.replace(/,/g, '\r\n');
  }
}
