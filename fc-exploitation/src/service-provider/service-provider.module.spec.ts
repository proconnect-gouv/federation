import { Test } from '@nestjs/testing';
import { ServiceProviderModule } from './service-provider.module';
import { ServiceProviderService } from './service-provider.service';
import { ServiceProvider } from './service-provider.entity';
import { FileStorage } from '../file-storage/file-storage.entity';
import { FileStorageService } from '../file-storage/file-storage.service';
import { getRepositoryToken } from '@nestjs/typeorm';
import { CustomValidationPipe } from '../pipe/custom-validation.pipe';
import * as generatePassword from 'generate-password';
import * as crypto from 'crypto';
import { SecretManagerService } from './secretManager/secret-manager.service';

describe('ServiceProviderModule', () => {
  const generatePasswordProvider = {
    provide: 'generatePassword',
    useValue: generatePassword,
  };

  const cryptoProvider = {
    provide: 'cryptoProvider',
    useValue: crypto,
  };

  it('loads the ServiceProvider and FileStorage repositories', async () => {
    const module = await Test.createTestingModule({
      imports: [ServiceProviderModule],
      providers: [ServiceProviderService, FileStorageService],
    })
      .overrideProvider(getRepositoryToken(ServiceProvider, 'fc-mongo'))
      .useValue(jest.fn())
      .overrideProvider(ServiceProviderService)
      .useValue(jest.fn())
      .overrideProvider(getRepositoryToken(FileStorage, 'fc-mongo'))
      .useValue(jest.fn())
      .overrideProvider(FileStorageService)
      .useValue(jest.fn())
      .overridePipe(CustomValidationPipe)
      .useValue(jest.fn())
      .overrideProvider(generatePasswordProvider)
      .useValue(jest.fn())
      .overrideProvider(cryptoProvider)
      .useValue(jest.fn())
      .overrideProvider(SecretManagerService)
      .useValue(jest.fn())
      .compile();

    const serviceProviderRepository = module.get(
      getRepositoryToken(ServiceProvider, 'fc-mongo'),
    );

    const fileStorageRepository = module.get(
      getRepositoryToken(FileStorage, 'fc-mongo'),
    );

    expect(serviceProviderRepository).toBeDefined();
    expect(fileStorageRepository).toBeDefined();
  });
});
