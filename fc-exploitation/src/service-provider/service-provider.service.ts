import { Injectable } from '@nestjs/common';
import { ServiceProvider } from './service-provider.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { v4 as uuid } from 'uuid';
import * as bcrypt from 'bcrypt';
import { ICreateServiceProvider } from './interface/create-service-provider.interface';
import { ServiceProviderOutputDTO } from './dto/service-provider-output.dto';
import { PaginationService } from '../pagination/pagination.service';
import { Repository } from 'typeorm';

@Injectable()
export class ServiceProviderService extends PaginationService<ServiceProvider> {
  private readonly SALT_ROUNDS = 10;

  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository: Repository<ServiceProvider>,
  ) {
    super(serviceProviderRepository);
  }

  async createServiceProvider(
    serviceProviderCreation: ICreateServiceProvider,
  ): Promise<ServiceProviderOutputDTO> {
    const key: string = uuid();
    const secretHash: string = await bcrypt.hash(key, this.SALT_ROUNDS);
    return this.serviceProviderRepository.save({
      name: serviceProviderCreation.name,
      redirectUri: serviceProviderCreation.redirectUri,
      redirectUriLogout: serviceProviderCreation.redirectUriLogout,
      site: serviceProviderCreation.site,
      clientStatus: serviceProviderCreation.clientStatus,
      emails: serviceProviderCreation.emails,
      active: 'true',
      ipAddresses: serviceProviderCreation.ipAddresses,
      secret_hash: secretHash,
      secretCreatedAt: new Date(),
      key,
    });
  }
}
