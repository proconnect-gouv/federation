import { Injectable } from '@nestjs/common';
import { ServiceProvider } from './service-provider.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { v4 as uuid } from 'uuid';
import * as bcrypt from 'bcrypt';
import { ICreateServiceProvider } from './interface/create-service-provider.interface';
import { ServiceProviderOutputDTO } from './dto/service-provider-output.dto';

@Injectable()
export class ServiceProviderService {
  private readonly SALT_ROUNDS = 10;

  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository,
  ) {}

  async createServiceProvider(
    serviceProviderCreation: ICreateServiceProvider,
  ): Promise<ServiceProviderOutputDTO> {
    const key: string = uuid();

    const secretHash: string = await bcrypt.hash(key, this.SALT_ROUNDS);

    return this.serviceProviderRepository.save({
      name: serviceProviderCreation.name,
      redirect_uris: serviceProviderCreation.redirectUri,
      post_logout_redirect_uris: serviceProviderCreation.redirectUriLogout,
      site: serviceProviderCreation.site,
      status: serviceProviderCreation.clientStatus,
      email: serviceProviderCreation.emails,
      active: serviceProviderCreation.activateClient,
      IPServerAddressesAndRanges: serviceProviderCreation.ipAddresses,
      secret_hash: secretHash,
      secretCreatedAt: new Date(),
      key,
    });
  }
}
