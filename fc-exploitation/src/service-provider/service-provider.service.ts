import { Model } from 'mongoose';
import { Repository } from 'mongodb';

import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { InjectModel } from '@nestjs/mongoose';

import { IOptions } from '@fc/shared/pagination/interface/options-query-mongodb.interface';
import { LoggerService } from '@fc/shared/logger/logger.service';

import { ICrudTrack } from '../interfaces';
import { SecretManagerService } from '../utils/secret-manager.service';
import { SecretAdapter } from '../utils/secret.adapter';
import { InstanceService } from '../utils/instance.service';

import { ServiceProvider } from './service-provider.mongodb.entity';
import { IServiceProvider } from './interface/service-provider.interface';
import { IServiceProviderOutput } from './interface/service-provider-output-interface';

/*
 * Currently due to a bad structure of the ejs (creation and update),
 * some values ​​are not filled in and set to undefined by default
 * Below is the list of undefined values
 */
const EIDAS_STANDARD_ALGO_VALUE_UNDEFINED = [
  'revocation_endpoint_auth_method',
  'id_token_encrypted_response_alg',
  'id_token_encrypted_response_enc',
  'userinfo_encrypted_response_alg',
  'userinfo_encrypted_response_enc',
];

@Injectable()
export class ServiceProviderService {
  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository: Repository<ServiceProvider>,
    private readonly secretManager: SecretManagerService,
    @InjectModel('Client')
    private readonly clientModel: Model<IServiceProvider>,
    private readonly secretAdapter: SecretAdapter,
    private readonly instanceService: InstanceService,
    private readonly logger: LoggerService,
  ) {}

  private track(log: ICrudTrack) {
    this.logger.businessEvent(log);
  }

  async createServiceProvider(
    serviceProviderCreation: IServiceProvider,
    user: string,
  ) {
    const key: string = await this.secretAdapter.generateKey();

    // generate entityId with HSM if none is provided
    const entityId =
      serviceProviderCreation.entityId ||
      (await this.secretAdapter.generateKey());

    const secret = await this.secretAdapter.generateSecret();

    const clientSecret = await this.secretManager.encrypt(secret);

    const tranformTolegacy = await this.tranformIntoLegacy(
      serviceProviderCreation,
    );

    const now = new Date();

    const isFca = await this.instanceService.isFca();
    if (isFca) {
      EIDAS_STANDARD_ALGO_VALUE_UNDEFINED.forEach(
        elem => (tranformTolegacy[elem] = ''),
      );
    }

    Object.assign(tranformTolegacy, {
      // Set by default
      active: false,
      client_secret: clientSecret,
      secretCreatedAt: now,
      logo: serviceProviderCreation.logo,
      createdAt: now,
      updatedAt: now,
      secretUpdatedAt: now,
      updatedBy: user,
      secretUpdatedBy: user,
      key,
      idpFilterExclude: true,
      idpFilterList: [],
      entityId,
      // DEPRECATED
      credentialFlow: false,
    });

    const saveOperation = await this.serviceProviderRepository.insertOne(
      tranformTolegacy,
    );

    this.track({
      entity: 'service-provider',
      action: 'create',
      user,
      name: key,
      id: saveOperation.insertedId,
    });

    return saveOperation;
  }

  async findById(id: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);
    serviceProvider.client_secret = this.secretManager.decrypt(
      serviceProvider.client_secret,
    );
    return serviceProvider;
  }

  async update(id: string, input, user: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    serviceProvider.name = input.name;
    serviceProvider.signup_id = input.signupId;
    serviceProvider.redirect_uris = input.redirectUri;
    serviceProvider.post_logout_redirect_uris = input.redirectUriLogout;
    serviceProvider.site = input.site;
    serviceProvider.jwks_uri = input.jwksUri;
    serviceProvider.type = input.type;
    serviceProvider.email = input.emails.join('\n');
    serviceProvider.active = input.active;
    serviceProvider.IPServerAddressesAndRanges = input.ipAddresses;
    serviceProvider.updatedAt = new Date();
    serviceProvider.identityConsent = input.identityConsent;
    serviceProvider.trustedIdentity = input.trustedIdentity;
    serviceProvider.eidas = input.eidas;
    serviceProvider.userinfo_encrypted_response_enc =
      input.userinfo_encrypted_response_enc;
    serviceProvider.userinfo_encrypted_response_alg =
      input.userinfo_encrypted_response_alg;
    serviceProvider.userinfo_signed_response_alg =
      input.userinfo_signed_response_alg;
    serviceProvider.id_token_signed_response_alg =
      input.id_token_signed_response_alg;
    serviceProvider.id_token_encrypted_response_alg =
      input.id_token_encrypted_response_alg;
    serviceProvider.id_token_encrypted_response_enc =
      input.id_token_encrypted_response_enc;
    if (input.idpFilterExclude != null) {
      serviceProvider.idpFilterExclude = input.idpFilterExclude;
    }
    if (input.idpFilterList) {
      serviceProvider.idpFilterList = input.idpFilterList;
    }

    const isFca = await this.instanceService.isFca();
    if (isFca) {
      EIDAS_STANDARD_ALGO_VALUE_UNDEFINED.forEach(
        elem => (serviceProvider[elem] = ''),
      );
    }

    /*
     * Since we have "legacy SPs" with no scope at all, we want to describe some rules
     * to update the scopes:
     * - If the user, send scopes (input.scopes) or the SP already has scopes (serviceProvider.scopes)
     * we want at least the scope "openid".
     * - If the user doesn't send scopes but the SP already have scopes, we want at least the scope "openid".
     * - If the user doesn't send scope AND the SP doesn't have scopes, we do not want to update scopes because
     * this SP is legacy and we do not want any filter.
     * - If the user send scope AND the SP doesn't have scopes, we want least the scope "openid".
     */
    if (input.scopes || serviceProvider.scopes) {
      const uniqueScopes = new Set(['openid', ...(input.scopes || [])]);

      serviceProvider.scopes = [...uniqueScopes];
    }

    this.track({
      entity: 'service-provider',
      action: 'update',
      user,
      id,
      name: serviceProvider.key,
    });

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async updateLogo(id: string, name: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    serviceProvider.logo = name;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async deleteLogo(id: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    delete serviceProvider.logo;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  /**
   * Due to multiple bugs in typeorm with mongodb,
   * we have a hard time retrieving multiple sp by id.
   *
   * Dirty debtfull solution: iterate through given ids
   */
  async deleteManyServiceProvidersById(ids: string[], user: string) {
    ids.forEach(id => this.deleteServiceProviderById(id, user));
  }

  async deleteServiceProviderById(id: string, user: string): Promise<boolean> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    await this.serviceProviderRepository.delete(id);

    this.track({
      entity: 'service-provider',
      action: 'delete',
      user,
      id,
      name: serviceProvider.key,
    });

    return serviceProvider;
  }

  async generateNewSecret(
    serviceProviderID: string,
    currentUser: string,
  ): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(
      serviceProviderID,
    );

    const unEncryptedSecret = await this.secretAdapter.generateSecret();

    const newClientSecret = await this.secretManager.encrypt(unEncryptedSecret);

    const pastClientSecret = serviceProvider.client_secret;
    const now = new Date();

    serviceProvider.past_client_secret = pastClientSecret;
    serviceProvider.client_secret = newClientSecret;
    serviceProvider.updatedAt = now;
    serviceProvider.secretUpdatedAt = now;
    serviceProvider.secretUpdatedBy = currentUser;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async paginate(option) {
    const paramaters: IOptions = {
      page: option.page,
      limit: option.limit,
      defaultLimit: option.defaultLimit,
      userSearch: option.userSearch,
    };

    if (option.sort) {
      paramaters.sort = option.sort;
    }

    if (option.action) {
      paramaters.action = option.action;
    }

    return this.clientModel.paginate({}, option.route, paramaters);
  }

  private async tranformIntoLegacy(
    serviceProviderCreation: IServiceProvider,
  ): Promise<IServiceProviderOutput> {
    return {
      title: serviceProviderCreation.name,
      name: serviceProviderCreation.name,
      signup_id: serviceProviderCreation.signupId,
      redirect_uris: serviceProviderCreation.redirectUri,
      post_logout_redirect_uris: serviceProviderCreation.redirectUriLogout,
      site: serviceProviderCreation.site,
      jwks_uri: serviceProviderCreation.jwksUri,
      type: serviceProviderCreation.type,
      email: serviceProviderCreation.emails.join('\n'),
      IPServerAddressesAndRanges: serviceProviderCreation.ipAddresses,
      scopes: serviceProviderCreation.scopes,
      identityConsent: serviceProviderCreation.identityConsent,
      trustedIdentity: serviceProviderCreation.trustedIdentity,
      eidas: serviceProviderCreation.eidas,
      userinfo_encrypted_response_enc:
        serviceProviderCreation.userinfo_encrypted_response_enc,
      userinfo_encrypted_response_alg:
        serviceProviderCreation.userinfo_encrypted_response_alg,
      userinfo_signed_response_alg:
        serviceProviderCreation.userinfo_signed_response_alg,
      id_token_signed_response_alg:
        serviceProviderCreation.id_token_signed_response_alg,
      id_token_encrypted_response_alg:
        serviceProviderCreation.id_token_encrypted_response_alg,
      id_token_encrypted_response_enc:
        serviceProviderCreation.id_token_encrypted_response_enc,
    };
  }
}
