import { Injectable, Logger, Inject } from '@nestjs/common';
import { ServiceProvider } from './service-provider.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { v4 as uuid } from 'uuid';
import { IServiceProvider } from './interface/service-provider.interface';
import { PaginationService } from '@fc/shared/pagination/pagination.service';
import { Repository } from 'typeorm';
import { SecretManagerService } from './secretManager/secret-manager.service';

@Injectable()
export class ServiceProviderService extends PaginationService<ServiceProvider> {
  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository: Repository<ServiceProvider>,
    private readonly secretManager: SecretManagerService,
  ) {
    super(serviceProviderRepository);
  }

  async createServiceProvider(serviceProviderCreation: IServiceProvider) {
    const key: string = uuid();
    const secretHash = await this.secretManager.encrypt(
      await this.secretManager.generateTmpPass(),
    );

    return this.serviceProviderRepository.save({
      name: serviceProviderCreation.name,
      redirect_uris: serviceProviderCreation.redirectUri,
      post_logout_redirect_uris: serviceProviderCreation.redirectUriLogout,
      site: serviceProviderCreation.site,
      type: serviceProviderCreation.type,
      email: serviceProviderCreation.emails,
      logo: serviceProviderCreation.logo,
      // Set by default
      active: false,
      IPServerAddressesAndRanges: serviceProviderCreation.ipAddresses,
      secret_hash: secretHash,
      secretCreatedAt: new Date(),
      key,
    });
  }

  async findById(id: string): Promise<ServiceProvider> {
    return await this.serviceProviderRepository.findOne(id);
  }

  async update(id: string, input): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    serviceProvider.name = input.name;
    serviceProvider.redirect_uris = input.redirectUri;
    serviceProvider.post_logout_redirect_uris = input.redirectUriLogout;
    serviceProvider.site = input.site;
    serviceProvider.type = input.type;
    serviceProvider.email = input.emails;
    serviceProvider.active = input.active === 'true';
    serviceProvider.IPServerAddressesAndRanges = input.ipAddresses;
    serviceProvider.updatedAt = new Date();

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async updateLogo(id: string, name: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    serviceProvider.logo = name;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async deleteLogo(id: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    delete serviceProvider.logo;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async deleteServiceProviderByKey(key): Promise<boolean> {
    return (await this.serviceProviderRepository.delete(key)) ? true : false;
  }

  async generateNewSecret(serviceProviderID: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(
      serviceProviderID,
    );

    const newClientSecret = await this.secretManager.encrypt(
      await this.secretManager.generateTmpPass(),
    );

    serviceProvider.secret_hash = newClientSecret;
    serviceProvider.updatedAt = new Date();
    serviceProvider.secretUpdatedAt = new Date();

    return this.serviceProviderRepository.save(serviceProvider);
  }
}
