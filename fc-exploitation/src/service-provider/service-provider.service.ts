import { Injectable } from '@nestjs/common';
import { ServiceProvider } from './service-provider.mongodb.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { v4 as uuid } from 'uuid';
import { IServiceProvider } from './interface/service-provider.interface';
import { Repository } from 'typeorm';
import { IServiceProviderOutput } from './interface/service-provider-output-interface';
import { SecretManagerService } from '../utils/secret-manager.service';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { IOptions } from '@fc/shared/pagination/interface/options-query-mongodb.interface';

@Injectable()
export class ServiceProviderService {
  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository: Repository<ServiceProvider>,
    private readonly secretManager: SecretManagerService,
    @InjectModel('Client')
    private readonly clientModel: Model<IServiceProvider>,
  ) {}

  async createServiceProvider(
    serviceProviderCreation: IServiceProvider,
    currentUser: string,
  ) {
    const key: string = uuid();
    const clientSecret = await this.secretManager.encrypt(
      await this.secretManager.generateSHA256(),
    );

    const tranformTolegacy = await this.tranformIntoLegacy(
      serviceProviderCreation,
    );

    const now = new Date();

    Object.assign(tranformTolegacy, {
      // Set by default
      active: false,
      client_secret: clientSecret,
      secretCreatedAt: now,
      logo: serviceProviderCreation.logo,
      createdAt: now,
      updatedAt: now,
      secretUpdatedAt: now,
      updatedBy: currentUser,
      secretUpdatedBy: currentUser,
      key,
      // DEPRECATED
      credentialFlow: false,
    });

    return this.serviceProviderRepository.save(tranformTolegacy);
  }

  async findById(id: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);
    serviceProvider.client_secret = this.secretManager.decrypt(
      serviceProvider.client_secret,
    );
    return serviceProvider;
  }

  async update(id: string, input): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    serviceProvider.name = input.name;
    serviceProvider.signup_id = input.signupId;
    serviceProvider.redirect_uris = input.redirectUri;
    serviceProvider.post_logout_redirect_uris = input.redirectUriLogout;
    serviceProvider.site = input.site;
    serviceProvider.type = input.type;
    serviceProvider.email = input.emails;
    serviceProvider.active = input.active;
    serviceProvider.IPServerAddressesAndRanges = input.ipAddresses;
    serviceProvider.updatedAt = new Date();
    serviceProvider.identityConsent = input.identityConsent;
    serviceProvider.trustedIdentity = input.trustedIdentity;
    serviceProvider.eidas = input.eidas;
    serviceProvider.userinfo_encrypted_response_enc =
      input.userinfo_encrypted_response_enc;
    serviceProvider.userinfo_encrypted_response_alg =
      input.userinfo_encrypted_response_alg;
    serviceProvider.userinfo_signed_response_alg =
      input.userinfo_signed_response_alg;
    serviceProvider.id_token_signed_response_alg =
      input.id_token_signed_response_alg;
    serviceProvider.id_token_encrypted_response_alg =
      input.id_token_encrypted_response_alg;
    serviceProvider.id_token_encrypted_response_enc =
      input.id_token_encrypted_response_enc;

    /*
     * Since we have "legacy SPs" with no scope at all, we want to describe some rules
     * to update the scopes:
     * - If the user, send scopes (input.scopes) or the SP already has scopes (serviceProvider.scopes)
     * we want at least the scope "openid".
     * - If the user doesn't send scopes but the SP already have scopes, we want at least the scope "openid".
     * - If the user doesn't send scope AND the SP doesn't have scopes, we do not want to update scopes because
     * this SP is legacy and we do not want any filter.
     * - If the user send scope AND the SP doesn't have scopes, we want least the scope "openid".
     */
    if (input.scopes || serviceProvider.scopes) {
      const uniqueScopes = new Set(['openid', ...(input.scopes || [])]);

      serviceProvider.scopes = [...uniqueScopes];
    }

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async updateLogo(id: string, name: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    serviceProvider.logo = name;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async deleteLogo(id: string): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(id);

    delete serviceProvider.logo;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async deleteServiceProviderByKey(key): Promise<boolean> {
    return (await this.serviceProviderRepository.delete(key)) ? true : false;
  }

  async generateNewSecret(
    serviceProviderID: string,
    currentUser: string,
  ): Promise<ServiceProvider> {
    const serviceProvider = await this.serviceProviderRepository.findOne(
      serviceProviderID,
    );

    const newClientSecret = await this.secretManager.encrypt(
      await this.secretManager.generateSHA256(),
    );

    const pastClientSecret = serviceProvider.client_secret;
    const now = new Date();

    serviceProvider.past_client_secret = pastClientSecret;
    serviceProvider.client_secret = newClientSecret;
    serviceProvider.updatedAt = now;
    serviceProvider.secretUpdatedAt = now;
    serviceProvider.secretUpdatedBy = currentUser;

    return this.serviceProviderRepository.save(serviceProvider);
  }

  async paginate(option) {
    const paramaters: IOptions = {
      page: option.page,
      limit: option.limit,
      defaultLimit: option.defaultLimit,
      userSearch: option.userSearch,
    };

    if (option.sort) {
      paramaters.sort = option.sort;
    }

    if (option.action) {
      paramaters.action = option.action;
    }

    return this.clientModel.paginate({}, option.route, paramaters);
  }

  private async tranformIntoLegacy(
    serviceProviderCreation: IServiceProvider,
  ): Promise<IServiceProviderOutput> {
    return {
      title: serviceProviderCreation.name,
      name: serviceProviderCreation.name,
      signup_id: serviceProviderCreation.signupId,
      redirect_uris: serviceProviderCreation.redirectUri,
      post_logout_redirect_uris: serviceProviderCreation.redirectUriLogout,
      site: serviceProviderCreation.site,
      type: serviceProviderCreation.type,
      email: serviceProviderCreation.emails.toString(),
      IPServerAddressesAndRanges: serviceProviderCreation.ipAddresses,
      scopes: serviceProviderCreation.scopes,
      identityConsent: serviceProviderCreation.identityConsent,
      trustedIdentity: serviceProviderCreation.trustedIdentity,
      eidas: serviceProviderCreation.eidas,
      userinfo_encrypted_response_enc:
        serviceProviderCreation.userinfo_encrypted_response_enc,
      userinfo_encrypted_response_alg:
        serviceProviderCreation.userinfo_encrypted_response_alg,
      userinfo_signed_response_alg:
        serviceProviderCreation.userinfo_signed_response_alg,
      id_token_signed_response_alg:
        serviceProviderCreation.id_token_signed_response_alg,
      id_token_encrypted_response_alg:
        serviceProviderCreation.id_token_encrypted_response_alg,
      id_token_encrypted_response_enc:
        serviceProviderCreation.id_token_encrypted_response_enc,
    };
  }
}
