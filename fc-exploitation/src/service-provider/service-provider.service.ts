import { Injectable } from '@nestjs/common';
import { ServiceProvider } from './service-provider.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { CreateServiceProviderDto } from './dto/create-service-provider.dto';
import { v4 as uuid } from 'uuid';
import * as bcrypt from 'bcrypt';

@Injectable()
export class ServiceProviderService {
  private readonly SALT_ROUNDS = 10;

  constructor(
    @InjectRepository(ServiceProvider, 'fc-mongo')
    private readonly serviceProviderRepository,
  ) {}

  async createServiceProvider(
    serviceProviderCreation: CreateServiceProviderDto,
  ) {
    const key: string = uuid();

    const secretHash = await bcrypt.hash(key, this.SALT_ROUNDS);

    return this.serviceProviderRepository.save({
      name: serviceProviderCreation.name,
      redirect_uris: this.castStringToArray(
        serviceProviderCreation.redirectUri,
      ),
      post_logout_redirect_uris: this.castStringToArray(
        serviceProviderCreation.redirectUriLogout,
      ),
      site: serviceProviderCreation.site,
      status: serviceProviderCreation.clientStatus,
      email: this.castStringToArray(serviceProviderCreation.emails),
      active: serviceProviderCreation.activateClient,
      IPServerAddressesAndRanges: this.castStringToArray(
        serviceProviderCreation.ipAddresses,
      ),
      secret_hash: secretHash,
      secretCreatedAt: new Date(),
      key,
    });
  }

  private castStringToArray(input: string): string[] {
    return input.split('\r\n');
  }
}
