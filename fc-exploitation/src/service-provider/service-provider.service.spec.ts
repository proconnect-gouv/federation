import { Repository } from 'typeorm';
import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { ServiceProviderService } from './service-provider.service';
import { ServiceProvider } from './service-provider.entity';

describe('ServiceProviderService', () => {
  let module: TestingModule;
  let serviceProviderService: ServiceProviderService;

  const serviceProviderRepository = {
    save: jest.fn(),
    findAndCount: jest.fn(),
  };

  const serviceMock = {
    createServiceProvider: jest.fn(),
    paginate: jest.fn(),
    save: jest.fn(),
  };

  beforeEach(async () => {
    module = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([ServiceProvider], 'fc-mongo')],
      providers: [ServiceProviderService, Repository],
    })
      .overrideProvider(getRepositoryToken(ServiceProvider, 'fc-mongo'))
      .useValue(serviceProviderRepository)
      .compile();

    serviceProviderService = await module.get<ServiceProviderService>(
      ServiceProviderService,
    );
    jest.resetAllMocks();
  });

  afterAll(async () => {
    module.close();
  });

  describe('createUser', () => {
    it('creates the user', async () => {
      const IServiceProvider = {
        title: 'monfs',
        name: 'monfs',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        site: 'https://monfs.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        clientStatus: 'private',
      };
      await serviceProviderService.createServiceProvider(IServiceProvider);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });
  });
});
