import { Repository } from 'typeorm';
import { ConfigService } from 'nestjs-config';

import { Test, TestingModule } from '@nestjs/testing';
import { getModelToken } from '@nestjs/mongoose';
import { getRepositoryToken, TypeOrmModule } from '@nestjs/typeorm';
import { LoggerService } from '@fc/shared/logger/logger.service';
import { InstanceService } from '@fc/shared/utils';

import { SecretManagerService } from '../utils/secret-manager.service';
import { SecretAdapter } from '../utils/secret.adapter';

import { ServiceProviderService } from './service-provider.service';
import { ServiceProvider } from './service-provider.mongodb.entity';
import { ClientSchema } from './schema/service-provider.schema';
import { ICrudTrack } from '../interfaces';

describe('ServiceProviderService', () => {
  let module: TestingModule;
  let serviceProviderService: ServiceProviderService;

  const configServiceMock = {
    get: jest.fn(),
  };

  const instanceServiceMock = {
    isFca: jest.fn(),
  };

  const secretManagerMocked = {
    encrypt: jest.fn(),
    decrypt: jest.fn(),
    generateSHA256: jest.fn(),
  };

  const secretAdapterMock = {
    generateSecret: jest.fn(),
    generateKey: jest.fn(),
  };

  const serviceProviderRepository = {
    save: jest.fn(),
    insertOne: jest.fn(),
    find: jest.fn(),
    findAndCount: jest.fn(),
    findOne: jest.fn(),
    delete: jest.fn(),
  };

  const userMock = 'userMockValue';

  const serviceProviderMock = {
    key: 'keyMock',
  };

  const insertResultMock = {
    insertedId: 'insertedIdMock',
    key: 'keyMock',
  };

  const loggerMock = {
    businessEvent: jest.fn(),
  };

  beforeEach(async () => {
    jest.resetAllMocks();

    module = await Test.createTestingModule({
      imports: [TypeOrmModule.forFeature([ServiceProvider], 'fc-mongo')],
      providers: [
        ServiceProviderService,
        {
          provide: getModelToken('Client'),
          useValue: ClientSchema,
        },
        Repository,
        SecretManagerService,
        ConfigService,
        SecretAdapter,
        InstanceService,
        LoggerService,
      ],
    })
      .overrideProvider(getRepositoryToken(ServiceProvider, 'fc-mongo'))
      .useValue(serviceProviderRepository)
      .overrideProvider(SecretManagerService)
      .useValue(secretManagerMocked)
      .overrideProvider(ConfigService)
      .useValue(configServiceMock)
      .overrideProvider(InstanceService)
      .useValue(instanceServiceMock)
      .overrideProvider(SecretAdapter)
      .useValue(secretAdapterMock)
      .overrideProvider(LoggerService)
      .useValue(loggerMock)
      .compile();

    serviceProviderService = await module.get<ServiceProviderService>(
      ServiceProviderService,
    );

    serviceProviderRepository.findOne.mockResolvedValue(serviceProviderMock);
    serviceProviderRepository.insertOne.mockResolvedValue(insertResultMock);
  });

  afterAll(async () => {
    module.close();
  });

  describe('track', () => {
    it('should call logger.businessEvent', () => {
      // Given
      const logMock = {} as ICrudTrack;
      // When
      // tslint:disable-next-line:no-string-literal
      serviceProviderService['track'](logMock);
      // Then
      expect(loggerMock.businessEvent).toHaveBeenCalledTimes(1);
      expect(loggerMock.businessEvent).toHaveBeenCalledWith(logMock);
    });
  });

  describe('createServiceProvider', () => {
    beforeEach(() => {
      // tslint:disable-next-line:no-string-literal
      serviceProviderService['track'] = jest.fn();
    });

    it('creates the service provider', async () => {
      // setup
      const IServiceProvider = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        jwksUri: 'https://monfs.com/jwks',
        site: ['https://monfs.com'],
        ipAddresses: ['192.0.0.0'],
        logo: 'my_logo.png',
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: [],
        identityConsent: true,
        trustedIdentity: false,
        eidas: 1,
        idpFilterExclude: true,
        idpFilterList: [],
      };

      instanceServiceMock.isFca.mockResolvedValue(true);

      // action
      secretManagerMocked.generateSHA256.mockResolvedValueOnce('FE1CE803');
      secretManagerMocked.encrypt.mockResolvedValueOnce('FE1CE803iuyiuyiy');
      await serviceProviderService.createServiceProvider(
        IServiceProvider,
        'user',
      );

      // expect
      expect(secretManagerMocked.encrypt).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.insertOne).toHaveBeenCalledTimes(1);
    });

    it('calls the tracking method', async () => {
      // setup
      const IServiceProvider = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        jwksUri: 'https://monfs.com/jwks',
        site: ['https://monfs.com'],
        ipAddresses: ['192.0.0.0'],
        logo: 'my_logo.png',
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: [],
        identityConsent: true,
        trustedIdentity: false,
        eidas: 1,
        idpFilterExclude: true,
        idpFilterList: [],
      };

      instanceServiceMock.isFca.mockResolvedValue(true);

      secretAdapterMock.generateKey.mockResolvedValueOnce('secretKeyMocked');

      // action
      secretManagerMocked.generateSHA256.mockResolvedValueOnce('FE1CE803');
      secretManagerMocked.encrypt.mockResolvedValueOnce('FE1CE803iuyiuyiy');
      await serviceProviderService.createServiceProvider(
        IServiceProvider,
        userMock,
      );

      // expect
      // tslint:disable-next-line:no-string-literal
      expect(serviceProviderService['track']).toHaveBeenCalledTimes(1);
      // tslint:disable-next-line:no-string-literal
      expect(serviceProviderService['track']).toHaveBeenCalledWith({
        entity: 'service-provider',
        action: 'create',
        user: userMock,
        id: 'insertedIdMock',
        name: 'secretKeyMocked',
      });
    });

    it('creates the service provider with an entityId', async () => {
      // setup
      const IServiceProvider = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        jwksUri: 'https://monfs.com/jwks',
        site: ['https://monfs.com'],
        ipAddresses: ['192.0.0.0'],
        logo: 'my_logo.png',
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: [],
        identityConsent: true,
        trustedIdentity: false,
        eidas: 1,
        entityId: '12aze3',
      };

      const expectedIServiceProvider = {
        name: 'monfs',
        IPServerAddressesAndRanges: ['192.0.0.0'],
        redirect_uris: ['https://monfs.com'],
        post_logout_redirect_uris: ['https://monfs.com/logout'],
        site: ['https://monfs.com'],
        jwks_uri: 'https://monfs.com/jwks',
        logo: 'my_logo.png',
        email: 'v@b.com',
        active: false,
        type: 'private',
        scopes: [],
        claims: [],
        identityConsent: true,
        trustedIdentity: false,
        eidas: 1,
        entityId: '12aze3',
        client_secret: 'FE1CE803iuyiuyiy',
        credentialFlow: false,
        id_token_encrypted_response_alg: undefined,
        id_token_encrypted_response_enc: undefined,
        id_token_signed_response_alg: undefined,
        userinfo_encrypted_response_alg: undefined,
        userinfo_encrypted_response_enc: undefined,
        userinfo_signed_response_alg: undefined,
        idpFilterExclude: true,
        idpFilterList: [],
        key: undefined,
        secretUpdatedBy: 'user',
        signup_id: '123456',
        updatedBy: 'user',
        title: 'monfs',
        updatedAt: expect.any(Date),
        secretCreatedAt: expect.any(Date),
        secretUpdatedAt: expect.any(Date),
        createdAt: expect.any(Date),
      };

      const key = '7a79e45107f9ccc6a3a5971d501220d';
      const secret = secretAdapterMock.generateSecret.mockResolvedValueOnce(
        'FE1CE803',
      );
      secretManagerMocked.encrypt.mockResolvedValueOnce('FE1CE803iuyiuyiy');
      instanceServiceMock.isFca.mockResolvedValue(false);

      // action
      await serviceProviderService.createServiceProvider(
        IServiceProvider,
        'user',
      );

      // expect
      expect(secretAdapterMock.generateSecret).toHaveBeenCalledTimes(1);
      expect(secretAdapterMock.generateKey).toHaveBeenCalledTimes(1);
      expect(secretManagerMocked.encrypt).toHaveBeenCalledTimes(1);
      expect(secretManagerMocked.encrypt).toHaveBeenCalledWith('FE1CE803');
      expect(serviceProviderRepository.insertOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.insertOne).toHaveBeenCalledWith(
        expectedIServiceProvider,
      );
    });
  });

  describe('findById', () => {
    it("should find a service provider in mongodb and decrypt it's secret", async () => {
      // setup
      const id = '5d4d6d29bbdfbd203da312f2';
      const secretCipher = '<cipher>';
      const secret = '◬ La terre est plate ◬';
      const serviceProvider = {
        id: '5d4d6d29bbdfbd203da312f2',
        client_secret: secretCipher,
      };
      serviceProviderRepository.findOne.mockResolvedValueOnce(serviceProvider);
      secretManagerMocked.decrypt.mockReturnValueOnce(secret);

      // action
      const result = await serviceProviderService.findById(id);

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.findOne).toHaveBeenCalledWith(id);
      expect(secretManagerMocked.decrypt).toHaveBeenCalledTimes(1);
      expect(secretManagerMocked.decrypt).toHaveBeenCalledWith(secretCipher);
      expect(result).toEqual({
        ...serviceProvider,
        client_secret: secret,
      });
    });
  });

  describe('update', () => {
    beforeEach(() => {
      // tslint:disable-next-line:no-string-literal
      serviceProviderService['track'] = jest.fn();
    });

    it('should update with all data', async () => {
      // setup
      const dataToUpdate = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        site: 'https://monfs.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: false,
        eidas: 1,
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signup_id: '123456',
          redirect_uris: ['https://franceConnect.com'],
          post_logout_redirect_uris: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          IPServerAddressesAndRanges: ['192.0.0.0'],
          email: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
        }),
      );

      instanceServiceMock.isFca.mockResolvedValue(true);

      // action
      await serviceProviderService.update(id, dataToUpdate, userMock);

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('calls the tracking method', async () => {
      // setup
      const dataToUpdate = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        site: 'https://monfs.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: false,
        eidas: 1,
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signupId: '123456',
          redirectUri: ['https://franceConnect.com'],
          redirectUriLogout: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          ipAddresses: ['192.0.0.0'],
          emails: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
        }),
      );

      instanceServiceMock.isFca.mockResolvedValue(true);

      // action
      await serviceProviderService.update(id, dataToUpdate, userMock);
      // assertion
      // tslint:disable-next-line:no-string-literal
      expect(serviceProviderService['track']).toHaveBeenCalledTimes(1);
      // tslint:disable-next-line:no-string-literal
      expect(serviceProviderService['track']).toHaveBeenCalledWith({
        entity: 'service-provider',
        action: 'update',
        id,
        user: userMock,
      });
    });

    it('should update a document with only arrayLike ( emails, ips, redirectUris and postRedirectUris) as updated data', async () => {
      // setup
      const dataToUpdate = {
        name: 'franceConnect',
        signupId: '123456',
        redirectUri: ['https://toto.com'],
        redirectUriLogout: ['https://toto.com/logout'],
        site: 'https://toto.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: false,
        eidas: 1,
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signup_id: '123456',
          redirect_uris: ['https://franceConnect.com'],
          post_logout_redirect_uris: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          IPServerAddressesAndRanges: ['192.0.0.0'],
          email: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
        }),
      );

      instanceServiceMock.isFca.mockResolvedValue(false);

      // action
      await serviceProviderService.update(id, dataToUpdate, userMock);

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('should update a document with only stringLike (name) as updated data', async () => {
      // setup
      const dataToUpdate = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://franceConnect.com'],
        redirectUriLogout: ['https://franceConnect.com/logout'],
        site: 'https://franceConnect.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: true,
        eidas: 1,
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signup_id: '123456',
          redirect_uris: ['https://franceConnect.com'],
          post_logout_redirect_uris: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          IPServerAddressesAndRanges: ['192.0.0.0'],
          email: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
        }),
      );

      instanceServiceMock.isFca.mockResolvedValue(false);
      // action
      await serviceProviderService.update(id, dataToUpdate, userMock);

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('should update with no signupId, redirectUri, redirectUriLogout, site, ipAddresses, emails', async () => {
      // setup
      const dataToUpdate = {
        name: 'monfs',
        signupId: '',
        redirectUri: [],
        redirectUriLogout: [],
        site: '',
        ipAddresses: [],
        emails: [],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: false,
        eidas: 1,
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signup_id: '123456',
          redirect_uris: ['https://franceConnect.com'],
          post_logout_redirect_uris: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          IPServerAddressesAndRanges: ['192.0.0.0'],
          email: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
        }),
      );

      instanceServiceMock.isFca.mockResolvedValue(false);

      // action
      await serviceProviderService.update(id, dataToUpdate, userMock);

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('should update logo', async () => {
      const dataToUpdate = {
        name: 'franceConnect',
        signupId: '123456',
        redirectUri: ['https://franceConnect.com'],
        redirectUriLogout: ['https://franceConnect.com/logout'],
        site: 'https://franceConnect.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b2.com'],
        active: true,
        type: 'private',
        scopes: ['toto', 'tutu'],
        trustedIdentity: false,
        eidas: 1,
        logo: 'updatedLogoName',
      };

      const expectedSavedSP = {
        name: 'franceConnect',
        signup_id: '123456',
        redirect_uris: ['https://franceConnect.com'],
        post_logout_redirect_uris: ['https://franceConnect.com/logout'],
        site: 'https://franceConnect.com',
        IPServerAddressesAndRanges: ['192.0.0.0'],
        email: ['v@b2.com'],
        active: true,
        type: 'private',
        scopes: ['toto', 'tutu'],
        trustedIdentity: false,
        eidas: 1,
        logo: 'updatedLogoName',
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signup_id: '123456',
          redirect_uris: ['https://franceConnect.com'],
          post_logout_redirect_uris: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          IPServerAddressesAndRanges: ['192.0.0.0'],
          email: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
          logo: 'oldLogoName',
        }),
      );

      await serviceProviderService.updateLogo(id, 'updatedLogoName');

      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledWith(
        expectedSavedSP,
      );
    });

    it('Should update with idpFilterExclude and idpFilterList', async () => {
      // setup
      const dataToUpdateWithBlacklist = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        site: 'https://monfs.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: false,
        eidas: 1,
        idpFilterExclude: true,
        idpFilterList: ['fip1v2'],
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signup_id: '123456',
          redirect_uris: ['https://franceConnect.com'],
          post_logout_redirect_uris: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          IPServerAddressesAndRanges: ['192.0.0.0'],
          email: ['v@b2.com'],
          active: true,
          type: 'private',
          scopes: ['toto', 'tutu'],
          trustedIdentity: false,
          eidas: 1,
          idpFilterExclude: true,
          idpFilterList: [],
        }),
      );

      instanceServiceMock.isFca.mockResolvedValue(false);

      // action
      await serviceProviderService.update(
        id,
        dataToUpdateWithBlacklist,
        userMock,
      );

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('Should update the "emails" as a string where emails are separated by a single "\n"', async () => {
      // setup
      const dataToUpdateWithBlacklist = {
        name: 'monfs',
        signupId: '123456',
        redirectUri: ['https://monfs.com'],
        redirectUriLogout: ['https://monfs.com/logout'],
        site: 'https://monfs.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b.com'],
        active: true,
        type: 'private',
        scopes: ['seldon', 'daneel'],
        trustedIdentity: false,
        eidas: 1,
        idpFilterExclude: true,
        idpFilterList: ['fip1v2'],
      };

      const expectedSavedSP = {
        IPServerAddressesAndRanges: ['192.0.0.0'],
        active: true,
        eidas: 1,
        email: 'v@b.com',
        id_token_encrypted_response_alg: undefined,
        id_token_encrypted_response_enc: undefined,
        id_token_signed_response_alg: undefined,
        identityConsent: undefined,
        idpFilterExclude: true,
        idpFilterList: ['fip1v2'],
        jwks_uri: undefined,
        name: 'monfs',
        post_logout_redirect_uris: ['https://monfs.com/logout'],
        redirect_uris: ['https://monfs.com'],
        scopes: ['openid', 'seldon', 'daneel'],
        signup_id: '123456',
        site: 'https://monfs.com',
        trustedIdentity: false,
        type: 'private',
        updatedAt: expect.any(Date),
        userinfo_encrypted_response_alg: undefined,
        userinfo_encrypted_response_enc: undefined,
        userinfo_signed_response_alg: undefined,
      };

      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockResolvedValueOnce({
        name: 'franceConnect',
        signup_id: '123456',
        redirect_uris: ['https://franceConnect.com'],
        post_logout_redirect_uris: ['https://franceConnect.com/logout'],
        site: 'https://franceConnect.com',
        IPServerAddressesAndRanges: ['192.0.0.0'],
        email: ['v@b2.com'],
        active: true,
        type: 'private',
        scopes: ['toto', 'tutu'],
        trustedIdentity: false,
        eidas: 1,
        idpFilterExclude: true,
        idpFilterList: [],
      });

      instanceServiceMock.isFca.mockResolvedValue(false);

      // action
      await serviceProviderService.update(
        id,
        dataToUpdateWithBlacklist,
        userMock,
      );

      // expect
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledWith(
        expectedSavedSP,
      );
    });
  });

  describe('delete service provider by id', () => {
    beforeEach(() => {
      // tslint:disable-next-line:no-string-literal
      serviceProviderService['track'] = jest.fn();
    });

    it('calls the delete function of the serviceProviderRepository with a string as argument', async () => {
      // set up
      const idMock = '123';
      // action
      await serviceProviderService.deleteServiceProviderById(idMock, userMock);
      // assertion
      expect(serviceProviderRepository.delete).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.delete).toHaveBeenCalledWith(idMock);
    });
    it('calls the tracking method', async () => {
      // set up
      const idMock = '123';

      // action
      await serviceProviderService.deleteServiceProviderById(idMock, userMock);
      // assertion
      // tslint:disable-next-line:no-string-literal
      expect(serviceProviderService['track']).toHaveBeenCalledTimes(1);
      // tslint:disable-next-line:no-string-literal
      expect(serviceProviderService['track']).toHaveBeenCalledWith({
        action: 'delete',
        entity: 'service-provider',
        id: idMock,
        user: userMock,
        name: 'keyMock',
      });
    });
  });

  describe('deleteManyServiceProvidersById', () => {
    it('calls the delete function of the serviceProviderRepository with an array of string as argument', async () => {
      // set up
      const clientsId = ['aaaa', 'bbbb', 'cccc'];
      serviceProviderService.deleteServiceProviderById = jest.fn();
      // action
      await serviceProviderService.deleteManyServiceProvidersById(
        clientsId,
        userMock,
      );
      // assertion
      expect(
        serviceProviderService.deleteServiceProviderById,
      ).toHaveBeenCalledTimes(3);
      expect(
        serviceProviderService.deleteServiceProviderById,
      ).toHaveBeenNthCalledWith(1, clientsId[0], userMock);
      expect(
        serviceProviderService.deleteServiceProviderById,
      ).toHaveBeenNthCalledWith(2, clientsId[1], userMock);
      expect(
        serviceProviderService.deleteServiceProviderById,
      ).toHaveBeenNthCalledWith(3, clientsId[2], userMock);
    });
  });

  describe('generate a new client secret', () => {
    it('should generate a new client secret with hsm', async () => {
      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockImplementationOnce(() =>
        Promise.resolve({
          name: 'franceConnect',
          signupId: '123456',
          redirectUri: ['https://franceConnect.com'],
          redirectUriLogout: ['https://franceConnect.com/logout'],
          site: 'https://franceConnect.com',
          ipAddresses: ['192.0.0.0'],
          emails: ['v@b2.com'],
          active: true,
          type: 'private',
          key: 'bafe2428-3ab9-4c44-9021-46bde0cd13c5',
          client_secret:
            '$2b$10$EO3FnI3YKfnnvUlvr084wegEgEPeRPRMdE2VJwMHpAsNkaMv1n9pG',
          trustedIdentity: false,
          eidas: 1,
        }),
      );

      configServiceMock.get.mockReturnValue({ use_hsm: 'true' });
      secretManagerMocked.encrypt.mockReturnValueOnce(
        '$2b$10$EO3FnI3YKfnnvUlvr084wegEgEPeRPRMdE2VJwMHpAsNkaMv1n9pG',
      );

      await serviceProviderService.generateNewSecret(id, 'user');

      expect(secretAdapterMock.generateSecret).toHaveBeenCalledTimes(1);
      expect(secretManagerMocked.encrypt).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });

    it('should generate a new client secret without hsm', async () => {
      const id = '5d4d6d29bbdfbd203da312f2';

      serviceProviderRepository.findOne.mockResolvedValueOnce({
        name: 'franceConnect',
        signupId: '123456',
        redirectUri: ['https://franceConnect.com'],
        redirectUriLogout: ['https://franceConnect.com/logout'],
        site: 'https://franceConnect.com',
        ipAddresses: ['192.0.0.0'],
        emails: ['v@b2.com'],
        active: true,
        type: 'private',
        key: 'bafe2428-3ab9-4c44-9021-46bde0cd13c5',
        client_secret:
          '$2b$10$EO3FnI3YKfnnvUlvr084wegEgEPeRPRMdE2VJwMHpAsNkaMv1n9pG',
        trustedIdentity: false,
        eidas: 1,
      });

      configServiceMock.get.mockReturnValue({ use_hsm: 'false' });

      await serviceProviderService.generateNewSecret(id, 'user');

      expect(secretAdapterMock.generateSecret).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.findOne).toHaveBeenCalledTimes(1);
      expect(serviceProviderRepository.save).toHaveBeenCalledTimes(1);
    });
  });
});
