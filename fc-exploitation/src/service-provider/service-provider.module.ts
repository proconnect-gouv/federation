import * as crypto from 'crypto';

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { MongooseModule } from '@nestjs/mongoose';
import { RabbitmqModule, RabbitmqService } from '@fc/shared/rabbitmq';
import { InstanceService } from '@fc/shared/utils';

import { FileStorage } from '../file-storage/file-storage.mongodb.entity';
import { IdentityProviderModule } from '../identity-provider';
import { SecretManagerService } from '../utils/secret-manager.service';
import { SecretAdapter } from '../utils/secret.adapter';
import { FileStorageService } from '../file-storage/file-storage.service';
import { ScopesModule } from '../scopes';
import { ClaimsModule } from '../claims';

import { ServiceProviderService } from './service-provider.service';
import { ServiceProviderController } from './service-provider.controller';
import { ServiceProvider } from './service-provider.mongodb.entity';
import { ClientSchema } from './schema/service-provider.schema';

const cryptoProvider = {
  provide: 'cryptoProvider',
  useValue: crypto,
};

@Module({
  imports: [
    TypeOrmModule.forFeature([ServiceProvider, FileStorage], 'fc-mongo'),
    MongooseModule.forFeature([{ name: 'Client', schema: ClientSchema }]),
    RabbitmqModule.registerFor('cryptography'),
    ScopesModule,
    ClaimsModule,
    IdentityProviderModule,
  ],
  controllers: [ServiceProviderController],
  providers: [
    ServiceProviderService,
    SecretManagerService,
    cryptoProvider,
    FileStorageService,
    RabbitmqService,
    SecretAdapter,
    InstanceService,
  ],
})
export class ServiceProviderModule {}
