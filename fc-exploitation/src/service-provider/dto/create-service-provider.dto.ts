import { IsNotEmpty, IsString, Matches, IsUrl } from 'class-validator';
import { Transform, Type } from 'class-transformer';
import { SplitStringDTO } from './split-string.dto';

export class CreateServiceProviderDto {
  @Matches(/^[A-Za-z0-9-]+$/, { message: 'Veuillez renseigner un nom valide' })
  @IsNotEmpty({
    message: `L'url de redirection du fournisseur de service doit être renseigné`,
  })
  @IsString()
  readonly name: string;

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  readonly redirectUri: SplitStringDTO;

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  readonly redirectUriLogout: SplitStringDTO;

  @IsNotEmpty({
    message: `Veuillez renseigner le site du fournisseur de service`,
  })
  @IsString()
  @IsUrl()
  readonly site: string;

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  readonly emails: SplitStringDTO;

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  readonly ipAddresses: SplitStringDTO;

  readonly active: boolean;

  readonly clientStatus: string;
}
