import { IsNotEmpty, Matches, IsArray, IsOptional } from 'class-validator';
import { Transform } from 'class-transformer';
import { linesToArray, toArray } from '@fc/shared/transforms/string.transform';
import { IsDataURI } from '@fc/shared/validators/is-data-uri.validator';
import { IsOptionalExtended } from '@fc/shared/validators/is-optional-extended.validator';
import { IsValidInputString } from '@fc/shared/validators/is-valid-input-string';

// tslint:disable-next-line:max-line-length
// match empty string because of optionals paramters
// impossible to use IsOptionalExtended because of the Transform which always return something
const URL_REGEX = /^(?:((https?:\/\/)?((([^\s\/$.?#]{1,})(\.[^\s\/$?#]{2,})*\.[a-z]{2,})|(([0-9]{1,3}\.){3}[0-9]{1,3})|(([A-Za-z0-9\.\+-]{6,}):(?:\/\/)?(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-_]+)|localhost)(:[0-9]{2,5})?(\/[^\s\/$]+)*\/?)?)$/;

export class CreateServiceProviderProdDto {
  @IsValidInputString({
    message: `Veuillez mettre un nom valide ( Majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
  })
  @IsNotEmpty({
    message: `Le nom du fournisseur de service doit être renseigné`,
  })
  readonly name: string;

  @Transform(linesToArray)
  @Matches(URL_REGEX, {
    each: true,
    message: 'Veuillez mettre une url valide ( Ex: https://toto.com/ )',
  })
  readonly redirectUri: string[];

  @Transform(linesToArray)
  @Matches(URL_REGEX, {
    each: true,
    message: ' Veuillez mettre une url valide ( Ex: https://toto.com/ )',
  })
  readonly redirectUriLogout: string[];

  @Transform(linesToArray)
  @Matches(URL_REGEX, {
    each: true,
    message: ' Veuillez mettre une url valide ( Ex: https://site.com/ )',
  })
  readonly site: string[];

  @Transform(linesToArray)
  @Matches(/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/, {
    each: true,
    message: 'Veuillez mettre des emails valides ( Ex: email@email.com )',
  })
  readonly emails: string[];

  // match empty string because of optionals paramters
  // impossible to use IsOptionalExtended because of the Transform which always return something
  @Transform(linesToArray)
  @Matches(
    /^(?:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])(?::\d{0,5})?)?$/,
    {
      each: true,
      message: 'Veuillez mettre des ips valides ( Ex: 1.1.1.1 )',
    },
  )
  readonly ipAddresses: string[];

  @IsNotEmpty({
    message: 'Veuillez faire un choix',
  })
  readonly active: boolean;

  @IsNotEmpty({
    message: 'Veuillez faire un choix',
  })
  readonly type: string;

  @IsOptionalExtended()
  // Limit of image size 1Mb
  // tslint:disable-next-line: prettier
  @IsDataURI(1048576, 'png|jpe?g|gif|svg\\\+xml', {
    message: "Votre image n'est pas à la bonne taille ou bon format",
  })
  readonly logo: string;

  @IsOptional()
  @Transform(toArray)
  @IsArray()
  readonly scopes: string[];
}
