import 'reflect-metadata';
import { plainToClass } from 'class-transformer';
import { validate } from 'class-validator';

import { ServiceProviderDto } from './service-provider-input.dto';

describe('Service Provider Input (Data Transfer Object)', () => {
  const serviceProvider = {
    name: 'Service Provider Test',
    redirectUri: 'https://localhost/',
    redirectUriLogout: 'https://localhost/',
    site: 'https://localhost/',
    emails: ['toto@gmail.com'],
    ipAddresses: '1.1.1.1',
    active: 'true',
    type: 'private',
    logo: '',
    scopes: ['given_name'],
    claims: ['amr'],
    trustedIdentity: 'false',
  };

  it('should validate if all properties are correct', async () => {
    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      serviceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });

  it('should validate if there are all properties and deprecated', async () => {
    // When
    const serviceProviderWithDeprecated = {
      name: 'Service Provider Test',
      signupId: '123456',
      redirectUri: 'https://localhost/',
      redirectUriLogout: 'https://localhost/',
      site: 'https://localhost/',
      jwksUri: 'https://localhost/',
      emails: ['toto@gmail.com'],
      ipAddresses: '1.1.1.1',
      active: 'true',
      type: 'private',
      logo: '',
      scopes: ['given_name'],
      claims: ['amr'],
      identityConsent: 'true',
      trustedIdentity: 'false',
      eidas: 1,
      ssoDisabled: 'false',
    };

    // Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      serviceProviderWithDeprecated,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });

  it('should validate if service provider type is private and identityConsent is false', async () => {
    const customServiceProvider = {
      ...serviceProvider,
      type: 'public',
      identityConsent: 'false',
    };

    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      customServiceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });

  it('should validate if service provider type is public and identityConsent is false', async () => {
    const customServiceProvider = {
      ...serviceProvider,
      type: 'public',
      identityConsent: 'false',
    };

    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      customServiceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });
});
