import 'reflect-metadata';
import { plainToClass } from 'class-transformer';
import { validate } from 'class-validator';

import { ServiceProviderDto } from './service-provider-input.dto';

describe('Service Provider Input (Data Transfer Object)', () => {
  const serviceProvider = {
    name: 'Service Provider Test',
    signupId: '123456',
    redirectUri: 'https://localhost/',
    redirectUriLogout: 'https://localhost/',
    site: 'https://localhost/',
    jwksUri: 'https://localhost/',
    emails: ['toto@gmail.com'],
    ipAddresses: '1.1.1.1',
    active: 'true',
    type: 'private',
    logo: '',
    scopes: ['given_name'],
    claims: ['amr'],
    identityConsent: 'true',
    trustedIdentity: 'false',
    eidas: 1,
    ssoDisabled: 'false',
  };

  it('should validate if all properties are correct', async () => {
    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      serviceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });

  it('should validate if service provider type is private and identityConsent is false', async () => {
    const customServiceProvider = {
      ...serviceProvider,
      type: 'public',
      identityConsent: 'false',
    };

    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      customServiceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });

  it('should validate if service provider type is public and identityConsent is false', async () => {
    const customServiceProvider = {
      ...serviceProvider,
      type: 'public',
      identityConsent: 'false',
    };

    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      customServiceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([]);
  });

  it('should not validate if service provider type is public and identityConsent is true', async () => {
    const customServiceProvider = {
      ...serviceProvider,
      type: 'public',
      identityConsent: 'true',
    };

    // When | Action
    const serviceProviderToClass = plainToClass(
      ServiceProviderDto,
      customServiceProvider,
    );
    const result = await validate(serviceProviderToClass);

    // Then | Assert
    expect(result).toEqual([
      {
        children: [],
        constraints: {
          ValidateWithConstraint:
            'Vous ne pouvez pas demander un consentement pour un service provider public',
        },
        property: 'identityConsent',
        target: {
          active: true,
          eidas: 1,
          emails: undefined,
          identityConsent: true,
          idpFilterList: [],
          ipAddresses: ['1.1.1.1'],
          jwksUri: 'https://localhost/',
          logo: '',
          name: 'Service Provider Test',
          redirectUri: ['https://localhost/'],
          redirectUriLogout: ['https://localhost/'],
          scopes: ['given_name'],
          claims: ['amr'],
          signupId: '123456',
          site: ['https://localhost/'],
          ssoDisabled: false,
          trustedIdentity: false,
          type: 'public',
        },
        value: true,
      },
    ]);
  });
});
