import { IsNotEmpty, IsString, Matches, IsUrl } from 'class-validator';
import { Transform, Type } from 'class-transformer';
import { SplitStringDTO } from './split-string.dto';

export class CreateServiceProviderIntDto {
  @Matches(/^[A-Za-z0-9- ]+$/, {
    message: `Veuillez mettre un titre valide ( Majuscule, minuscule, nombres et trait d'union )`,
  })
  @IsNotEmpty({
    message: `Le titre du fournisseur de service doit être renseigné`,
  })
  readonly title: string;

  @Matches(/^[A-Za-z0-9- ]+$/, {
    message: `Veuillez mettre un nom valide ( Majuscule, minuscule, nombres et trait d'union )`,
  })
  @IsNotEmpty({
    message: `Le nom du fournisseur de service doit être renseigné`,
  })
  readonly name: string;

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  @Matches(
    /^((https?:\/\/)?((([^\s\/$.?#]{1,})(\.[^\s\/$?#]{2,})*\.[a-z]{2,})|(([0-9]{1,3}\.){3}[0-9]{1,3})|localhost)(:[0-9]{4})?(\/[^\s\/$]+)*\/?)$/,
    {
      each: true,
      message: 'Veuillez mettre une url valide ( Ex: https://toto.com/ )',
    },
  )
  readonly redirectUri: string[];

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  @Matches(
    /^((https?:\/\/)?((([^\s\/$.?#]{1,})(\.[^\s\/$?#]{2,})*\.[a-z]{2,})|(([0-9]{1,3}\.){3}[0-9]{1,3})|localhost)(:[0-9]{2,5})?(\/[^\s\/$]+)*\/?)$/,
    {
      each: true,
      message: ' Veuillez mettre une url valide ( Ex: https://toto.com/ )',
    },
  )
  readonly redirectUriLogout: string[];

  @IsNotEmpty({
    message: `Veuillez renseigner le site du fournisseur de service`,
  })
  @IsString()
  @IsUrl()
  readonly site: string;

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  @Matches(/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/, {
    each: true,
    message: 'Veuillez mettre des emails valides ( Ex: email@email.com )',
  })
  readonly emails: string[];

  @Type(() => SplitStringDTO)
  @Transform(value => SplitStringDTO.toArray(value), {
    toClassOnly: true,
  })
  @Matches(
    /^((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])(?::\d{0,5})?$/,
    {
      each: true,
      message: 'Veuillez mettre des ips valides ( Ex: 1.1.1.1 )',
    },
  )
  readonly ipAddresses: string[];

  @IsNotEmpty({
    message: 'Veuillez faire un choix',
  })
  readonly active: boolean;

  @IsNotEmpty({
    message: 'Veuillez faire un choix',
  })
  readonly type: string;
}
