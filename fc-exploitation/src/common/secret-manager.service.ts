import { Injectable, Inject } from '@nestjs/common';
import { ConfigService, InjectConfig } from 'nestjs-config';

@Injectable()
export class SecretManagerService {
  private readonly SALT_ROUNDS = 10;

  constructor(
    @InjectConfig() private readonly config: ConfigService,
    @Inject('cryptoProvider') private readonly crypto,
  ) {}

  public async encrypt(randomText: string): Promise<string> {
    const salt = await this.generateSHA256();
    const objectToEncrypt = {
      randomText,
      salt,
    };

    const cipher = this.crypto.createCipher(
      'aes-256-cbc',
      this.config.get('app').cypherPass,
    );
    let crypted = cipher.update(JSON.stringify(objectToEncrypt), 'utf8', 'hex');
    crypted += cipher.final('hex');
    return crypted;
  }

  public async generateSHA256(): Promise<string> {
    const length = 256;
    const random = this.crypto.randomBytes(length);

    return this.crypto
      .createHash('sha256')
      .update(random)
      .digest('hex');
  }
}
