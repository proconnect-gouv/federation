import { MongoDriver } from 'typeorm/driver/mongodb/MongoDriver';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { FileStorage } from './file-storage.entity';
import { ObjectID } from 'mongodb';

export class FileStorageService {
  private gridFSBucket;

  constructor(
    @InjectRepository(FileStorage, 'fc-mongo')
    private readonly fileRepository: Repository<FileStorage>,
  ) {
    const mongoDriver = fileRepository.manager.connection.driver as MongoDriver;
    const nativeConnection = mongoDriver.queryRunner.databaseConnection;

    this.gridFSBucket = new mongoDriver.mongodb.GridFSBucket(
      nativeConnection.db('fc'),
    );
  }

  /**
   * Take a file and upload it to GridFS on mongo
   * @param {FileStorage} file   A file as returned by multer memory storage
   * @return {Promise}           Resolved with data uploaded or with error
   */
  async storeFile(file: FileStorage) {
    if (!file) {
      throw new Error("Aucun logo valide n'a été fourni");
    }

    const fileCopy = new FileStorage();

    Object.assign(fileCopy, file);

    fileCopy.originalname = fileCopy.originalname.trim().replace(/\s+/g, '_');
    fileCopy.originalname = `${Date.now()}_${fileCopy.originalname}`;

    const stream = this.gridFSBucket.openUploadStream(fileCopy.originalname, {
      contentType: fileCopy.mimetype,
      metadata: { encoding: fileCopy.encoding },
    });

    const writeFileToGridFS = new Promise((resolve, reject) => {
      stream.end(fileCopy.buffer, (err, data) => {
        if (err) {
          return reject(err);
        }

        return resolve(data);
      });
    });

    return writeFileToGridFS;
  }

  /**
   * Get a file GridFS with its id and return it as dataUri
   * @param {string} filename The id of the file in GridFS
   */
  async getFileAsDataUri(filename: string) {
    const filesInfos = await this.gridFSBucket
      .find({
        filename,
      })
      .toArray();

    if (filesInfos.length !== 1) {
      return undefined;
    }

    const fileInfos = filesInfos[0];

    const stream = this.gridFSBucket.openDownloadStreamByName(filename);
    const fileFromGridFS = new Promise((resolve, reject) => {
      const dataArray = [];

      stream.on('data', data => {
        dataArray.push(data);
      });

      stream.on('end', () => {
        const file = Buffer.concat(dataArray);
        resolve(
          `data:${fileInfos.contentType};base64,${file.toString('base64')}`,
        );
      });

      stream.on('error', error => {
        reject(error);
      });

      stream.read();
    });

    return fileFromGridFS;
  }
}
