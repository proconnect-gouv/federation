import { UserRole } from 'shared/user/roles.enum';
import {
  Body,
  Controller,
  Get,
  Post,
  Render,
  Req,
  Res,
  UseInterceptors,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';
import { UserService } from 'shared/user/user.service';
import { CreateUserDto } from './dto/create-user.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from 'shared/user/user.entity';
import { Roles } from 'shared/authentication/decorator/roles.decorator';
import { FormErrorsInterceptor } from 'shared/form/interceptor/form-errors.interceptor';
import { UserCreation } from 'shared/user/value-object/user-creation';

@Controller('account')
export class AccountController {
  constructor(
    @InjectRepository(User)
    private readonly userRepository,
    private readonly userService: UserService,
  ) {}

  @Get('/create')
  @Render('account/creation')
  @Roles(UserRole.ADMIN)
  showCreationForm() {
    return {};
  }

  @Post('create')
  @Roles(UserRole.ADMIN)
  @UseInterceptors(new FormErrorsInterceptor('account/creation'))
  @UsePipes(ValidationPipe)
  async createUser(
    @Body() createUserDto: CreateUserDto,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.userService.createUser(createUserDto as UserCreation);
    } catch (error) {
      return res.status(422).render('account/creation', {
        values: createUserDto,
        globalError: error,
      });
    }
    req.flash(
      'success',
      `L'utilisateur ${createUserDto.username} a été créé avec succès !`,
    );
    return res.redirect('/');
  }

  @Get()
  @Render('account/list')
  async list() {
    const users = await this.userRepository.find();
    return {
      users,
    };
  }
}
