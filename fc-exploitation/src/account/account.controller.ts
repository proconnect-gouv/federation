import { UserRole } from '@fc/shared/user/roles.enum';
import {
  Body,
  Controller,
  Get,
  Post,
  Delete,
  Render,
  Req,
  Res,
  UseInterceptors,
  UsePipes,
  ValidationPipe,
  ParseUUIDPipe,
  Param,
  Query,
} from '@nestjs/common';
import { UserService } from '@fc/shared/user/user.service';
import { CreateUserDto } from './dto/create-user.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from '@fc/shared/user/user.entity';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { UserCreation } from '@fc/shared/user/value-object/user-creation';
import { AccountService } from './account.service';
import { Pagination } from 'nestjs-typeorm-paginate';

@Controller('account')
export class AccountController {
  constructor(
    @InjectRepository(User)
    private readonly userRepository,
    private readonly userService: UserService,
    private readonly accountService: AccountService,
  ) {}

  @Get('/create')
  @Render('account/creation')
  @Roles(UserRole.ADMIN)
  showCreationForm(@Req() req) {
    const csrfToken = req.csrfToken();
    return { csrfToken };
  }

  @Post('create')
  @Roles(UserRole.ADMIN)
  @UseInterceptors(new FormErrorsInterceptor('account/creation'))
  @UsePipes(ValidationPipe)
  async createUser(
    @Body() createUserDto: CreateUserDto,
    @Req() req,
    @Res() res,
  ) {
    try {
      await this.userService.createUser(createUserDto as UserCreation);
    } catch (error) {
      return res.status(422).render('account/creation', {
        values: createUserDto,
        globalError: error,
        csrfToken: req.csrfToken(),
      });
    }
    req.flash(
      'success',
      `L'utilisateur ${createUserDto.username} a été créé avec succès !`,
    );
    return res.redirect(`${res.locals.APP_ROOT}/account`);
  }

  @Delete(':id')
  @Roles(UserRole.ADMIN)
  async deleteUser(
    @Param('id', new ParseUUIDPipe()) id,
    @Req() req,
    @Res() res,
  ): Promise<any> {
    if (req.user.id !== id) {
      try {
        await this.userService.deleteUserById(id);
        return res.redirect(`${res.locals.APP_ROOT}/account`);
      } catch (error) {
        return res.status(500);
      }
    } else {
      return res.redirect(`${res.locals.APP_ROOT}/account`);
    }
  }

  @Get()
  @Render('account/list')
  async list(
    @Req() req,
    @Query('page') pageQuery: string = '0',
    @Query('limit') limitQuery: string = '10',
  ) {
    // tslint:disable-next-line: radix
    const page = parseInt(pageQuery);
    // tslint:disable-next-line: radix
    const limit = parseInt(limitQuery);

    const csrfToken = req.csrfToken();
    const users: Pagination<User> = await this.accountService.paginate({
      page,
      limit,
      route: '/account',
    });

    return {
      users: users.items,
      totalUsers: users.totalItems,
      pages: users.pageCount,
      next: users.next,
      previous: users.previous,
      csrfToken,
    };
  }
}
