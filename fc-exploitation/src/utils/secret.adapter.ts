import { Injectable } from '@nestjs/common';
import { RabbitmqService } from '@fc/shared/rabbitmq';
import { parseBoolean } from '@fc/shared/transforms/parse-boolean';
import { ConfigService } from 'nestjs-config';
import { SecretManagerService } from './secret-manager.service';

// Command to be executed by consumer
const BROKER_RANDOM_COMMAND = 'CRYPTO_RANDOM';
// Bytes length of generated random string
const RANDOM_LENGTH = 32;
@Injectable()
export class SecretAdapter {
  constructor(
    private readonly broker: RabbitmqService,
    private configService: ConfigService,
    private readonly secretManager: SecretManagerService,
  ) {}

  async generateSecret(): Promise<string> {
    const secret = await this.getSecret();
    const newClientSecret = await this.secretManager.encrypt(secret);
    return newClientSecret;
  }

  private async getSecret(): Promise<string> {
    let secret;
    const brokerConfig = await this.configService.get('cryptography-broker');
    if (parseBoolean(brokerConfig.useHsm)) {
      return (secret = await this.broker.publish(BROKER_RANDOM_COMMAND, {
        length: RANDOM_LENGTH,
      }));
    } else {
      return (secret = await this.secretManager.generateSHA256());
    }
  }
}
