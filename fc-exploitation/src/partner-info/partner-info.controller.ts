import {
  Body,
  Controller,
  Get,
  Post,
  Render,
  Req,
  UseInterceptors,
  ValidationPipe,
  UsePipes,
  Res,
} from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { FormErrorsInterceptor } from '@fc/shared/form/interceptor/form-errors.interceptor';
import { PartnerInfoService } from './partner-info.service';
import { PartnerInfoDTO } from './dto/partner-info.dto';

@Controller('partner-info')
export class PartnerInfoController {
  constructor(private readonly partnerService: PartnerInfoService) {}

  @Get('search')
  @Roles(UserRole.OPERATOR, UserRole.ADMIN)
  @Render('partner-info/search')
  async search() {
    return {};
  }

  @Post('search')
  @Roles(UserRole.OPERATOR, UserRole.ADMIN)
  @UseInterceptors(new FormErrorsInterceptor(`/partner-info/search`))
  @UsePipes(new ValidationPipe({ transform: true }))
  @Render('partner-info/search')
  async searchComplete(
    @Body() partner: PartnerInfoDTO,
    @Req() req,
    @Res() res,
  ) {
    if (partner.email !== '' || partner.key !== '') {
      try {
        const partners = await this.partnerService.getPartner(partner);

        if (partners.length === 0) {
          req.flash('globalError', "Le partenaire n'a pas été trouvé en base");
          return res.redirect(`${res.locals.APP_ROOT}/partner-info/search`);
        }

        return { partners };
      } catch (e) {
        req.flash(
          'globalError',
          'Il y a eu une erreur au nveau de labase de donnée, merci de réessayer',
        );
        return res.redirect(`${res.locals.APP_ROOT}/partner-info/search`);
      }
    } else {
      req.flash('globalError', 'Un email ou une clé doivent être renseignés');
      return {};
    }
  }
}
