import { MongoRepository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { Injectable } from '@nestjs/common';
import { PartnerInfoEntity } from './partner-info.mongodb.entity';
import { PartnerInfoDTO } from './dto/partner-info.dto';
import { IPartnerInfoData } from './interface/partner-info-data.interface';

@Injectable()
export class PartnerInfoService {
  constructor(
    @InjectRepository(PartnerInfoEntity, 'fc-mongo')
    private readonly partnerRepository: MongoRepository<PartnerInfoEntity>,
  ) {}

  async getPartner({
    email = '',
    key = '',
  }: PartnerInfoDTO): Promise<IPartnerInfoData[]> {
    if (email !== '') {
      const searchByEmail = await this.findByEmail(email);
      return this.formatPartners(searchByEmail);
    } else if (key !== '') {
      const searchByKey = await this.findByKey(key);
      return this.formatPartners(searchByKey);
    }
  }

  private formatPartners(
    partners: Array<Partial<PartnerInfoEntity>>,
  ): IPartnerInfoData[] {
    return partners.map(({ email, registerCode, lastConnection, clients }) => {
      return {
        email,
        registerCode,
        lastConnection,
        keys: clients.map(({ key }) => key),
      };
    });
  }

  private async findByEmail(email: string): Promise<PartnerInfoEntity[]> {
    return await this.partnerRepository.find({
      where: { email: new RegExp(email) },
      select: ['email', 'registerCode', 'lastConnection', 'clients'],
    });
  }

  private async findByKey(key: string): Promise<PartnerInfoEntity[]> {
    return await this.partnerRepository.find({
      where: { 'clients.key': key },
      select: ['email', 'registerCode', 'lastConnection', 'clients'],
    });
  }
}
