import {
  Body,
  Controller,
  Patch,
  Req,
  Res,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { RectificationRequestDTO } from '@fc/shared/rnipp/dto/rectification-request.dto';
import { parseBoolean } from '@fc/shared/transforms';
import { CitizenService } from '../citizen/citizen.service';
import { PreferencesService } from './preferences.service';
import { CitizenAccountDTO } from '../citizen/dto/citizen-account.dto';

@Controller('preferences')
export class PreferencesController {
  constructor(
    private citizenService: CitizenService,
    private preferencesService: PreferencesService,
  ) {}

  @Patch('idpPreferences')
  @Roles(UserRole.OPERATOR)
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async patchCitizenIdpPreferences(
    @Body() citizenActiveStateUpdateRequest: RectificationRequestDTO,
    @Req() req,
    @Res() res,
  ) {
    // Security check
    if (!req.totp || req.totp !== 'valid') {
      return res.status(401).send('Code TOTP invalide');
    }

    const identityToUpdate = citizenActiveStateUpdateRequest.toIdentity();

    // Seek citizen informations
    const identityHash: string = this.citizenService.getPivotIdentityHash(
      identityToUpdate,
    );

    const userPreferences = await this.preferencesService.findIdpPreferences(
      identityToUpdate,
    );

    const userIdpSettings = await this.preferencesService.setIdpPreferences(
      citizenActiveStateUpdateRequest,
      identityHash,
      userPreferences,
      req.body.uid,
      parseBoolean(req.body.isChecked),
      req.user.username,
      'idpPreferences',
    );

    return res.json({
      userIdpSettings,
      havePreferencesSettings: true,
    });
  }

  @Patch('futureIdp')
  @Roles(UserRole.OPERATOR)
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async patchFutureIdpPreferences(
    @Body() citizenActiveStateUpdateRequest: RectificationRequestDTO,
    @Req() req,
    @Res() res,
  ) {
    // Security check
    if (!req.totp || req.totp !== 'valid') {
      return res.status(401).send('Code TOTP invalide');
    }

    const identityToUpdate = citizenActiveStateUpdateRequest.toIdentity();

    // Seek citizen informations
    const identityHash: string = this.citizenService.getPivotIdentityHash(
      identityToUpdate,
    );

    const userPreferences = await this.preferencesService.findIdpPreferences(
      identityToUpdate,
    );

    const userIdpSettings = await this.preferencesService.setIdpPreferences(
      citizenActiveStateUpdateRequest,
      identityHash,
      userPreferences,
      req.body.uid,
      parseBoolean(req.body.isChecked),
      req.user.username,
      'futureIdpPreferences',
    );

    return res.json({
      userIdpSettings,
      havePreferencesSettings: true,
    });
  }
}
