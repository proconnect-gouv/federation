import { CitizenServiceBase } from '@fc/shared/citizen/citizen-base.service';
import { LoggerService } from '@fc/shared/logger/logger.service';
import { RectificationRequestDTO } from '@fc/shared/rnipp';
import { UserPreferencesService } from '@fc/shared/user-preferences';
import { Test, TestingModule } from '@nestjs/testing';
import { PreferencesService } from './preferences.service';

describe('PreferencesService', () => {
  let module: TestingModule;
  let service: PreferencesService;

  const loggerProvider = {
    businessEvent: jest.fn(),
  };

  const brokerMock = {
    publish: jest.fn(),
  };

  const brokerMockResponse = {
    allowFutureIdp: false,
    idpList: [
      {
        uid: 'idp_uid',
        name: 'idp',
        image: 'idp.png',
        title: 'IDP',
        active: true,
        isChecked: true,
      },
      {
        uid: 'idp_uid',
        name: 'idp',
        image: 'idp.png',
        title: 'IDP',
        active: true,
        isChecked: true,
      },
    ],
  };

  const identityOidc = {
    gender: 'gender',
    family_name: 'familyName',
    preferred_username: 'preferredUsername',
    given_name: 'givenName',
    birthdate: 'birthdate',
    birthcountry: '99100',
    birthplace: '75107',
  };

  const identity = ({
    supportId: '123',
    givenName: 'givenName',
    familyName: 'familyName',
    birthdate: 'birthdate',
    gender: 'gender',
    preferredUsername: '',
    isFrench: true,
    cog: '75107',
    toIdentity: jest.fn(),
    toOidc: () => identityOidc,
  } as unknown) as RectificationRequestDTO;

  const idpList = [
    {
      uid: 'uid1',
      name: 'idp',
      image: 'idp.png',
      title: 'IDP',
      active: true,
      isChecked: true,
    },
    {
      uid: 'uid2',
      name: 'idp',
      image: 'idp.png',
      title: 'IDP',
      active: true,
      isChecked: true,
    },
    {
      uid: 'uid2',
      name: 'idp',
      image: 'idp.png',
      title: 'IDP',
      active: true,
      isChecked: false,
    },
    {
      uid: 'uid3',
      name: 'idp',
      image: 'idp.png',
      title: 'IDP',
      active: true,
      isChecked: false,
    },
  ];

  const allowFutureIdp = false;
  const preferences = { allowFutureIdp, idpList };
  const hash = '5d4d6d29bbdfbd203da312f2';
  const user = {
    username: 'Toto',
  };

  const loggerData = new Map();
  loggerData.set('identityHash', 'identityHash');
  loggerData.set('user', 'user');
  loggerData.set('supportId', 'supportId');

  const CitizenServiceBaseMock = {
    getPivotIdentityHash: jest.fn(),
    generateLegacyAccountId: jest.fn(),
    generateOIDCIdentity: jest.fn(),
    rectifyIfPartialBirthdate: jest.fn(),
  };

  beforeEach(async () => {
    jest.resetAllMocks();
    jest.restoreAllMocks();

    module = await Test.createTestingModule({
      providers: [
        PreferencesService,
        LoggerService,
        UserPreferencesService,
        CitizenServiceBase,
      ],
    })
      .overrideProvider(LoggerService)
      .useValue(loggerProvider)
      .overrideProvider(UserPreferencesService)
      .useValue(brokerMock)
      .overrideProvider(CitizenServiceBase)
      .useValue(CitizenServiceBaseMock)
      .compile();

    service = module.get<PreferencesService>(PreferencesService);
  });

  describe('createPayload', () => {
    it('should create teh right payload if target is idpPreferences', () => {
      // Given
      const target = 'idpPreferences';
      const expected = {
        identity: identityOidc,
        idpSettings: {
          allowFutureIdp: false,
          idpList: ['uid1', 'uid2'],
        },
      };
      // When
      /* tslint:disable:no-string-literal */
      const result = service['createPayload'](
        {
          identity: identityOidc,
          preferences,
          uid: 'uid1',
          isChecked: false,
        },
        target,
      );
      // Then
      expect(result).toStrictEqual(expected);
    });

    it('should create the right payload if target is futureIdpPreferences had to be autorized', () => {
      // Given
      const target = 'futureIdpPreferences';

      const expected = {
        identity: identityOidc,
        idpSettings: {
          allowFutureIdp: true,
          idpList: ['uid1', 'uid2'],
        },
      };

      // When
      /* tslint:disable:no-string-literal */
      const result = service['createPayload'](
        {
          identity: identityOidc,
          preferences,
          uid: '',
          isChecked: false,
        },
        target,
      );
      // Then
      expect(result).toStrictEqual(expected);
    });

    it('should create the right payload if target is futureIdpPreferences had to be blocked', () => {
      // Given
      const target = 'futureIdpPreferences';

      const expected = {
        identity: identityOidc,
        idpSettings: {
          allowFutureIdp: false,
          idpList: ['uid1', 'uid2'],
        },
      };
      preferences.allowFutureIdp = true;
      // When
      /* tslint:disable:no-string-literal */
      const result = service['createPayload'](
        {
          identity: identityOidc,
          preferences,
          uid: '',
          isChecked: false,
        },
        target,
      );
      // Then
      expect(result).toStrictEqual(expected);
    });
  });

  describe('setIdpPreferences', () => {
    it('should modify the idp preferences', async () => {
      // Given
      brokerMock.publish.mockReturnValueOnce({
        allowFutureIdp: false,
        idpList: [
          {
            uid: 'uid1',
            name: 'impot_gouv',
            image: 'fi-impots.png',
            title: 'Impots.Gouv.fr',
            active: true,
            isChecked: false,
          },
          {
            uid: 'uid2',
            name: 'ameli',
            image: 'fi-ameli.png',
            title: 'Ameli.fr',
            active: true,
            isChecked: true,
          },
        ],
      });
      // When
      const result = await service.setIdpPreferences(
        identity,
        hash,
        preferences,
        'uid1',
        false,
        user.username,
        'idpPreferences',
      );

      // Then
      expect(brokerMock.publish).toHaveBeenCalledTimes(1);
      expect(loggerProvider.businessEvent).toHaveBeenCalledTimes(1);
      expect(result).toStrictEqual({
        allowFutureIdp: false,
        idpList: [
          {
            uid: 'uid1',
            name: 'impot_gouv',
            image: 'fi-impots.png',
            title: 'Impots.Gouv.fr',
            active: true,
            isChecked: false,
          },
          {
            uid: 'uid2',
            name: 'ameli',
            image: 'fi-ameli.png',
            title: 'Ameli.fr',
            active: true,
            isChecked: true,
          },
        ],
      });
    });

    it('should modify the future idp preferences', async () => {
      // Given
      brokerMock.publish.mockReturnValueOnce({
        allowFutureIdp: true,
        idpList: [
          {
            uid: 'uid1',
            name: 'impot_gouv',
            image: 'fi-impots.png',
            title: 'Impots.Gouv.fr',
            active: true,
            isChecked: true,
          },
          {
            uid: 'uid2',
            name: 'ameli',
            image: 'fi-ameli.png',
            title: 'Ameli.fr',
            active: true,
            isChecked: true,
          },
        ],
      });
      // When
      const result = await service.setIdpPreferences(
        identity,
        hash,
        preferences,
        'uid1',
        true,
        user.username,
        'futureIdpPreferences',
      );

      // Then
      expect(brokerMock.publish).toHaveBeenCalledTimes(1);
      expect(loggerProvider.businessEvent).toHaveBeenCalledTimes(1);
      expect(result).toStrictEqual({
        allowFutureIdp: true,
        idpList: [
          {
            uid: 'uid1',
            name: 'impot_gouv',
            image: 'fi-impots.png',
            title: 'Impots.Gouv.fr',
            active: true,
            isChecked: true,
          },
          {
            uid: 'uid2',
            name: 'ameli',
            image: 'fi-ameli.png',
            title: 'Ameli.fr',
            active: true,
            isChecked: true,
          },
        ],
      });
    });
  });

  describe('findIdpPreferences', () => {
    it('should call CitizenServiceBaseMock.rectifyIfPartialBirthdate', async () => {
      // Given
      const userIdentity = {
        givenName: 'givenName',
        familyName: 'familyName',
        birthdate: 'birthdate',
        gender: 'gender',
        preferred_username: 'preferredUsername',
        birthCountry: 'birthCountry',
        birthPlace: 'birthPlace',
      };

      // When
      const result = await service.findIdpPreferences(userIdentity);

      // Then
      expect(
        CitizenServiceBaseMock.rectifyIfPartialBirthdate,
      ).toHaveBeenCalledTimes(1);
      expect(
        CitizenServiceBaseMock.rectifyIfPartialBirthdate,
      ).toHaveBeenCalledWith(userIdentity.birthdate);
    });

    it('should call CitizenServiceBaseMock.generateOIDCIdentity', async () => {
      // Given
      brokerMock.publish.mockResolvedValue(brokerMockResponse);
      const userIdentity = {
        givenName: 'givenName',
        familyName: 'familyName',
        birthdate: 'birthdate',
        gender: 'gender',
        preferred_username: 'preferredUsername',
        birthCountry: 'birthCountry',
        birthPlace: 'birthPlace',
      };
      const rectifiedBirthdate = 'return-value-mock';
      CitizenServiceBaseMock.rectifyIfPartialBirthdate.mockReturnValue(
        rectifiedBirthdate,
      );

      // When
      const result = await service.findIdpPreferences(userIdentity);

      // Then
      expect(CitizenServiceBaseMock.generateOIDCIdentity).toHaveBeenCalledTimes(
        1,
      );
      expect(CitizenServiceBaseMock.generateOIDCIdentity).toHaveBeenCalledWith({
        ...userIdentity,
        birthdate: rectifiedBirthdate,
      });
    });

    it('should get a user idp setting', async () => {
      // Given
      const expected = {
        allowFutureIdp: false,
        idpList: [
          {
            uid: 'idp_uid',
            name: 'idp',
            image: 'idp.png',
            title: 'IDP',
            active: true,
            isChecked: true,
          },
          {
            uid: 'idp_uid',
            name: 'idp',
            image: 'idp.png',
            title: 'IDP',
            active: true,
            isChecked: true,
          },
        ],
      };

      const userIdentity = {
        givenName: 'givenName',
        familyName: 'familyName',
        birthdate: 'birthdate',
        gender: 'gender',
        preferred_username: 'preferredUsername',
        birthCountry: 'birthCountry',
        birthPlace: 'birthPlace',
      };
      brokerMock.publish.mockResolvedValue(brokerMockResponse);

      // When
      const result = await service.findIdpPreferences(userIdentity);

      // Then
      expect(brokerMock.publish).toHaveBeenCalledTimes(1);
      expect(result).toStrictEqual(expected);
    });
  });
});
