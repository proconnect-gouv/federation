import {
  Body,
  Controller,
  Get,
  HttpException,
  HttpStatus,
  Post,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';
import { Roles } from '@fc/shared/authentication/decorator/roles.decorator';
import { UserRole } from '@fc/shared/user/roles.enum';
import { CitizenService } from './citizen.service';
import { CitizenIdentityDTO } from './dto/citizen-identity.dto';

@Controller('citizen')
export class CitizenController {
  constructor(private readonly citizenService: CitizenService) {}

  @Post()
  @Roles(UserRole.OPERATOR)
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async getCitizenStatus(@Body() citizenIdentity: CitizenIdentityDTO) {
    const citizenHash: string = this.citizenService.getCitizenHash(
      citizenIdentity,
    );
    const citizenAccount = await this.citizenService.findByHash(citizenHash);

    if (!citizenAccount) {
      throw new HttpException('Not found', HttpStatus.NOT_FOUND);
    }

    return {
      active: citizenAccount.active,
      lastConnection: new Date(citizenAccount.updatedAt).toISOString(),
    };
  }
}
