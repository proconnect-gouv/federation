import { Injectable, Logger, Inject } from '@nestjs/common';
import { Citizen } from './citizen.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CitizenIdentityDTO } from './dto/citizen-identity.dto';

@Injectable()
export class CitizenService {
  constructor(
    @InjectRepository(Citizen, 'fc-mongo')
    private readonly citizenRepository: Repository<Citizen>,
    @Inject('cryptoProvider') private readonly crypto,
  ) {}

  async findByHash(hash: string) {
    const account = await this.citizenRepository.findOne({
      identityHash: hash,
    });

    if (account) {
      return account as Citizen;
    }

    return false;
  }

  getCitizenHash(citizen: CitizenIdentityDTO): string {
    const data = [
      citizen.givenName,
      citizen.familyName,
      citizen.birthdate
        .toISOString()
        .split('T')
        .shift(),
      citizen.gender,
      citizen.birthPlace,
      citizen.birthCountry,
    ].join('');

    return this.crypto
      .createHash('sha256')
      .update(data, 'binary')
      .digest('base64');
  }
}
