import { Injectable, Logger, Inject } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Citizen } from './citizen.mongodb.entity';
import { CitizenAccountDTO } from './dto/citizen-account.dto';
import { CitizenServiceBase } from '@fc/shared/citizen/citizen-base.service';
import { LogActions } from '@fc/shared/logger/enum/log-actions.enum';
import { TraceService } from '@fc/shared/logger/trace.service';
import { IIdentity } from '@fc/shared/citizen/interfaces/identity.interface';

@Injectable()
export class CitizenService extends CitizenServiceBase {
  constructor(
    @InjectRepository(Citizen, 'fc-mongo')
    private readonly citizenRepository: Repository<Citizen>,
    @Inject('cryptoProvider') crypto,
    private readonly logger: TraceService,
  ) {
    super(crypto);
  }

  async findByHash(hash: string): Promise<Citizen> {
    return await this.citizenRepository.findOne({
      identityHash: hash,
    });
  }

  async setActive(identityHash, active, supportId: string, user) {
    const citizen: Citizen = await this.findByHash(identityHash);
    this.logger.supportUserAcountStatus({
      action: !active
        ? LogActions.DESACTIVATE_ACCOUNT
        : LogActions.ACTIVATE_ACCOUNT,
      user: user.username,
      reason: `ticket support : ${supportId}`,
      identityHash,
    });

    return this.citizenRepository.save({ ...citizen, active });
  }

  async createBlockedCitizen(
    citizenIdentity: IIdentity,
    supportId: string,
    user,
  ) {
    const identityHash = this.getPivotIdentityHash(citizenIdentity);
    const id = this.generateLegacyAccountId();
    const active = false;

    const newCitizen: CitizenAccountDTO = {
      id,
      active,
      identityHash,
    };
    this.logger.supportUserAcountStatus({
      action: LogActions.CREATE_BLOCKED_ACCOUNT,
      user: user.username,
      reason: `ticket support : ${supportId}`,
      identityHash,
    });

    return this.citizenRepository.save(newCitizen);
  }
}
