import { Test, TestingModule } from '@nestjs/testing';

import { NotificationController } from './notification.controller';
import { NotificationService } from './notification.service';

describe('Notification Controller', () => {
  let notificationController: NotificationController;

  const notificationService = {
    getNotifications: jest.fn(),
  };

  const req = {
    flash: jest.fn(),
    user: {
      username: 'fred durand',
    },
    csrfToken: function csrfToken() {
      return 'myGreatCsrfToken';
    },
  };

  const res = {
    redirect: jest.fn(),
    locals: {
      APP_ROOT: '/jedi/knight',
    },
  };

  const items = [
    {
      message: 'mon premier message devant apparaître en dernier ^^',
      startDate: new Date('2020-07-03'),
      stopDate: new Date('2020-07-05'),
      createdAt: new Date('2020-07-02'),
      updatedAt: new Date('2020-07-02'),
      isActive: false,
    },
    {
      message: 'mon deuxième message',
      startDate: new Date('2020-06-28'),
      stopDate: new Date('2020-06-30'),
      createdAt: new Date('2020-06-27'),
      updatedAt: new Date('2020-06-27'),
      isActive: false,
    },
    {
      message: 'mon troisième message',
      startDate: new Date('2020-06-20'),
      stopDate: new Date('2020-06-22'),
      createdAt: new Date('2020-06-19'),
      updatedAt: new Date('2020-06-19'),
      isActive: false,
    },
    {
      message: 'mon quatrième message',
      startDate: new Date('2020-06-13'),
      stopDate: new Date('2020-06-15'),
      createdAt: new Date('2020-06-12'),
      updatedAt: new Date('2020-06-12'),
      isActive: false,
    },
    {
      message: 'mon cinquième message',
      startDate: new Date('2020-06-05'),
      stopDate: new Date('2020-06-07'),
      createdAt: new Date('2020-06-04'),
      updatedAt: new Date('2020-06-04'),
      isActive: false,
    },
    {
      message: 'mon sixième message',
      startDate: new Date('2020-05-28'),
      stopDate: new Date('2020-05-30'),
      createdAt: new Date('2020-05-27'),
      updatedAt: new Date('2020-05-27'),
      isActive: false,
    },
    {
      message: 'mon septième message',
      startDate: new Date('2020-05-18'),
      stopDate: new Date('2020-05-20'),
      createdAt: new Date('2020-05-17'),
      updatedAt: new Date('2020-05-17'),
      isActive: false,
    },
    {
      message: 'mon huitième message',
      startDate: new Date('2020-05-10'),
      stopDate: new Date('2020-05-12'),
      createdAt: new Date('2020-05-09'),
      updatedAt: new Date('2020-05-09'),
      isActive: false,
    },
    {
      message: 'mon neuvième message',
      startDate: new Date('2020-05-03'),
      stopDate: new Date('2020-05-05'),
      createdAt: new Date('2020-05-02'),
      updatedAt: new Date('2020-05-02'),
      isActive: false,
    },
    {
      message: 'mon dixième message',
      startDate: new Date('2020-04-28'),
      stopDate: new Date('2020-04-30'),
      createdAt: new Date('2020-04-27'),
      updatedAt: new Date('2020-04-27'),
      isActive: false,
    },
    {
      message: 'mon onzième message',
      startDate: new Date('2020-04-20'),
      stopDate: new Date('2020-04-22'),
      createdAt: new Date('2020-04-19'),
      updatedAt: new Date('2020-04-19'),
      isActive: false,
    },
    {
      message: 'mon douzième message',
      startDate: new Date('2020-04-10'),
      stopDate: new Date('2020-04-12'),
      createdAt: new Date('2020-04-09'),
      updatedAt: new Date('2020-04-09'),
      isActive: false,
    },
  ];

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [NotificationController],
      providers: [NotificationService],
    })
      .overrideProvider(NotificationService)
      .useValue(notificationService)
      .compile();

    notificationController = await module.get<NotificationController>(
      NotificationController,
    );

    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(notificationController).toBeDefined();
  });

  describe('GET information', () => {
    it('should render notifications', async () => {
      // setup
      const reqMock = {
        ...req,
        query: {
          page: 1,
          limit: 10,
        },
      };

      notificationService.getNotifications.mockResolvedValueOnce({
        items,
        total: 12,
      });

      // action
      const result = await notificationController.informations(
        reqMock,
        reqMock.query,
      );

      // assertion
      expect(result).toEqual({
        csrfToken: 'myGreatCsrfToken',
        total: 12,
        notifications: items,
      });
      expect(reqMock.flash).toBeCalledTimes(0);
    });

    it('should flash an error', async () => {
      // setup
      const reqMock = {
        ...req,
        query: {
          page: 1,
          limit: 10,
        },
      };

      notificationService.getNotifications.mockRejectedValueOnce(
        new Error('Try again buddy'),
      );

      // action
      await notificationController.informations(reqMock, reqMock.query);

      // assertion
      expect(reqMock.flash).toBeCalledTimes(1);
      expect(reqMock.flash).toBeCalledWith(
        'globalError',
        "Les messages n'ont pas pu être affichés à cause d'une erreur technique",
      );
    });
  });
});
