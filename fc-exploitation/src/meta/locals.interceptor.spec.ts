import {Test} from "@nestjs/testing";
import {LocalsInterceptor} from "./locals.interceptor";
import {GitService} from "shared/meta/git.service";

describe('LocalsInterceptor', () => {
    let localsInterceptor;
    const gitService = {
        getCurrentBranch: jest.fn(),
        getLatestCommitLongHash: jest.fn(),
        getLatestCommitShortHash: jest.fn(),
    };

    beforeEach(async () => {
        const module = await Test.createTestingModule({
            providers: [
                LocalsInterceptor,
                GitService,
            ],
        })
            .overrideProvider(GitService)
            .useValue(gitService)
            .compile();
        localsInterceptor = await module.get<LocalsInterceptor>(LocalsInterceptor);
    });

    it('should add the meta information to all responses', async () => {
        const res: any = {
            locals: {},
        };
        const currentBranch = 'testing';
        const shortHash = '3f17f344';
        const longHash = '3f17f344448066d75f9eb33ade5fdcd799d89352';
        const context = {
            switchToHttp: jest.fn(() => ({
                getResponse: jest.fn(() => res),
            })),
        };
        const next = {
            handle: jest.fn(),
        };
        gitService.getCurrentBranch.mockResolvedValueOnce(currentBranch);
        gitService.getLatestCommitLongHash.mockResolvedValueOnce(longHash);
        gitService.getLatestCommitShortHash.mockResolvedValueOnce(shortHash);

        await localsInterceptor.intercept(context, next);

        expect(res.locals.GIT_CURRENT_BRANCH).toBe(currentBranch);
        expect(res.locals.GIT_LATEST_COMMIT_SHORT_HASH).toBe(shortHash);
        expect(res.locals.GIT_LATEST_COMMIT_LONG_HASH).toBe(longHash);
        expect(next.handle).toBeCalledTimes(1);
    });
});
