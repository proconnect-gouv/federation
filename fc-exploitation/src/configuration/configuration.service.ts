import { Injectable, Req } from '@nestjs/common';
import { Configuration } from './entity/configuration.entity';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { IndisponibiliteDTO } from './dto/indisponibilite.dto';
import { MongoDriver } from 'typeorm/driver/mongodb/MongoDriver';

@Injectable()
export class ConfigurationService {
  private db: any;
  constructor(
    @InjectRepository(Configuration, 'fc-mongo')
    private readonly configurationRepository: Repository<Configuration>,
  ) {
    const mongoDriver = this.configurationRepository.manager.connection
      .driver as MongoDriver;
    const dbConnection = mongoDriver.queryRunner.databaseConnection;

    this.db = dbConnection.db('fc').collection('configuration');
  }

  /**
   * Update the messageOnLogin part
   * of the last configuration
   * @param newMessageInfo
   */
  async updateConfigWithNewMessage(
    newMessageInfo: IndisponibiliteDTO,
    user,
  ): Promise<any> {
    const lastConfig = await this.db
      .find()
      .sort({ _id: -1 })
      .limit(1)
      .toArray();

    delete lastConfig[0]._id;

    lastConfig[0].messageOnLogin.message = newMessageInfo.message;
    lastConfig[0].messageOnLogin.startDate = newMessageInfo.dateDebut;
    lastConfig[0].messageOnLogin.stopDate = newMessageInfo.dateFin;
    lastConfig[0].messageOnLogin.startHour = newMessageInfo.heureDebut;
    lastConfig[0].messageOnLogin.stopHour = newMessageInfo.heureFin;
    lastConfig[0].features.displayMessageOnLogin =
      newMessageInfo.activateMessage;
    lastConfig[0]._meta.author = user;
    lastConfig[0]._meta.creation_date = new Date();

    return this.configurationRepository.save(lastConfig[0]);
  }
}
