import { Test, TestingModule } from '@nestjs/testing';
import { ConfigurationController } from './configuration.controller';
import { ConfigurationService } from './configuration.service';
import { updateData } from './fixture/configuration.fixtures';

describe('Configuration Controller', () => {
  let configurationController: ConfigurationController;
  let service: ConfigurationService;

  const configurationService = {
    updateConfigWithNewMessage: jest.fn(),
  };

  const indisponibilite = {
    message: 'Foundation is the futur',
    dateDebut: '23/09/2019',
    heureDebut: '09:00',
    dateFin: '23/09/2019',
    heureFin: '10:00',
    activateMessage: true,
  };

  const req = {
    flash: jest.fn(),
    user: {
      username: 'Harry Seldon',
    },
    csrfToken: function csrfToken() {
      return 'foundationCsrfToken';
    },
  };

  const res = {
    redirect: jest.fn(),
    locals: {
      APP_ROOT: '/trantro/foundation',
    },
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [ConfigurationController],
      providers: [ConfigurationService],
    })
      .overrideProvider(ConfigurationService)
      .useValue(configurationService)
      .compile();

    configurationController = module.get<ConfigurationController>(
      ConfigurationController,
    );
    service = await module.get<ConfigurationService>(ConfigurationService);

    jest.resetAllMocks();
  });

  it('should be defined', () => {
    expect(configurationController).toBeDefined();
  });

  describe('setIndisponibilite method', () => {
    it('update the "indisponibilite" configuration part', async () => {
      // action
      configurationService.updateConfigWithNewMessage.mockResolvedValueOnce(
        updateData,
      );

      await configurationController.setIndisponibilite(
        indisponibilite,
        req,
        res,
      );

      expect(req.flash).toHaveBeenCalledTimes(1);
      expect(req.flash).toHaveBeenCalledWith(
        'success',
        "Message d'indisponibilité activé avec succès !",
      );
    });

    it('return an error message if update is impossible', async () => {
      // action
      configurationService.updateConfigWithNewMessage.mockRejectedValueOnce(
        new Error('Something occured...'),
      );

      await configurationController.setIndisponibilite(
        indisponibilite,
        req,
        res,
      );

      expect(req.flash).toHaveBeenCalledTimes(1);
      expect(req.flash).toHaveBeenCalledWith(
        'globalError',
        "Le message d' indisponibilité n'a pas pu etre activé",
      );
    });
  });
});
