import {
  USER_ADMIN,
  USER_PASS,
  BASE_URL,
  LIMIT_PAGE,
} from '../constants.util';
import { login, logout } from '../login.util';
import { createUserAccount, createUserAndLogWith } from './account-create.util';
import { deleteUser } from './account-delete.util';

function logoutAndDeleteUser (username, basicConfiguration) {
  if(basicConfiguration.redirect) {
    cy.visit(`${BASE_URL}/account`);
    logout(username);
  }
  login(USER_ADMIN, USER_PASS);
  cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
  deleteUser(username, basicConfiguration);
  logout(USER_ADMIN);
}

describe('Account', () => {
  describe('Create user', () => {
    const userInfo = {
      username: 'cypress',
      email: 'cypress@email.com',
    };

    const basicConfiguration = {
      adminRole: true,
      operatorRole: true,
      _csrf: true,
      confirmSuppression: true,
      submit: true,
      redirect: true,
    };

    beforeEach(() => {
      login(USER_ADMIN, USER_PASS);
    });
      
    it('should be possible for an admin to create a new user with all the roles', () => {
      createUserAccount(userInfo ,basicConfiguration);
      cy.contains(`L\'utilisateur ${userInfo.username} a été créé avec succès`);
      cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
      cy.contains(`${userInfo.username}`).should('be.visible');

      cy.get(`#${userInfo.username} .roles span`).should('be.visible').then(roles => {
        expect(roles).to.have.length(3);
        const firstRole = roles[0].textContent;
        const secondRole = roles[1].textContent;
        const thirdRole = roles[2].textContent;
        expect(firstRole).to.equal('Administrateur inactif');
        expect(secondRole).to.equal('Exploitant inactif');
        expect(thirdRole).to.equal('Nouvel utilisateur');
      });

      deleteUser(userInfo.username, basicConfiguration);
      logout(USER_ADMIN);
    });

    it('should be possible for an admin to create a new user with only operator role', () => {
      basicConfiguration.adminRole = false;
      createUserAccount(userInfo ,basicConfiguration);
      cy.contains(`L\'utilisateur ${userInfo.username} a été créé avec succès`);
      cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
      cy.contains(`${userInfo.username}`).should('be.visible');

      cy.get(`#${userInfo.username} .roles span`).should('be.visible').then(roles => {
        expect(roles).to.have.length(2);
        const firstRole = roles[0].textContent;
        const secondRole = roles[1].textContent;
        expect(firstRole).to.equal('Exploitant inactif');
        expect(secondRole).to.equal('Nouvel utilisateur');
      });

      basicConfiguration.adminRole = true;
      deleteUser(userInfo.username, basicConfiguration);
      logout(USER_ADMIN);
    });

    it('should be possible for an admin to create a new user with only admin role', () => {
      basicConfiguration.operatorRole = false;
      createUserAccount(userInfo ,basicConfiguration);
      cy.contains(`L\'utilisateur ${userInfo.username} a été créé avec succès`);
      cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
      cy.contains(`${userInfo.username}`).should('be.visible');

      cy.get(`#${userInfo.username} .roles span`).should('be.visible').then(roles => {
        expect(roles).to.have.length(2);
        const firstRole = roles[0].textContent;
        const secondRole = roles[1].textContent;
        expect(firstRole).to.equal('Administrateur inactif');
        expect(secondRole).to.equal('Nouvel utilisateur');
      });

      basicConfiguration.operatorRole = true;
      deleteUser(userInfo.username, basicConfiguration);
      logout(USER_ADMIN);
    });

    it('should not be possible for an admin to create a user with an existing username', () => {
      createUserAccount(userInfo ,basicConfiguration);
      createUserAccount(userInfo ,basicConfiguration);

      cy.contains('Le nom d\'utilisateur est déjà utilisé').should('be.visible');

      cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
      deleteUser(userInfo.username, basicConfiguration);
      logout(USER_ADMIN);
    });

    it('shouldn\'t validate the user creation if the csrf token is invalid', () => {
      basicConfiguration._csrf = false;
      createUserAccount(userInfo ,basicConfiguration);

      cy.contains('"statusCode":500');

      basicConfiguration._csrf = true;
      cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
      cy.contains(`${userInfo.username}`).should('not.be.visible');
    });

    describe('First user connection', () => {
      const userInfo = {
        username: 'cypress',
        email: 'cypress@email.com',
        password: 'MyNewPassword10!!',
        confirmPassword: 'MyNewPassword10!!',
      };
    
      const basicConfiguration = {
        confirmSuppression: true,
        totp: true,
        submit: true,
      };
    
      it('should be possible for the new user to update his password, and type his totp token', () => {
        const configuration = Object.assign({}, basicConfiguration, { redirect: false });
        cy.contains('Comptes utilisateurs').click();
        createUserAndLogWith(userInfo, configuration);
    
        cy.url().should('eq', `${BASE_URL}/service-provider`);
        cy.visit(`${BASE_URL}/account?page=1&limit=${LIMIT_PAGE}`);
        cy.get(`#${userInfo.username} .roles span`).should('be.visible').then(roles => {
          expect(roles).to.have.length(2);
          const firstRole = roles[0].textContent;
          const secondRole = roles[1].textContent;
          expect(firstRole).to.equal('Administrateur');
          expect(secondRole).to.equal('Exploitant');
        });

        logoutAndDeleteUser(userInfo.username, configuration);
        });
    
      it('Should not be possible for the new user to update his password if he is not respecting password format', () => {
        cy.contains('Comptes utilisateurs').click();
        userInfo.password = 'MyNewPassword';
        createUserAndLogWith(userInfo, basicConfiguration);
    
        cy.url().should('eq', `${BASE_URL}/account/enrollment`);

        cy.get('#password + div > span').then(checkPassword => {
          // use jquery's map to grab all of their classes
          // jquery's map returns a new jquery object
          const classes = checkPassword.map((i, el) => {
            return Cypress.$(el).attr('class')
          });

          // call classes.get() to make this a plain array
          expect(classes.get()).to.deep.eq([
            'fa valid-password',
            'fa valid-password',
            'fa',
            'fa',
            'fa valid-password'
          ]);

        });
    
        logoutAndDeleteUser(userInfo.username, basicConfiguration);
      });


      it('Should not be possible for the new user to update his password if he is not respecting confirm password format', () => {
        basicConfiguration.submit = false;
        
        cy.contains('Comptes utilisateurs').click();
        userInfo.password = 'MyNewPassword0303;';
        userInfo.confirmPassword = 'fsfsdfdsf'
        createUserAndLogWith(userInfo, basicConfiguration);
    
        cy.url().should('eq', `${BASE_URL}/account/enrollment`);
        cy.contains('Les mots de passe ne sont pas les mêmes.').should('be.visible');
    
        logoutAndDeleteUser(userInfo.username, basicConfiguration);
      });
    
      it('Should not be possible for the new user to update his password if totp is not valid', () => {
        cy.contains('Comptes utilisateurs').click();
        basicConfiguration.totp = false;
        basicConfiguration.submit = true;
        userInfo.confirmPassword = 'MyNewPassword0303'
        createUserAndLogWith(userInfo, basicConfiguration);
    
        cy.url().should('eq', `${BASE_URL}/account/enrollment`);
        cy.contains('Le TOTP saisi n\'est pas valide').should('be.visible');
        
        logoutAndDeleteUser(userInfo.username, basicConfiguration);
      });
    });
  });
});