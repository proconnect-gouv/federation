import { BASE_URL, USER_OPERATOR, USER_PASS } from '../constants.util';
import { login } from '../login.util';
import {
  useMenuToIndisponibilitePage,
  validFilledForm,
  invalidTotpFilledForm,
  invalidFormMessageFilledForm,
  invalidFormDateDebutFilledForm,
  invalidFormDateFinFilledForm,
  invalidFormHeureDebutFilledForm,
  invalidFormHeureFinFilledForm,
  emptyForm
} from './indisponibiite-update.util';

describe(' Modify "indisponibilité" message', () => {
  beforeEach(() => {
    login(USER_OPERATOR, USER_PASS);
    useMenuToIndisponibilitePage();
  });

  describe('Should be successful', () => {
    it('if when click to configuration/indisponibilite button, page show a form', () => {
      cy.get(`form`).should('be.visible');
    });

    it('if a valid form is submit', () => {
      validFilledForm();
      cy.get('button[type="submit"]').click();

      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
      cy.contains(`Message d'indisponibilité activé avec succès !`);
    });
  });

  describe('Should fail', () => {
    it('if the form is empty', () => {
      emptyForm();
      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
    });

    it('if the message field is empty', () => {
      invalidFormMessageFilledForm();
      cy.get('textarea[name="message"]').should('have.class', 'is-invalid');
      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
    });

    it('if the start date is after the stop date', () => {
      invalidFormDateDebutFilledForm();
      
      cy.get('input[name="dateDebut"]').should('have.class', 'is-invalid');
      cy.get('input[name="heureDebut"]').should('have.class', 'is-invalid');
      cy.get('button[type="submit"]').should('have.attr', 'disabled');
      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
    });

    it('if the stop date is before the start date', () => {
      invalidFormDateFinFilledForm();
      
      cy.get('input[name="dateFin"]').should('have.class', 'is-invalid');
      cy.get('input[name="heureFin"]').should('have.class', 'is-invalid');
      cy.get('button[type="submit"]').should('have.attr', 'disabled');
      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
    });

    it('if the start hour is after the stop hour', () => {
      invalidFormHeureDebutFilledForm();
      
      cy.get('input[name="heureDebut"]').should('have.class', 'is-invalid');
      cy.get('input[name="heureFin"]').should('have.class', 'is-invalid');
      cy.get('button[type="submit"]').should('have.attr', 'disabled');
      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
    });

    it('if the stop hour is before the start hour ', () => {
      invalidFormHeureFinFilledForm();
      
      cy.get('input[name="heureDebut"]').should('have.class', 'is-invalid');
      cy.get('input[name="heureFin"]').should('have.class', 'is-invalid');
      cy.get('button[type="submit"]').should('have.attr', 'disabled');
      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
    });

    it('if the TOTP field is empty', () => {
      invalidTotpFilledForm();

      cy.url().should('eq', `${BASE_URL}/configuration/indisponibilite`);
      cy.contains(`Le TOTP saisi n'est pas valide`);
    });
  });
});
