import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import {
  createDataProvider,
} from './data-provider-create.utils';

const BASE_URL = Cypress.config('baseUrl');

const formFillConfig = Object.freeze({
  fast: true,
  totp: true,
});

const dpData = {
  title: 'MyFirstDP',
  active: 'false', // using a non-default value
  jwks_uri: 'https://example.com/jwks.json',
  scopes: [ 'groups' ],
};

describe('Data provider creation', () => {
  before(() => {
    Cypress.session.clearAllSavedSessions();
  });
  
  beforeEach(() => {
    cy.resetEnv('mongo');
    cy.clearBusinessLog();
    cy.login(USER_OPERATOR, USER_PASS);
    cy.visit('/data-provider');
  });

  describe('Should succeed', () => {
    it('with basic properties', () => {
      // Action
      cy.url().should('eq', `${BASE_URL}/data-provider`);
      cy.contains('Créer un fournisseur de données').click();

      cy.get('[name="active"][value=true]').should('be.checked');

      cy.formFill(dpData, formFillConfig);

      cy.get('form[name="fd-form"] button[type="submit"]').click();

      // Assert
      cy.url().should('eq', `${BASE_URL}/data-provider`);
      cy.contains(
        `Le fournisseur de données MyFirstDP a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();

      cy.hasBusinessLog({
        entity: 'data-provider',
        action: 'create',
        user: USER_OPERATOR,
      });
    });
  });

  describe('Should fail', () => {
    it('if the validation form failed, it should re-generate the csrf', () => {
      // Action
      createDataProvider(
        {
          title: '',
        },
        formFillConfig,
      );

      // Assert
      cy.get('input[name="_csrf"]').should('not.have.value', '');
    });

    it('if an error occured in the form, we display errors (empty fields) ', () => {
      // Action
      createDataProvider(
        {
          title: '',
        },
        formFillConfig,
      );

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });

    it('if the totp is invalid', () => {
      createDataProvider(
        dpData,
        { ...formFillConfig, totp: false },
      );
  
      cy.contains(`Le TOTP saisi n'est pas valide`).should('exist');
      cy.formControl(dpData);
      cy.get('input[name="active"][value=false]').should('be.checked');
    });
  });
});
