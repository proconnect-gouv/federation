import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';

describe('Update a data provider', () => {
  before(() => {
    Cypress.session.clearAllSavedSessions();
  });

  beforeEach(() => {
    cy.clearBusinessLog();
    cy.resetEnv('mongo');

    cy.login(USER_OPERATOR, USER_PASS);
    cy.visit('/data-provider');
    cy.contains('Fournisseur de données Mock - 1').click();
  });

  it('Should be able to update a data provider', () => {
    // Arrange
    const dpUpdateData = {
      title: 'NewDPName',
      jwks_uri: 'https://new-jwks.example.org',
      active: 'false',
    };

    // Action
    cy.formFill(dpUpdateData, { totp: true });
    cy.get('[name=scopes]').check(['uid', 'siren']);

    cy.get('form[name="fd-form"] button[type="submit"]').click();

    // Assert    
    cy.url().should('match', /\/data-provider\/[a-z0-9]{24}$/);
    cy.contains(
      `Le fournisseur de données ${dpUpdateData.title} a été modifié avec succès !`,
    );

    cy.formControl(dpUpdateData);

    cy.hasBusinessLog({
      entity: 'data-provider',
      action: 'update',
      user: USER_OPERATOR,
      name: dpUpdateData.title,
    });
  });

  it('Should not be able to update a sp with an error', () => {
    // Arrange
    const dpUpdateData = {
      title: '',
    }

    // Action
    cy.formFill(dpUpdateData, { totp: true });
    cy.get('form[name="fd-form"] button[type="submit"]').click();

    // Assert
    cy.contains(`Veuillez mettre un nom valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`);
  });

  it('Should fail if the totp is invalid', () => {
    const dpUpdateData = { title: 'new title', active: 'false' };

    cy.formFill(dpUpdateData, { totp: false });
    cy.get('[name=scopes]').check(['uid', 'siren']);
    cy.get('form[name="fd-form"] button[type="submit"]').click();

    cy.contains(`Le TOTP saisi n'est pas valide`).should('exist');
    cy.formControl(dpUpdateData);
    cy.get('input[name="active"][value=false]').should('be.checked');
    cy.get('[name=scopes]').should('be.checked', ['uid', 'siren']);
  });
});
