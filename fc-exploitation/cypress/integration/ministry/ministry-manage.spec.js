import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';

const BASE_URL = Cypress.config('baseUrl');

describe('Manage ministries', () => {
  let basicConfiguration;

  const ministryWithIdP = {
    acronym: 'TM',
    name: 'Test Ministry',
    // fip1
    identityProviders: '8dfc4080-c90d-4234-969b-f6c961de3e90',
  };

  const ministryWithIdPModified = {
    acronym: 'TMM',
    name: 'Test Ministry Modified',
    identityProviders: '',
  };

  const ministryWithoutIdP = {
    acronym: 'TMNIDP',
    name: 'Test Ministry with no idp',
    identityProviders: '',
  };

  before(() => {
    Cypress.session.clearAllSavedSessions();
    cy.resetEnv('mongoFC');
  });
  beforeEach(() => {
    basicConfiguration = {
      totp: true,
      fast: true,
    };

    cy.login(USER_OPERATOR, USER_PASS);
    cy.visit(`${BASE_URL}/ministry`);
  });

  it('display ministries list', () => {
    cy.get('p.h2').contains('Gestion des ministères');
  });

  it('display ministry creation form', () => {
    cy.get('a[href="/ministry/create"').click();
    cy.url().should('eq', `${BASE_URL}/ministry/create`);
    cy.get('p.h2').contains('Ajouter un nouveau ministère');
  });

  it('create a new minitry with all identity providers', () => {
    cy.get('a[href="/ministry/create"').click();
    cy.url().should('eq', `${BASE_URL}/ministry/create`);

    cy.formFill(ministryWithIdP, basicConfiguration);

    cy.get('button[type="submit"]')
      .contains('Ajouter un nouveau ministère')
      .click();

    cy.url().should('eq', `${BASE_URL}/ministry`);
    cy.get('.alert.alert-success').contains(
      'Le ministère "Test Ministry" a bien été créé !',
    );
  });

  it('create a new minitry with no identity providers', () => {
    cy.get('a[href="/ministry/create"').click();
    cy.url().should('eq', `${BASE_URL}/ministry/create`);

    cy.formFill(ministryWithoutIdP, basicConfiguration);

    cy.get('button[type="submit"]')
      .contains('Ajouter un nouveau ministère')
      .click();

    cy.url().should('eq', `${BASE_URL}/ministry`);
    cy.get('.alert.alert-success').contains(
      'Le ministère "Test Ministry with no idp" a bien été créé !',
    );
  });

  it('should not validate creation form', () => {
    cy.get('a[href="/ministry/create"').click();
    cy.url().should('eq', `${BASE_URL}/ministry/create`);

    cy.formFill({}, basicConfiguration);

    cy.get('button[type="submit"]')
      .contains('Ajouter un nouveau ministère')
      .click();

    cy.url().should('eq', `${BASE_URL}/ministry/create`);
    cy.get('input[name="acronym"]').should('have.class', 'is-invalid');
  });

  it('should not validate creation form with an empty or wrong totp', () => {
    cy.get('a[href="/ministry/create"').click();
    cy.url().should('eq', `${BASE_URL}/ministry/create`);

    cy.formFill(ministryWithoutIdP, {});

    cy.get('button[type="submit"]')
      .contains('Ajouter un nouveau ministère')
      .click();
    cy.get('input[name="_totp"]').should('have.class', 'is-invalid');

    cy.get('input[name="_totp"]').type('000000');
    cy.get('button[type="submit"]')
      .contains('Ajouter un nouveau ministère')
      .click();

    cy.url().should('eq', `${BASE_URL}/ministry/create`);
    cy.get('.alert.alert-danger').contains(`Le TOTP saisi n'est pas valide`);
  });

  it('modify an existing ministry and remove all identity providers', () => {
    cy.get(`#update-${ministryWithIdP.acronym}`).click({ force: true });

    cy.formFill(ministryWithIdPModified, basicConfiguration);

    cy.get('button[type="submit"]')
      .contains('Modifier un ministère')
      .click();

    cy.url().should('eq', `${BASE_URL}/ministry`);
    cy.get('.alert.alert-success').contains(
      'Le ministère "Test Ministry Modified" a bien été mis à jour !',
    );
  });

  it('should not validate modification form with an empty or wrong totp', () => {
    cy.get(`#update-${ministryWithIdPModified.acronym}`).click({ force: true });

    cy.formFill({}, {});

    cy.get('button[type="submit"]')
      .contains('Modifier un ministère')
      .click();

    cy.get('input[name="_totp"]').should('have.class', 'is-invalid');

    cy.get('input[name="_totp"]').type('000000');

    cy.get('button[type="submit"]')
      .contains('Modifier un ministère')
      .click();

    cy.url().should('include', `${BASE_URL}/ministry/`);
    cy.get('.alert.alert-danger').contains(`Le TOTP saisi n'est pas valide`);
  });

  it('should not delete a ministry if action is cancel', () => {
    cy.get(`#delete-${ministryWithoutIdP.acronym}`).click();

    cy.contains('Annuler').click();

    cy.url().should('eq', `${BASE_URL}/ministry`);
    cy.contains(`${ministryWithoutIdP.name}`).should('be.visible');
  });

  it('should not delete a ministry if totp is not correct or empty', () => {
    cy.get(`#delete-${ministryWithoutIdP.acronym}`).click();

    cy.contains('Confirmer').click();
    cy.contains(`Le TOTP n'a pas été saisi`).should('be.visible');
    cy.get('#totpModal').type('000000');
    cy.contains('Confirmer').click();
    cy.contains(`Le TOTP saisi n'est pas valide`).should('be.visible');

    cy.url().should('eq', `${BASE_URL}/ministry`);
    cy.contains(`${ministryWithoutIdP.name}`).should('be.visible');
  });

  it('should delete an existing ministry', () => {
    cy.get(`#delete-${ministryWithoutIdP.acronym}`).click();

    cy.get('#totpModal').then(() => cy.totp(basicConfiguration));
    cy.contains('Confirmer').click();

    cy.url().should('eq', `${BASE_URL}/ministry`);
    cy.get('.alert.alert-success').contains(
      `Le ministère "${ministryWithoutIdP.name}" a été supprimé avec succès !`,
    );
  });
});
