import { DateTime } from 'luxon';
import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import { createNotification, updateNotification } from './notification.utils';

describe('Access information messages', () => {
  const BASE_URL = Cypress.config('baseUrl');
  let basicConfiguration;
  before(() => cy.resetEnv('mongoFC'));
  beforeEach(() => {
    basicConfiguration = {
      totp: true,
      _csrf: true,
      fast: true,
    };
    cy.login(USER_OPERATOR, USER_PASS);
  });

  describe('Show messages', () => {
    it('should be possible to access information messages management page', () => {
      cy.get('#informations').click();
      let lastCreatedAt = DateTime.now().toMillis();
      let currentCreatedAt;
      cy.get('#messages > tr').then(rows => {
        rows.map((_index, elem) => {
          const createdAtString = elem.cells[3].textContent.trim();
          currentCreatedAt = DateTime.fromFormat(
            createdAtString,
            'dd/MM/yyyy HH:mm:ss',
          ).toMillis();
          expect(currentCreatedAt).to.be.below(lastCreatedAt);
          lastCreatedAt = currentCreatedAt;
        });
      });
    });
  });

  describe('Paginate', () => {
    it('should be possible to access the second page of messages', () => {
      cy.get('#informations').click();
      cy.get('#pagination-container')
        .contains('2')
        .click();
    });
  });

  describe('Create a notification', () => {
    it('should be possible', () => {
      const notificationToCreate = {
        message: 'Hello',
        stopDate: '2019-09-20',
        startDate: '2019-09-20',
        startHour: '18:24',
        stopHour: '18:25',
        isActive: true,
      };

      createNotification(notificationToCreate, basicConfiguration);

      cy.url().should('eq', `${BASE_URL}/notification/information`);
      cy.contains('La notification a été créé avec succès !').should(
        'be.visible',
      );
      cy.get('.alert-success > .close').click();
    });

    it('should not be possible if wrong TOTP', () => {
      const notificationToCreate = {
        message: 'Hello',
        stopDate: '2019-09-20',
        startDate: '2019-09-20',
        startHour: '18:24',
        stopHour: '18:25',
        isActive: true,
      };
      basicConfiguration.totp = false;
      createNotification(notificationToCreate, basicConfiguration);

      cy.contains(`Le TOTP saisi n'est pas valide`).should('be.visible');
    });

    it('should not be possible if mandatory fields are not filled', () => {
      const notificationToCreate = {
        message: '',
        stopDate: '',
        startDate: '',
      };

      createNotification(notificationToCreate, basicConfiguration);

      cy.url().should('eq', `${BASE_URL}/notification/create`);
      cy.get('textarea[id="message"]').should('have.class', 'is-invalid');
      cy.get('input[id="dateDebut"]').should('have.class', 'is-invalid');
      cy.get('input[id="dateFin"]').should('have.class', 'is-invalid');
    });
  });

  describe('Update a notification', () => {
    it('should be possible', () => {
      const notificationToCreate = {
        message: 'Hello',
        stopDate: '2019-09-20',
        startDate: '2019-09-20',
        startHour: '18:24',
        stopHour: '18:25',
        isActive: true,
      };

      updateNotification(notificationToCreate, basicConfiguration);

      cy.contains('La notification a été modifiée avec succès !').should(
        'be.visible',
      );
      cy.get('.alert-success > .close').click();
    });

    it('should not be possible if wrong TOTP', () => {
      const notificationToCreate = {
        message: 'Hello',
        stopDate: '2019-09-20',
        startDate: '2019-09-20',
        startHour: '18:24',
        stopHour: '18:25',
        isActive: true,
      };
      basicConfiguration.totp = false;
      updateNotification(notificationToCreate, basicConfiguration);

      cy.contains(`Le TOTP saisi n'est pas valide`).should('be.visible');
    });
  });
});
