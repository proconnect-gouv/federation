import * as otplib from 'otplib';
const BASE_URL = 'https://exploitation.docker.dev-franceconnect.fr';
const USER_ONLY_ADMIN = 'bob';
const USER_ADMIN = 'jean_moust';
const USER_OPERATOR = 'jean_patoche';
const USER_NEW_USER ='pierre';
const USER_NEW_USER_ONLY_ADMIN = 'paul';
const USER_PASS = 'georgesmoustaki';

otplib.authenticator.options = {
  algorithm: 'sha1',
};

describe('accounts', () => {
  describe('the user is disconnected', () => {
    it('should redirect the not connected user to https://exploitation.docker.dev-franceconnect.fr/login', () => {
      cy.visit(`${BASE_URL}/account`);

      cy.url().should(
        'eq',
        `${BASE_URL}/login`,
      );
    });
  });

  describe('The user is a new user', () => {
    it('should redirect the user connecting for the first time to the page to change his password and initialize his totp', () => {
      cy.visit(`${BASE_URL}`);
      cy.get('input[name="username"]').type(USER_NEW_USER);
      cy.get('input[name="password"]').type(USER_PASS);
      cy.get('button[type="submit"]').click();
      cy.contains('Changez votre mot de passe et authentifiez-vous grâce au TOTP');
    });

    it('should not be possible for the new user to update his password if he is not respecting password format', () => {
      cy.visit(`${BASE_URL}`);
      cy.get('input[name="username"]').type(USER_NEW_USER);
      cy.get('input[name="password"]').type(USER_PASS);
      cy.get('button[type="submit"]').click();

      cy.get('#password').type("MyNewPassword");
      cy.get('#confirm-password').type('MyNewPassword');
      cy.get('input[name="_totp"]').then(totp => {
        const token = otplib.authenticator.generate('KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD');
        cy.get('input[name="_totp"]').type(token);
      });
      cy.get('button[type="submit"]').click();
      cy.contains('Changez votre mot de passe et authentifiez-vous grâce au TOTP');
    });

    it('should be possible for the new user to update his password, and type his totp token', () => {
      cy.visit(`${BASE_URL}`);
      cy.get('input[name="username"]').type(USER_NEW_USER);
      cy.get('input[name="password"]').type(USER_PASS);
      cy.get('button[type="submit"]').click();

      cy.get('#password').type("MyNewPassword10!!");
      cy.get('#confirm-password').type('MyNewPassword10!!');
      cy.get('input[name="_totp"]').then(totp => {
        const token = otplib.authenticator.generate('KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD');
        cy.get('input[name="_totp"]').type(token);
      });
      cy.get('button[type="submit"]').click();
      cy.contains('Gestion des fournisseurs de service');
    });

    it('should redirect a user connecting for the first time and having only the admin role to the account list page', () => {
      cy.visit(`${BASE_URL}`);
      cy.get('input[name="username"]').type(USER_NEW_USER_ONLY_ADMIN);
      cy.get('input[name="password"]').type(USER_PASS);
      cy.get('button[type="submit"]').click();

      cy.get('#password').type("MyNewPassword10!!");
      cy.get('#confirm-password').type('MyNewPassword10!!');
      cy.get('input[name="_totp"]').then(totp => {
          const token = otplib.authenticator.generate('KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD');
          cy.get('input[name="_totp"]').type(token);
      });
      cy.get('button[type="submit"]').click();
      cy.contains('Gestion des utilisateurs');
    });
  });

  describe('the user is connected', () => {
    describe('the current user doesn\'t have the admin role', () => {
      beforeEach(() => {
        cy.visit(`${BASE_URL}`);
        cy.get('input[name="username"]').type(USER_OPERATOR);
        cy.get('input[name="password"]').type(USER_PASS);
        cy.get('button[type="submit"]').click();
      });

      describe('checking accounts page is well displayed', () => {
        it('displays the accounts list when clicking accounts in the header', () => {
          cy.contains('Comptes utilisateurs').click();

          cy.get('tbody th').then(userRows => {
            expect(userRows.length).to.be.greaterThan(0)
          });
        });

        it('displays a number of users on the top of the page', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.get('#users-count').then(users => {
            const sentence = users[0].innerText;
            const number = parseInt(sentence.slice(0, -25), 10);

            expect(number).to.be.a('number');
          });
        });
      });

      it('should\'nt give access to deletion buttons inside account list', () => {
        cy.contains('Comptes utilisateurs').click();
        cy.get('#delete-7bd4adc5-6fdc-4b4e-915e-bb92b3d8bb2a').should(
          'not.exist',
        );
      });
    });

    describe('the user has only the admin role', () => {
      beforeEach(() => {
        cy.visit(`${BASE_URL}`);
        cy.get('input[name="username"]').type(USER_ONLY_ADMIN);
        cy.get('input[name="password"]').type(USER_PASS);
        cy.get('button[type="submit"]').click();

      });

      it('should redirect the user who has just the admin role to the account list page when he connects himself', () => {
        cy.contains('Gestion des utilisateurs');
        cy.contains('Fournisseurs de service').should('not.exist');
        cy.contains('Fournisseurs d\'identité').should('not.exist');
      });
    });

    describe('the current user has the admin role', () => {
      beforeEach(() => {
        cy.visit(`${BASE_URL}`);
        cy.get('input[name="username"]').type(USER_ADMIN);
        cy.get('input[name="password"]').type(USER_PASS);
        cy.get('button[type="submit"]').click();
      });

      describe('create user', () => {
        it('should be possible for an admin to create a new user', (done) => {
          cy.contains('Comptes utilisateurs').click();
          cy.contains('Créer un utilisateur').click();

          cy.get('#username').type('tata');
          cy.get('#email').type('toto@toto.com');
          cy.get('form').find('[id="role-admin"]').check();
          cy.get('form').find('[id="role-operator"]').check();
          cy.contains('Créer l\'utilisateur').click();
          cy.contains('L\'utilisateur tata a été créé avec succès');
          cy.visit(`${BASE_URL}/account?page=1&limit=100`);
          cy.get('#tata #roles span').should(roles => {
            const firstRole = roles[0].textContent;
            const secondRole = roles[1].textContent;
            const thirdRole = roles[2].textContent;
            expect(firstRole).to.equal('Administrateur inactif');
            expect(secondRole).to.equal('Exploitant inactif');
            expect(thirdRole).to.equal('Nouvel utilisateur');
            done();
          });
        });
        it('shouldn\'t validate the user creation if the csrf token is invalid', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.contains('Créer un utilisateur').click();

          cy.get('input[name="_csrf"]').then((csrf) => {
            csrf[0].value = 'oubviouslyBadCSRF';
          });
          cy.get('#username').type('tata');
          cy.get('#email').type('toto@toto.com');
          cy.get('input[name="roles[]"]').first().check();

          cy.contains('Créer l\'utilisateur').click();

          cy.contains('"statusCode":500');
        });

        it('should re-generate a csrf token if the form validation failed previously', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.contains('Créer un utilisateur').click();

          cy.get('#username').type('tata   ioioiio');
          cy.get('#email').type('toto@toto.com');
          cy.get('input[name="roles[]"]').first().check();

          cy.contains('Créer l\'utilisateur').click();

          cy.get('input[name="_csrf"]').should('not.have.value', '');
        });
      });

      describe('delete user', () => {
        it('is possible for the current user who clicked the trash to delete a user to stop the action by clicking an abort button in a modal', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.visit(`${BASE_URL}/account?page=1&limit=100`);
          cy.get('#delete-f8448509-58dd-4fa6-8d45-3d6bc06cf520 button').click();

          cy.contains('Voulez-vous supprimer le compte');
          cy.get('#myConfirmModal .btn-danger').click();

          cy.contains('jack');
        });
        it('is possible for the current user to delete a user, he should be kept on the accounts list page after having deleted a user', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.visit(`${BASE_URL}/account?page=1&limit=100`);
          cy.get('#delete-f8448509-58dd-4fa6-8d45-3d6bc06cf520 button').click();

          cy.contains('Voulez-vous supprimer le compte');
          cy.get('#myConfirmModal .btn-success').click();

          cy.contains('Le compte jack a été supprimé avec succès !')
          cy.url().should('eq', `${BASE_URL}/account`);
        });

        it('should not delete a user if the csrf token is invalid', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.visit(`${BASE_URL}/account?page=1&limit=100`);

          cy.get("#delete-d3d3f8a1-26ea-4a8b-9ed3-336d3777b529 input[name='_csrf']").then((user) => {
            user[0].value ='oubviouslyBadCSRF';
          });

          cy.get('#delete-d3d3f8a1-26ea-4a8b-9ed3-336d3777b529 button').click();
          cy.contains('Voulez-vous supprimer le compte');
          cy.get('#myConfirmModal .btn-success').click();
          cy.contains('"statusCode":500');
        });
      });

      describe('pagination', () => {
        it('should show a navigation  at the bottom of the page', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.get('nav').should('exist');
        });

        it('should give another page of result when the user click on next button one time', () => {
          cy.contains('Comptes utilisateurs').click();
          cy.contains('Suivante').click();
          cy.url().should('include', '/account?page=2&limit=10');
        });
      });
    });
  });
});
