import 'cypress-file-upload';
import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import { createServiceProvider } from './service-provider-create.util';

const basicConfiguration = {
  useLogo: false,
  fast: true,
};

function deleteLastServiceProvider() {
  cy.visit(`/service-provider?page=1&limit=9999`);
  cy.get('button.btn-action-delete')
    .last()
    .click({ force: true });
  cy.get('#totpModal').then(() => cy.totp(basicConfiguration));
  cy.contains('Confirmer').click();
}

describe('Delete service provider', () => {
  before(() => cy.resetEnv('postgres'));
  before(() => cy.resetEnv('mongoFC'));
  const fs = {
    name: 'uniquefranceconnect',
    redirectUri: 'https://url.com',
    redirectUriLogout: 'https://url.com/logout',
    site: 'https://url.com',
    emails: 'titlen@gmail.com',
    ipAddresses: '192.0.0.0',
    fileName: 'valid_logo.png',
    mimeType: 'image/png',
    encoding: 'utf8',
  };

  beforeEach(() => {
    cy.login(USER_OPERATOR, USER_PASS);
    createServiceProvider(fs, basicConfiguration);
    cy.visit(`/service-provider?page=1&limit=9999`);
    cy.contains(`${fs.name}`).should('be.visible');
  });

  afterEach(() => {
    cy.contains(`${USER_OPERATOR}`).click();
    cy.contains('Déconnexion').click();
  });

  it('If action is cancel (checkbox & delete button)', () => {
    cy.get('input.delete-items')
      .first()
      .click();
    cy.get('input.delete-items')
      .last()
      .click();
    cy.contains('Supprimer')
      .should('be.visible')
      .click();
    cy.contains('Annuler').click();
    cy.contains(`${fs.name}`).should('be.visible');
    deleteLastServiceProvider();
  });

  it('If action is cancel (trash button)', () => {
    cy.get('button.btn-action-delete')
      .last()
      .click();

    cy.contains('Annuler').click();

    cy.contains(`${fs.name}`).should('be.visible');
    deleteLastServiceProvider();
  });

  it('If totp is not correct or empty', () => {
    cy.get('button.btn-action-delete')
      .last()
      .click();

    cy.contains('Confirmer').click();
    cy.contains(`Le TOTP n'a pas été saisi`).should('be.visible');
    cy.get('#totpModal').type('000000');
    cy.contains('Confirmer').click();

    cy.contains(`Le TOTP saisi n'est pas valide`).should('be.visible');
    cy.visit(`/service-provider?page=1&limit=9999`);
    cy.contains(`${fs.name}`).should('be.visible');
    deleteLastServiceProvider();
  });

  it('Should delete one service provider thanks quick method (trash button)', () => {
    cy.get('button.btn-action-delete')
      .last()
      .click();

    cy.get('#totpModal').then(() => cy.totp(basicConfiguration));
    cy.contains('Confirmer').click();

    cy.contains(
      `Le fournisseur de service ${fs.name} a été supprimé avec succès !`,
    ).should('be.visible');
    cy.get('.alert-success > .close').click();
    cy.contains(`${fs.name}`).should('not.be.visible');
  });

  it('Should delete one service provider thanks long method (checkbox & delete button)', () => {
    cy.visit(`/service-provider?page=1&limit=9999&sort=createdAt&action=asc`);
    cy.get('input.delete-items')
      .last()
      .click();
    cy.contains('Supprimer')
      .should('be.visible')
      .click();

    cy.get('#totpModal').then(() => cy.totp(basicConfiguration));
    cy.contains('Confirmer').click();

    cy.get('.alert-success > .close').click();
    cy.contains(`${fs.name}`).should('not.be.visible');
  });

  it('Should delete several service provider with uuid and old id', () => {
    cy.get('input.delete-items')
      .first()
      .click();
    cy.get('input.delete-items')
      .last()
      .click();
    cy.contains('Supprimer')
      .should('be.visible')
      .click();

    cy.get('#totpModal').then(() => cy.totp(basicConfiguration));
    cy.contains('Confirmer').click();

    cy.get('.alert-success > .close').click();
    cy.contains(`${fs.name}`).should('not.be.visible');
  });
});
