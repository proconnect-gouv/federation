import 'cypress-file-upload';

const BASE_URL = 'https://exploitation.docker.dev-franceconnect.fr';
const USER_ADMIN = 'jean_moust';
const USER_OPERATOR = 'jean_patoche';
const USER_PASS = 'georgesmoustaki';

describe('service-provider', () => {
  beforeEach(() => {
    cy.visit(`${BASE_URL}`);
    cy.get('input[name="username"]').type(USER_OPERATOR);
    cy.get('input[name="password"]').type(USER_PASS);
    cy.get('button[type="submit"]').click();
  });

  describe('Initialization', () => {
    it('[Logo management] Create a service provider without a logo', () => {
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains('Créer un fournisseur de service').click();

      // Fill in form
      cy.get('input[name=name]')
        .clear()
        .type('My FS for testing logo management');
      cy.get('textarea[name=redirectUri]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=redirectUriLogout]')
        .clear()
        .type('https://url.com/logout');
      cy.get('input[name=site]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=emails]')
        .clear()
        .type('valenttin@gmail.com');
      cy.get('textarea[name=ipAddresses]')
        .clear()
        .type('192.0.0.0');

      cy.get('[type="radio"]')
        .check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]')
        .click();

      cy.url().should('eq', 'https://exploitation.docker.dev-franceconnect.fr/service-provider');
      cy.contains(`Le fournisseur de service My FS for testing logo management a été créé avec succès !`);
    });
  });

  describe('Logo management tests', () => {
    beforeEach(() => {
      cy.visit(`${BASE_URL}/service-provider?page=1&limit=1000`);
      cy.contains(`My FS for testing logo management`).should('be.visible');
      cy.get('a.btn-action-update').last().click();

      cy.contains(`Modifier le fournisseur de service`).should('be.visible');
      cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
    });

    describe('Updating the logo', () => {
      it('Should display the preview of the choosen logo and then cancel the file selection', () => {
        cy.fixture('logos/valid_logo.png').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'valid_logo.png',
            mimeType: 'image/png',
          });
        });

        cy.get('img[data-role=displayPreviewLogo]').should('be.visible');

        cy.get('label[data-role=reset]').should('be.visible');
        cy.get('label[data-role=reset]').click();
        cy.contains(`Aucun logo n'est actuellement enregistré.`).should('be.visible');
        cy.get('img[data-role=displayPreviewLogo]').should('not.be.visible');
      });

      it('Should be able to update the logo if there was none', () => {
        cy.contains(`Aucun logo n'est actuellement enregistré.`).should('be.visible');

        cy.fixture('logos/valid_logo.jpg').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'valid_logo.jpg',
            mimeType: 'image/jpg',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
        cy.get('img[data-role=displayActualLogo]').should('be.visible');
      });

      it('Should be able to update the logo with a PNG <= 1MB', () => {
        cy.fixture('logos/valid_logo.png').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'valid_logo.png',
            mimeType: 'image/png',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
        cy.get('img[data-role=displayActualLogo]').should('be.visible');
      });

      it('Should be able to update the logo with a JPG <= 1MB', () => {
        cy.fixture('logos/valid_logo.jpg').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'valid_logo.jpg',
            mimeType: 'image/jpg',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
        cy.get('img[data-role=displayActualLogo]').should('be.visible');
      });

      it('Should be able to update the logo with a SVG <= 1MB', () => {
        cy.fixture('logos/valid_logo.svg').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'valid_logo.svg',
            encoding: 'utf8',
            mimeType: 'image/svg+xml',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
        cy.get('img[data-role=displayActualLogo]').should('be.visible');
      });

      it('Should be able to update the logo with a GIF <= 1MB', () => {
        cy.fixture('logos/valid_logo.gif').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'valid_logo.gif',
            mimeType: 'image/gif',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
        cy.get('img[data-role=displayActualLogo]').should('be.visible');
      });

      it('Should not be able to update the logo with an image > 1MB', () => {
        cy.fixture('logos/invalid_too_big_logo.jpg').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'invalid_too_big_logo.jpg',
            mimeType: 'image/jpg',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`{"statusCode":413,"error":"Payload Too Large","message":"File too large"}`).should('be.visible');
      });

      it('Should not be able to update the logo if the file is not an image', () => {
        cy.fixture('logos/not_an_image.md').then(logo => {
          cy.get('input[type=file]').upload({
            fileContent: logo,
            fileName: 'not_an_image.md',
            encoding: 'utf8',
            mimeType: 'text/plain',
          });
        });

        cy.get('form[name=fs-logo-form] button[type=submit]').click();

        cy.contains(`Impossible de mettre à jour le logo`).should('be.visible');
        cy.contains(`Le format du logo fourni est incorrect`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
      });

      it('Should not be able to update the logo if no logo was provided', () => {
        cy.get('form[name=fs-logo-form] button[type=submit]').should('be.disabled');
      });
    });

    describe('Removing the logo', () => {
      it('Should remove the current logo if there is one', () => {
        cy.get('img[data-role=displayActualLogo]').should('be.visible');

        cy.get('form[name=fs-delete-form] button[type=submit]').click();

        cy.contains(`Le logo du fournisseur a été supprimé avec succès !`).should('be.visible');
        cy.get('input[name=name]').should('have.value', `My FS for testing logo management`);
        cy.contains(`Aucun logo n'est actuellement enregistré.`).should('be.visible');
      });

      it('Should not be able to remove the logo if there is no logo', () => {
        cy.contains(`Aucun logo n'est actuellement enregistré.`).should('be.visible');

        cy.get('form[name=fs-delete-form] button[type=submit]').should('be.disabled');
      });
    });
  });
});