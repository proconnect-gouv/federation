import { b64toBlob } from './service-provider.utils';
import {
  USER_ADMIN,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import { createServiceProvider } from './service-provider-create.utils';

const BASE_URL = Cypress.config('baseUrl');

const basicConfiguration = {
  fast: true,
  totp: true,
};

describe('service provider logo', () => {
  before(() => cy.resetEnv('mongoFC'));
  beforeEach(() => {
    cy.login(USER_ADMIN, USER_PASS);
  });

  describe('Initialization of service provider', () => {
    it('[Logo management] Create a service provider without a logo', () => {
      createServiceProvider(
        {
          name: 'My FS for testing logo management',
          platform: 'CORE_FCP',
          signupId: '123456',
          redirectUri: 'https://url.com',
          redirectUriLogout: 'https://url.com/logout',
          jwksUri: 'https://monfs.com/jwks',
          site: 'https://url.com',
          emails: 'valenttin@gmail.com',
          ipAddresses: '192.0.0.0',
          eidas: '1',
        },
        { ...basicConfiguration },
      );

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service My FS for testing logo management a été créé avec succès !`,
      );
    });
  });

  describe('Logo', () => {
    beforeEach(() => {
      cy.visit(`/service-provider?page=1&limit=1000&sort=createdAt&action=asc`);
      cy.contains(`My FS for testing logo management`).should('be.visible');

      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.contains(`Modifier le fournisseur de service`).should('be.visible');
      cy.get('input[name=name]').should(
        'have.value',
        `My FS for testing logo management`,
      );
    });

    describe('is corrupted / has wrong format', () => {
      it('Should not be able to update the logo with an image > 1MB', () => {
        // Arrange
        const fileName = 'invalid_too_big_logo.jpg';
        const mimeType = 'image/jpg';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('be.empty');
          });

        // Assert
        cy.contains(`Impossible de charger l'image car elle est trop lourde: `);
        cy.get('#btn-logo-update')
          .scrollIntoView()
          .should('be.disabled');
      });

      it('Should not be able to update the logo if the file is not an image', () => {
        // Arrange
        const fileName = 'not_an_image.md';
        const mimeType = 'text/markdown';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('be.empty');
          });

        // Assert
        cy.contains(`Format du fichier incorrect: text/markdown`);
        cy.get('#btn-logo-update').should('be.disabled');
      });

      it('Should not be able to update the logo if the file is malicious and is not an image file', () => {
        // Arrange
        const fileName = 'dangerous_not_image_but_js.png';
        const mimeType = 'image/png';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('be.empty');
          });

        // Assert
        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        cy.get('#box-upload').should('have.class', 'is-invalid');
        cy.contains(`Votre image n'est pas à la bonne taille ou bon format`);
        cy.get('#btn-logo-update').should('be.disabled');
        cy.get('#btn-logo-delete').should('be.disabled');
      });

      it('Should not be able to update the logo if the SVG is malicious', () => {
        // Arrange
        const fileName = 'foreignobject_hacking.svg';
        const mimeType = 'image/svg+xml';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('be.empty');
          });

        // Assert
        cy.contains(
          `Ce fichier contient des éléments interprétables par le navigateur (Ex. script)`,
        );
        cy.get('#btn-logo-update').should('be.disabled');
      });

      it('Should not be able to update the logo if the image is a decompress-bomb', () => {
        // Arrange
        const fileName = 'image_bomb.jpg';
        const mimeType = 'image/jpg';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        // Assert
        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        cy.get('#box-upload').should('have.class', 'is-invalid');
        cy.contains(`Votre image n'est pas à la bonne taille ou bon format`);
        cy.get('#btn-logo-update').should('be.disabled');
        cy.get('#btn-logo-delete').should('be.disabled');
      });

      it('Should not be able to update the logo if the image hide malicious script', () => {
        // Arrange
        const fileName = 'script_hide_image.png';
        const mimeType = 'image/png';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        // Assert
        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        cy.get('#box-upload').should('have.class', 'is-invalid');
        cy.contains(`Votre image n'est pas à la bonne taille ou bon format`);
        cy.get('#btn-logo-update').should('be.disabled');
        cy.get('#btn-logo-delete').should('be.disabled');
      });
    });

    describe('is updated', () => {
      it('Should display the preview of the choosen logo', () => {
        // Arrange
        cy.get('#logo-result').should('not.be.visible');

        const fileName = 'valid_logo.png';
        const mimeType = 'image/png';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        // Assert
        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
        cy.get('#btn-logo-update').should('not.be.disabled');
        cy.get('#btn-logo-delete').should('be.disabled');
      });

      it('Should not be able to update the logo if no logo was provided', () => {
        cy.get('#logo-data')
          .invoke('val')
          .should('be.empty');
        cy.get('#btn-logo-update').should('be.disabled');
      });

      it('Should be able to update the logo if there was none', () => {
        // Arrange
        cy.get('#logo-result').should('not.be.visible');

        const fileName = 'valid_logo.jpg';
        const mimeType = 'image/jpg';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        // Assert
        cy.contains(
          `Le logo du fournisseur a été modifié avec succès !`,
        ).should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );
        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
      });

      it('Should be able to update the logo with a PNG <= 1MB', () => {
        // Arrange
        const fileName = 'valid_logo.png';
        const mimeType = 'image/png';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        // Assert
        cy.contains(
          `Le logo du fournisseur a été modifié avec succès !`,
        ).should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );
        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
      });

      it('Should be able to update the logo with a JPG <= 1MB', () => {
        // Arrange
        const fileName = 'valid_logo.jpg';
        const mimeType = 'image/jpg';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        // Assert
        cy.contains(
          `Le logo du fournisseur a été modifié avec succès !`,
        ).should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );
        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
      });

      it('Should be able to update the logo with a SVG <= 1MB', () => {
        // Arrange
        const fileName = 'valid_logo.svg';
        const mimeType = 'image/svg+xml';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        // Assert
        cy.contains(`Le logo du fournisseur a été modifié avec succès !`)
          .scrollIntoView()
          .should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );

        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
      });

      it('Should be able to update the logo with a GIF <= 1MB', () => {
        // Arrange
        const fileName = 'valid_logo.gif';
        const mimeType = 'image/gif';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        // Assert
        cy.contains(`Le logo du fournisseur a été modifié avec succès !`)
          .scrollIntoView()
          .should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );
        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
      });

      it('Should be able to reset the logo if we load a wrong one', () => {
        // Arrange
        const fileName = 'valid_logo.gif';
        const mimeType = 'image/gif';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => Cypress.Blob.base64StringToBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty')
              .as('logo:gif:valid');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`)
          .scrollIntoView()
          .should('be.visible');

        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');

        const fileName2 = 'valid_logo.png';
        const mimeType2 = 'image/png';
        const encoding2 = 'utf8';

        // Action
        cy.fixture(`logos/${fileName2}`)
          .then(image => Cypress.Blob.base64StringToBlob(image, mimeType2))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName: fileName2,
              mimeType: mimeType2,
              encoding: encoding2,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        // Assert
        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
        cy.get('#btn-logo-update').should('be.disabled');

        cy.get('#logo-reset')
          .scrollIntoView()
          .should('be.visible')
          .should('not.be.disabled')
          .click();

        cy.get('#btn-logo-update').should('be.disabled');
        cy.get('@logo:gif:valid').then(imageContent => {
          cy.get('#logo-result').should('have.attr', 'src', imageContent);
        });
      });

      it('Should be able to update the logo even if the file is too big for regex', () => {
        // Arrange
        const fileName = 'full-white-regex-breaker.jpg';
        const mimeType = 'image/jpg';
        const encoding = 'utf8';

        // Action
        cy.fixture(`logos/${fileName}`)
          .then(image => b64toBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        // Assert
        cy.contains(`Le logo du fournisseur a été modifié avec succès !`)
          .scrollIntoView()
          .should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );

        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');
      });
    });

    describe('is removed', () => {
      it('Should remove the current logo if there is one', () => {
        // Arrange
        const fileName = 'valid_logo.jpg';
        const mimeType = 'image/jpg';
        const encoding = 'utf8';

        cy.fixture(`logos/${fileName}`)
          .then(image => Cypress.Blob.base64StringToBlob(image, mimeType))
          .then(fileContent => {
            cy.get('input[type=file]').attachFile({
              fileContent,
              fileName,
              mimeType,
              encoding,
            });
            cy.get('#logo-data')
              .invoke('val')
              .should('not.be.empty');
          });

        cy.get('#btn-logo-update').click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer').click();

        cy.contains(`Le logo du fournisseur a été modifié avec succès !`)
          .scrollIntoView()
          .should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );

        cy.get('#btn-logo-update').scrollIntoView();
        cy.get('#logo-result').should('be.visible');

        // Action
        cy.get('#btn-logo-delete')
          .should('not.be.disabled')
          .click();

        cy.get('#totpModal').totp(basicConfiguration);
        cy.contains('Confirmer')
          .scrollIntoView()
          .click();

        // Assert
        cy.get('#logo-result')
          .scrollIntoView()
          .should('not.be.visible');
        cy.get('#btn-logo-update')
          .scrollIntoView()
          .should('be.disabled');
        cy.get('#btn-logo-delete')
          .scrollIntoView()
          .should('be.disabled');

        cy.contains(`Le logo du fournisseur a été supprimé avec succès !`)
          .scrollIntoView()
          .should('be.visible');
        cy.get('input[name=name]').should(
          'have.value',
          `My FS for testing logo management`,
        );

        cy.contains(`Suppression du logo:`).scrollIntoView();
        cy.contains(`Choisissez un fichier`).should('be.visible');
      });

      it('Should not be able to remove the logo if there is no logo', () => {
        cy.get('#logo-result').should('not.be.visible');

        cy.get('#btn-logo-update')
          .scrollIntoView()
          .should('be.disabled');
        cy.get('#btn-logo-delete')
          .scrollIntoView()
          .should('be.disabled');
        cy.contains(`Choisissez un fichier`).should('be.visible');
      });
    });
  });
});
