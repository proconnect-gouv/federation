import 'cypress-file-upload';
import { BASE_URL, USER_OPERATOR, USER_PASS } from '../constants.util';
import { createServiceProvider } from './service-provider-create.util';
import { login } from '../login.util';

const basicConfiguration = {
  useLogo: false,
};

describe('Service provider creation', () => {
  beforeEach(() => {
    login(USER_OPERATOR, USER_PASS);
  });

  describe('Should succeed', () => {
    it('if we add a fs with PNG logo', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: 'MyFirstFS PNG',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8'
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS PNG a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with JPEG logo', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: 'MyFirstFS JPEG',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.jpg',
        mimeType: 'image/jpg',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS JPEG a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with SVG logo', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: 'MyFirstFS SVG',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.svg',
        mimeType: 'image/svg+xml',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS SVG a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with GIF logo', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: 'MyFirstFS GIF',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.gif',
        mimeType: 'image/gif',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS GIF a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with no logo provided', () => {

      basicConfiguration.useLogo = false;

      const fs = {
        name: 'MyFirstFS NO LOGO',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS NO LOGO a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs even with locahost as redirectUri ( integration ) ', () => {

      basicConfiguration.useLogo = false;

      const fs = {
        name: 'MyFirstFS localhost no logout',
        redirectUri: 'https://localhost:9000',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS localhost no logout a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs even with locahost as redirectUriLogout ( integration ) ', () => {

      basicConfiguration.useLogo = false;

      const fs = {
        name: 'MyFirstFS localhost logout',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://localhost:9000/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service MyFirstFS localhost logout a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two redirection logout', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: '2 logout uris',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout\rhttps://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 logout uris a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two redirection uris', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: '2 redirect uris',
        redirectUri: 'https://url.com\rhttps://url2.com/',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 redirect uris a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two emails', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: '2 emails',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com\rsecondemail@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 emails a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two idAdresses', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: '2 idAdresses',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0\r1.1.1.1',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 idAdresses a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two site', () => {

      basicConfiguration.useLogo = true;

      const fs = {
        name: '2 site',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com\rhttps://secondsite.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);

      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 site a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });
  });

  describe('Should fail', () => {

    it('if we add a fs with a file way too big', () => {
      basicConfiguration.useLogo = true;
      basicConfiguration.success = false;
      basicConfiguration.failed = true;

      const logoToBig = {
        name: 'MyFirstFS TOO BIG',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'title@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'invalid_too_big_logo.jpg',
        mimeType: 'image/svg+xml',
        encoding: 'utf8',
      }

      createServiceProvider(logoToBig, basicConfiguration, BASE_URL);
      cy.contains('413').should('be.visible');
    });

    it('if we add a fs with a file who is not jpg/jpeg/png/gif/svg+xml', () => {
      const fs = {
        name: 'MyFirstFS JPEG',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        idAdresses: '192.0.0.0',
        fileName: 'not_an_image.md',
        mimeType: 'text/markdown',
        encoding: 'utf8',
        message: 'Le format du logo fourni est incorrect'
      }
      createServiceProvider(fs, basicConfiguration, BASE_URL);
      cy.contains(`Le format du logo fourni est incorrect`);
    });

    it('if the validation form failed, iit shoul re-gererate the csrf', () => {
      cy.url().should('eq', 'https://exploitation.docker.dev-franceconnect.fr/service-provider');
      cy.contains('Créer un fournisseur de service').click();

      // Fill in form
      cy.get('input[name=name]')
        .clear()
        .type('MyFirstFS');
      cy.get('textarea[name=redirectUri]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=redirectUriLogout]')
        .clear()
        .type('https://url.com/logout');
      cy.get('textarea[name=site]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=emails]')
        .clear()
        .type('valenttin@gmail.com');
      cy.get('textarea[name=ipAddresses]')
        .clear()
        .type('Obviously not an IP');

      cy.fixture('logos/valid_logo.png').then(logo => {
        cy.get('input[type=file]').upload({
          fileContent: logo,
          fileName: 'valid_logo.png',
          mimeType: 'image/png',
        });
      });

      cy.get('[type="radio"]')
        .check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]')
        .click();

      cy.get('input[name="_csrf"]').should('not.have.value', '');
    });

    it('if an error occured in the form, we display errors ( empty fields ) ', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: '***',
        redirectUri: '***',
        redirectUriLogout: '***',
        site: '***',
        emails: '***',
        idAdresses: '***',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);

      cy.contains(`Veuillez mettre un nom valide ( majuscule, minuscule, nombres et trait d'union )`).should('be.visible');
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`).should('be.visible');
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`).should('be.visible');
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`).should('be.visible');
      cy.contains(`Veuillez mettre des ips valides ( Ex: 1.1.1.1 )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (email)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: 'Good Name',
        redirectUri: 'https://goodurl.com',
        redirectUriLogout: 'https://goodurl.com/logout',
        site: 'https://goodurl.com',
        emails: '****',
        idAdresses: '1.1.1.1',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (name)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: '***',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valentin@bonnard.com',
        idAdresses: '1.1.1.1',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre un nom valide ( majuscule, minuscule, nombres et trait d'union )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (redirectUris)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: 'Good Name',
        redirectUri: '****',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valentin@bonnard.com',
        idAdresses: '1.1.1.1',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (redirectUriLogout)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: 'Good Name',
        redirectUri: 'https://url.com',
        redirectUriLogout: '***',
        site: 'https://url.com',
        emails: 'valentin@bonnard.com',
        idAdresses: '1.1.1.1',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://urlvalide.com/logout )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (site)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: 'Good name',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: '***',
        emails: 'valentin@bonnard.com',
        idAdresses: '1.1.1.1',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://site.com/ )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (emails)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: 'Good name',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: '****',
        idAdresses: '1.1.1.1',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (ips addresses)', () => {
      basicConfiguration.useLogo = false;

      const errorFs = {
        name: 'Good name',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valentin@bonnard.com',
        idAdresses: '****',
      }

      createServiceProvider(errorFs, basicConfiguration, BASE_URL);
      cy.contains(`Veuillez mettre des ips valides ( Ex: 1.1.1.1 )`).should('be.visible');
    });
  });
});

