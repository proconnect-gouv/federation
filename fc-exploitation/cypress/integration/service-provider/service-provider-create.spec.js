import 'cypress-file-upload';
import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import { createServiceProvider, uploadCSV } from './service-provider-create.util';

const BASE_URL = Cypress.config('baseUrl');

const basicConfiguration = {};
Object.defineProperty(basicConfiguration, 'useLogo', {
  value: false,
  writable: false,
  enumerable: true,
  configurable: false,
});
Object.defineProperty(basicConfiguration, 'fast', {
  value: true,
  writable: false,
  enumerable: true,
  configurable: false,
});
Object.defineProperty(basicConfiguration, 'typeEvent', {
  value: false,
  writable: false,
  enumerable: true,
  configurable: false,
});
Object.defineProperty(basicConfiguration, 'totp', {
  value: true,
  writable: false,
  enumerable: true,
  configurable: false,
});

describe('Service provider creation', () => {
  before(() => cy.resetEnv('mongoFC'));
  beforeEach(() => {
    cy.login(USER_OPERATOR, USER_PASS);
  });

  describe('Should succeed', () => {
    it('if we add a fs with PNG logo', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'MyFirstFS PNG',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS PNG a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with JPEG logo', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'MyFirstFS JPEG',
        redirectUri: 'https://url.com',
        signupId: '123456',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.jpg',
        mimeType: 'image/jpg',
        encoding: 'utf8',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS JPEG a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with SVG logo', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'MyFirstFS SVG',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.svg',
        mimeType: 'image/svg+xml',
        encoding: 'utf8',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS SVG a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with GIF logo', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'MyFirstFS GIF',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.gif',
        mimeType: 'image/gif',
        encoding: 'utf8',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS GIF a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with no logo provided', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const fs = {
        name: 'MyFirstFS NO LOGO',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS NO LOGO a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs even with locahost as redirectUri ( integration ) ', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const fs = {
        name: 'MyFirstFS localhost no logout',
        signupId: '123456',
        redirectUri: 'https://localhost:9000',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS localhost no logout a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs even with locahost as redirectUriLogout ( integration ) ', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };
      const fs = {
        name: 'MyFirstFS localhost logout',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://localhost:9000/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS localhost logout a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two redirection logout', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: '2 logout uris',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout\rhttps://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 logout uris a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two redirection uris', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: '2 redirect uris',
        signupId: '123456',
        redirectUri: 'https://url.com\rhttps://url2.com/',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 redirect uris a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs even with a mobile URI scheme as redirectUri ( integration ) ', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const fs = {
        name: 'MyFirstFS mobile URI scheme',
        signupId: '123456',
        redirectUri: 'fc+app01://openid_redirect_url\rfranceconnect://openid_redirect_url\rFC-app.02://openid_redirect_url',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS mobile URI scheme a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs even with a mobile URI scheme as redirectUriLogout ( integration ) ', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };
      const fs = {
        name: 'MyFirstFS mobile URI scheme logout',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'fc+app01://openid_redirect_url\rfranceconnect://openid_redirect_url\rFC-app.02://openid_redirect_url',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS mobile URI scheme logout a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two emails', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: '2 emails',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com\rsecondemail@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 emails a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two ipAddresses', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: '2 ipAddresses',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0\r1.1.1.1',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 ipAddresses a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a fs with two site', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: '2 site',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com\rhttps://secondsite.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 site a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if contains a "importer a csv" button', () => {
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains('Créer un fournisseur de service').click();

      // Assert
      cy.contains('Importer un CSV');
    });

    it('if display CSV name after import', () => {
      const mockConfig = {
        ...basicConfiguration,
        totp: true,
      };
      uploadCSV(mockConfig);
      // Assert
      cy.contains('fs.csv');
    });

    it('if fill form with CSVdata', () => {
      const mockConfig = {
        ...basicConfiguration,
        totp: true,
      };
      uploadCSV(mockConfig);
      // Assert
      cy.contains('fs.csv');
      cy.get('input[id=name]').should('have.value', 'hello world')
      cy.get('textarea[id=site]').should('have.value','https://www.hello.com\nhttps://www.world.com');
    });

    it('if fill form without email field', () => {
      const mockConfig = {
        ...basicConfiguration,
        totp: true,
      };
      uploadCSV(mockConfig);
      // Assert
      cy.contains('fs.csv');
      cy.get('textarea[id=emails]').should('have.value', '')
    });

    it('if fill form with CSVdata is submited', () => {
      const mockConfig = {
        ...basicConfiguration,
        totp: true,
      };
      uploadCSV(mockConfig);
      cy.get('textarea[id=emails]').type('w@hello.com\nw@world.com');
      cy.get('input[id=public]').check({ force: true });

      cy.get('button[type=submit]').click();
      // Assert
      cy.contains(
        `Le fournisseur de service hello world a été créé avec succès !`,
      );
    });

    it('if we add a URIScheme in redirectUri field', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'MyFirstFS URIScheme',
        signupId: '123456',
        redirectUri: 'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.gif',
        mimeType: 'image/gif',
        encoding: 'utf8',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFS URIScheme a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a URIScheme in redirectUriLogout field', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'MyFirstFS URIScheme',
        signupId: '123456',
        redirectUri: 'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout: 'franceconnect://url.com/logout\rhttps://secondsite.com/logout\rlocalhost:3000/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.gif',
        mimeType: 'image/gif',
        encoding: 'utf8',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      cy.contains(
        `Le fournisseur de service MyFirstFS URIScheme a été créé avec succès !`,
      );
    });

    it('if we add a fs with no redirectUri, redirectUriLogout, site and ip', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
      };

      const fs = {
        name: 'champs optionnels',
        signupId: '123456',
        redirectUri: '',
        redirectUriLogout: '',
        site: '',
        emails: 'titlen@gmail.com',
        ipAddresses: '',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);

      cy.contains(`Le fournisseur de service champs optionnels a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });
  });

  describe('Should fail', () => {
    it('if we add a fs with a file way too big', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: true,
        success: false,
        failed: true,
      };

      const logoToBig = {
        name: 'MyFirstFS TOO BIG',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'title@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'invalid_too_big_logo.jpg',
        mimeType: 'image/svg+xml',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(logoToBig, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider/create`);
      cy.contains(`Impossible de charger l'image car elle est trop lourde: `);
    });

    it('if we add a fs with a file who is not jpg/jpeg/png/gif/svg+xml', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo:true,
      };

      const fs = {
        name: 'MyFirstFS JPEG',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'not_an_image.md',
        mimeType: 'text/markdown',
        encoding: 'utf8',
        message: 'Le format du logo fourni est incorrect',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider/create`);
      cy.contains(`Format du fichier incorrect: text/markdown`);
    });

    it('if we add a fs with a malicious file who is not jpg/jpeg/png/gif/svg+xml', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo:true,
      };

      const fs = {
        name: 'MyFirstFS Malicious',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'dangerous_not_image_but_js.png',
        mimeType: 'image/png',
        encoding: 'utf8',
        message: 'Le format du logo fourni est incorrect',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider/create`);
      cy.get('#box-upload').should('have.class', 'is-invalid');
      cy.contains(`Votre image n'est pas à la bonne taille ou bon format`);

    });

    it('if the validation form failed, it should re-gererate the csrf', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
      };

      const fs = {
        name: 'MyFirstFS',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: 'Obviously not an IP',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        encoding: 'utf8',
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.get('input[name="_csrf"]').should('not.have.value', '');
    });

    it('if an error occured in the form, we display errors ( empty fields ) ', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const errorFs = {
        name: '***',
        signupId: '***',
        redirectUri: '***',
        redirectUriLogout: '***',
        site: '***',
        emails: '***',
        ipAddresses: '***',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et trait d'union )`,
      ).should('be.visible');
      cy.contains(
        `Veuillez mettre un identifiant signUP valide ( chiffres seulement )`,
      ).should('be.visible');
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      ).should('be.visible');
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      ).should('be.visible');
      cy.contains(
        `Veuillez mettre des emails valides ( Ex: email@email.com )`,
      ).should('be.visible');
      cy.contains(`Veuillez mettre des ips valides ( Ex: 1.1.1.1 )`).should(
        'be.visible',
      );
    });

    it('if an error occured in the form, we diplays error (name)', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };
      const errorFs = {
        name: '***',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et trait d'union )`,
      ).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (redirectUris)', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };
      
      const errorFs = {
        name: 'Good Name',
        signupId: '123456',
        redirectUri: '****',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
      };

      createServiceProvider(errorFs, mockConfig);
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      ).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (redirectUriLogout)', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const errorFs = {
        name: 'Good Name',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: '***',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/logout )`,
      ).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (site)', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const errorFs = {
        name: 'Good name',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: '***',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://site.com/ )`,
      ).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (emails)', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const errorFs = {
        name: 'Good name',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: '****',
        ipAddresses: '1.1.1.1',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre des emails valides ( Ex: email@email.com )`,
      ).should('be.visible');
    });

    it('if an error occured in the form, we diplays error (ips addresses)', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const errorFs = {
        name: 'Good name',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '****',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(`Veuillez mettre des ips valides ( Ex: 1.1.1.1 )`).should(
        'be.visible',
      );
    });

    it('if an error occured in the form, we diplays error ( signUP ID )', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
        useLogo: false,
      };

      const errorFs = {
        name: 'Good name',
        signupId: '****',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
      };

      // Action
      createServiceProvider(errorFs, mockConfig);

      // Assert
      cy.contains(`Veuillez mettre un identifiant signUP valide ( chiffres seulement )`).should(
        'be.visible',
      );
    });
  });
});
