import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import {
  createServiceProvider,
  uploadCSV,
} from './service-provider-create.utils';

const BASE_URL = Cypress.config('baseUrl');

const defaultConfig = {
  value: true,
  writable: false,
  enumerable: true,
  configurable: false,
};

const basicConfiguration = {
  fast: defaultConfig,
  typeEvent: {
    ...defaultConfig,
    value: false,
  },
  totp: defaultConfig,
};

describe('Service provider creation', () => {
  before(() => {
    Cypress.session.clearAllSavedSessions();
    cy.resetEnv('mongo');
  });
  beforeEach(() => {
    cy.clearBusinessLog();

    cy.login(USER_OPERATOR, USER_PASS);
  });

  describe('Should succeed', () => {
    const spData = {
      name: 'MyFirstSP',
      signupId: '123456',
      redirectUri: 'https://url.com/login',
      redirectUriLogout: 'https://url.com/logout',
      site: 'https://url.com',
      emails: 'titlen@gmail.com',
      type: 'public',
      eidas: '1',
      ipAddresses: '',
    };

    it('if eidas level 1 is choosen', () => {
      // Action
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains('Créer un fournisseur de service').click();

      cy.formFill(spData, basicConfiguration);

      cy.totp({ totp: true });
      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstSP a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();

      cy.hasBusinessLog({
        entity: 'service-provider',
        action: 'create',
        user: USER_OPERATOR,
      });
    });

    it('if we add a sp even with localhost as redirectUri (integration) ', () => {
      // Action
      createServiceProvider(
        {
          ...spData,
          name: 'MyFirstSP localhost',
          redirectUri: 'https://localhost:9000',
        },
        basicConfiguration,
      );

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstSP localhost a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider even with localhost as redirectUriLogout ( integration ) ', () => {
      // Action
      createServiceProvider(
        {
          ...spData,
          name: 'MyFirstSP localhost logout',
          redirectUriLogout: 'https://localhost:9000/logout',
        },
        basicConfiguration,
      );

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstSP localhost logout a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with two logout redirections', () => {
      // Action
      createServiceProvider(
        {
          ...spData,
          name: '2 logout uris',
          redirectUriLogout: 'https://url.com/logout\rhttps://url.com/logout',
        },
        basicConfiguration,
      );

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 logout uris a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with two redirect uris', () => {
      // Arrange
      const fs = {
        name: '2 redirect uris',
        signupId: '123456',
        redirectUri: 'https://url.com\rhttps://url2.com/',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        eidas: '1',
        ipAddresses: '',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 redirect uris a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider even with a mobile URI scheme as redirectUri ( integration ) ', () => {
      // Arrange
      const fs = {
        name: 'MyFirstSP mobile URI scheme',
        signupId: '123456',
        redirectUri:
          'fc+app01://openid_redirect_url\rfranceconnect://openid_redirect_url\rFC-app.02://openid_redirect_url',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        eidas: '1',
        ipAddresses: '',
      };
      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstSP mobile URI scheme a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider even with a mobile URI scheme as redirectUriLogout ( integration ) ', () => {
      // Arrange
      const fs = {
        name: 'MyFirstSP mobile URI scheme logout',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout:
          'fc+app01://openid_redirect_url\rfranceconnect://openid_redirect_url\rFC-app.02://openid_redirect_url',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        eidas: '1',
        ipAddresses: '',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstSP mobile URI scheme logout a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with two emails', () => {
      // Arrange
      const fs = {
        name: '2 emails',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com\rsecondemail@gmail.com',
        eidas: '1',
        ipAddresses: '',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 emails a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with two ipAddresses', () => {
      // Arrange
      const fs = {
        name: '2 ipAddresses',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0\r1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service 2 ipAddresses a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with two websites', () => {
      // Arrange
      const fs = {
        name: '2 site',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com\rhttps://secondsite.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '',
        eidas: '1',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(`Le fournisseur de service 2 site a été créé avec succès !`);
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with no email', () => {
      // Action
      createServiceProvider(
        { ...spData, name: 'no email', emails: '' },
        basicConfiguration,
      );

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service no email a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a service provider with no signupId', () => {
      // Arrange
      const fs = {
        name: 'no signupId',
        signupId: '',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com\rsecondemail@gmail.com',
        ipAddresses: '',
        eidas: '1',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service no signupId a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('should have client secret in hexadecimal form', () => {
      // Arrange
      const fs = {
        name: 'check hexa',
        signupId: '1234',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com\rsecondemail@gmail.com',
        ipAddresses: '',
        eidas: '1',
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service check hexa a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
      cy.contains('check hexa');
      cy.get('#list-table > tbody > tr > td')
        .eq(0)
        .click();
      cy.get('#client_secret')
        .invoke('val')
        .then(val => {
          const hexaConstraints = /[0-9A-Fa-f]{64}/g;
          const secretIsValid = hexaConstraints.test(val);
          expect(secretIsValid).to.be.true;
        });
    });

    describe('Create by CSV file', () => {
      it('if contains a "importer a csv" button', () => {
        // Arrange
        cy.url().should('eq', `${BASE_URL}/service-provider`);

        // Action
        cy.contains('Créer un fournisseur de service').click();

        // Assert
        cy.contains('Importer un CSV');
      });

      it('if display CSV name after import', () => {
        // Arrange
        const filename = 'valid_fs_comma';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#file-name').contains(`${filename}.csv`);
      });

      it('if fill form with CSVdata with comma', () => {
        // Arrange
        const filename = 'valid_fs_comma';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#file-name').contains(`${filename}.csv`, {
          timeout: 3000,
        });
        cy.get('#fs-form').within(() => {
          cy.get('input[id=name]').should('have.value', 'hello world');
          cy.get('textarea[id=site]').should(
            'have.value',
            'https://www.hello.com\nhttps://www.world.com',
          );
        });
      });

      it('if fill form with CSVdata with semicolon', () => {
        const filename = 'valid_fs_semicolon';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#file-name').contains(`${filename}.csv`);
        cy.get('#fs-form').within(() => {
          cy.get('input[id=name]').should('have.value', 'hello semicolon');
          cy.get('input[id=signup_id]').should('have.value', '1234567890');
          cy.get('textarea[id=redirect_uris]').should(
            'have.value',
            'https://www.hello.com/callback\nhttps://www.world.com/callback',
          );
          cy.get('textarea[id=post_logout_redirect_uris]').should(
            'have.value',
            'https://www.hello.com/logout\nhttps://www.world.com/logout',
          );
          cy.get('textarea[id=site]').should(
            'have.value',
            'https://www.hello.com\nhttps://www.world.com',
          );
          cy.get('textarea[id=emails]').should('have.value', 'test@me.com');
          cy.get('textarea[id=IPServerAddressesAndRanges]').should(
            'have.value',
            '87.252.12.28\n195.25.216.208/28\n2001:0db8:0000:85a3:0000:0000:ac1f:8001',
          );

          cy.get('input[id=scope-openid]').should('have.attr', 'checked');
        });
      });

      it('if fill form without email field', () => {
        // Arrange
        const filename = 'valid_fs_comma';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#fs-form').within(() => {
          cy.get('input[id=name]').should('have.value', 'hello world');
          cy.get('textarea[id=site]').should(
            'have.value',
            'https://www.hello.com\nhttps://www.world.com',
          );
          cy.get('textarea[id=emails]').should('have.value', '');
        });
      });

      it('if fill form with CSVdata is submited', () => {
        // Arrange
        const filename = 'valid_fs_comma';

        // Action
        uploadCSV(filename);

        cy.get('textarea[id=emails]').type('w@hello.com\nw@world.com');
        cy.get('input[id=public]').check({
          force: true,
        });

        cy.totp(basicConfiguration);
        cy.get('button[type=submit]').click();

        // Assert
        cy.contains(
          `Le fournisseur de service hello world a été créé avec succès !`,
        );
      });

      it('unless an error of parsing appears', () => {
        // Arrange
        const filename = 'failed_fs';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#file-name').contains(`${filename}.csv`);
        cy.get('#alert_error').contains('Problème de parsing');
      });

      it('if fill form with CSVdata with empty value', () => {
        // Arrange
        const filename = 'valid_fs_with_empty_values_semicolon';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#file-name').contains(`${filename}.csv`);
        cy.get('#fs-form').within(() => {
          cy.get('input[id=name]').should('have.value', 'hello semicolon');
          cy.get('input[id=signup_id]').should('have.value', '1234567890');
          cy.get('textarea[id=redirect_uris]').should(
            'have.value',
            'https://www.hello.com/callback\nhttps://www.world.com/callback',
          );
          cy.get('textarea[id=post_logout_redirect_uris]').should(
            'have.value',
            'https://www.hello.com/logout\nhttps://www.world.com/logout',
          );
          cy.get('textarea[id=site]').should(
            'have.value',
            'https://www.hello.com\nhttps://www.world.com',
          );
          cy.get('textarea[id=emails]').should('have.value', 'test@me.com');
          cy.get('textarea[id=IPServerAddressesAndRanges]').should(
            'have.value',
            '87.252.12.28\n195.25.216.208/28\n2001:0db8:0000:85a3:0000:0000:ac1f:8001',
          );

          cy.get('input[id=scope-openid]').should('have.attr', 'checked');
        });
      });

      it('if fill form with CSVdata with wrong key values added', () => {
        // Arrange
        const filename = 'valid_fs_with_extra_columns_semicolon';

        // Action
        uploadCSV(filename);

        // Assert
        cy.get('#file-name').contains(`${filename}.csv`);
        cy.get('#fs-form').within(() => {
          cy.get('input[id=name]').should('have.value', 'hello semicolon');
          cy.get('input[id=signup_id]').should('have.value', '1234567890');
          cy.get('textarea[id=redirect_uris]').should(
            'have.value',
            'https://www.hello.com/callback\nhttps://www.world.com/callback',
          );
          cy.get('textarea[id=post_logout_redirect_uris]').should(
            'have.value',
            'https://www.hello.com/logout\nhttps://www.world.com/logout',
          );
          cy.get('textarea[id=site]').should(
            'have.value',
            'https://www.hello.com\nhttps://www.world.com',
          );
          cy.get('textarea[id=emails]').should('have.value', 'test@me.com');
          cy.get('textarea[id=IPServerAddressesAndRanges]').should(
            'have.value',
            '87.252.12.28\n195.25.216.208/28\n2001:0db8:0000:85a3:0000:0000:ac1f:8001',
          );

          cy.get('input[id=scope-openid]').should('have.attr', 'checked');
        });
      });
    });

    it('if we add a URIScheme in redirectUri field', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
      };

      const fs = {
        name: 'MyFirstSP URIScheme',
        signupId: '123456',
        redirectUri:
          'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: '1',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstSP URIScheme a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a URIScheme in redirectUriLogout field', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
      };

      const fs = {
        name: 'MyFirstSP URIScheme',
        signupId: '123456',
        redirectUri:
          'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout:
          'franceconnect://url.com/logout\rhttps://secondsite.com/logout\rlocalhost:3000/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: '1',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      cy.contains(
        `Le fournisseur de service MyFirstSP URIScheme a été créé avec succès !`,
      );
    });

    it('if we add a fs with no redirectUri, redirectUriLogout, site and ip', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
      };

      const fs = {
        name: 'champs optionnels',
        signupId: '123456',
        redirectUri: '',
        redirectUriLogout: '',
        site: '',
        emails: 'titlen@gmail.com',
        ipAddresses: '',
        eidas: 1,
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);

      cy.contains(
        `Le fournisseur de service champs optionnels a été créé avec succès !`,
      );
      cy.get('.alert-success > .close').click();
    });

    it('if we add a name containing all kind of authorized chars', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
      };

      const fs = {
        name: 'My_FS with 42 : ÉçïœâùÆ/ÙÈ.com+2 & ee',
        signupId: '123456',
        redirectUri:
          'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout:
          'franceconnect://url.com/logout\rhttps://secondsite.com/logout\rlocalhost:3000/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };
      // Action
      createServiceProvider(fs, mockConfig);

      cy.contains(
        `Le fournisseur de service My_FS with 42 : ÉçïœâùÆ/ÙÈ.com+2 & ee a été créé avec succès !`,
      );
    });

    it('if we add a fs with an entityId', () => {
      // Arrange
      const mockConfig = {
        ...basicConfiguration,
      };

      const fs = {
        name: 'My_FS with an entityId',
        signupId: '123456',
        redirectUri:
          'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout:
          'franceconnect://url.com/logout\rhttps://secondsite.com/logout\rlocalhost:3000/logout',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
        entityId:
          '0a0cd64372db6ecf39c317c0c74ce90f02d8ad7d510ce054883b759d666a996bc',
      };
      // Action
      createServiceProvider(fs, mockConfig);

      cy.contains(
        `Le fournisseur de service My_FS with an entityId a été créé avec succès !`,
      );
    });
  });

  describe('Should fail', () => {
    it('if the validation form failed, it should re-gererate the csrf', () => {
      // Arrange
      const fs = {
        name: 'MyFirstSP',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: 'Obviously not an IP',
        eidas: 1,
      };

      // Action
      createServiceProvider(fs, basicConfiguration);

      // Assert
      cy.get('input[name="_csrf"]').should('not.have.value', '');
    });

    it('if an error occured in the form, we display errors (empty fields) ', () => {
      // Arrange
      const errorFs = {
        name: '',
        signupId: '',
        redirectUri: '',
        redirectUriLogout: '',
        site: '',
        emails: '',
        ipAddresses: '',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
      )
        .scrollIntoView()
        .should('be.visible');
      cy.contains(
        `Veuillez mettre un identifiant signUP valide ( chiffres seulement )`,
      ).should('not.be.visible');
      cy.get('[name="redirectUri"]').should('be.empty');
      cy.get('[name="redirectUriLogout"]').should('be.empty');
      cy.contains(
        `Veuillez mettre des emails valides ( Ex: email@email.com )`,
      ).should('not.be.visible');
      cy.get('[name="ipAddresses"]').should('be.empty');
    });

    it('if an error occured in the form, we display an error (name)', () => {
      // Arrange
      const errorFs = {
        name: '',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (name with html)', () => {
      // Arrange
      const errorFs = {
        name: 'test avec <script>',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre un nom valide ( majuscule, minuscule, nombres et '.:_/!+- [espace] )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (redirectUris)', () => {
      // Arrange
      const errorFs = {
        name: 'Good Name',
        signupId: '123456',
        redirectUri: '****',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      createServiceProvider(errorFs, basicConfiguration);
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (redirectUriLogout)', () => {
      // Arrange
      const errorFs = {
        name: 'Good Name',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: '***',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/logout )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (site)', () => {
      // Arrange
      const errorFs = {
        name: 'Good name',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: '***',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre une URL valide ( Ex: https://site.com/ )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (emails)', () => {
      // Arrange
      const errorFs = {
        name: 'Good name',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: '****',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`)
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (ips addresses)', () => {
      // Arrange
      const errorFs = {
        name: 'Good name',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '****',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(`Veuillez mettre des ips valides ( Ex: 1.1.1.1 )`)
        .scrollIntoView()
        .should('be.visible');
    });

    it('if an error occured in the form, we display an error (signUP ID)', () => {
      // Arrange
      const errorFs = {
        name: 'Good name',
        signupId: '****',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'test@test.com',
        ipAddresses: '1.1.1.1',
        eidas: '1',
      };

      // Action
      createServiceProvider(errorFs, basicConfiguration);

      // Assert
      cy.contains(
        '.invalid-feedback',
        `Veuillez mettre un identifiant signUP valide ( chiffres seulement )`,
      )
        .scrollIntoView()
        .should('be.visible');
    });
  });
});
