import * as otplib from 'otplib';
const BASE_URL = 'https://exploitation.docker.dev-franceconnect.fr/';
const USER_ADMIN = 'jean_moust';
const USER_OPERATOR = 'jean_patoche';
const USER_PASS = 'georgesmoustaki';

describe('update a service-provider', () => {
  beforeEach(() => {
    cy.visit(`${BASE_URL}`);
    cy.get('input[name="username"]').type(USER_OPERATOR);
    cy.get('input[name="password"]').type(USER_PASS);
    cy.get('button[type="submit"]').click();
  });

  describe('first step: create FS', () => {
    it('Should be able to add a fs', () => {
      cy.url().should('eq', 'https://exploitation.docker.dev-franceconnect.fr/service-provider');
      cy.contains('Créer un fournisseur de service').click();

      // Fill in form
      cy.get('input[name=name]')
        .clear()
        .type('GenerateClientSecretFS');
      cy.get('textarea[name=redirectUri]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=redirectUriLogout]')
        .clear()
        .type('https://url.com/logout');
      cy.get('textarea[name=site]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=emails]')
        .clear()
        .type('valenttin@gmail.com');
      cy.get('textarea[name=ipAddresses]')
        .clear()
        .type('192.0.0.0');
      cy.get('[type="radio"]')
        .check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]')
        .click();

      cy.url().should('eq', 'https://exploitation.docker.dev-franceconnect.fr/service-provider');
      cy.contains(`Le fournisseur de service GenerateClientSecretFS a été créé avec succès !`)
    });

    it('should re-generate a csrf token if the form validation failed previously', () => {
      cy.url().should('eq', 'https://exploitation.docker.dev-franceconnect.fr/service-provider');
      cy.contains('Créer un fournisseur de service').click();

      // Fill in form
      cy.get('input[name=name]')
        .clear()
        .type('MyFirstFS');
      cy.get('textarea[name=redirectUri]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=redirectUriLogout]')
        .clear()
        .type('https://url.com/logout');
      cy.get('textarea[name=site]')
        .clear()
        .type('https://url.com');
      cy.get('textarea[name=emails]')
        .clear()
        .type('valenttin@gmail.com');
      cy.get('textarea[name=ipAddresses]')
        .clear()
        .type('Obviously not an IP');
      cy.get('[type="radio"]')
        .check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]')
        .click();

      cy.get('input[name="_csrf"]').should('not.have.value', '');
    });
  });

  describe('Second step: update the FS => generate a new client secret', () => {
    it('Should be able to update a fs with a good totp', () => {
      cy.visit('https://exploitation.docker.dev-franceconnect.fr/service-provider?page=1&limit=9000')

      cy.contains(`GenerateClientSecretFS`).should('be.visible');
      cy.get('a.btn-action-generate-client-secret').last().click();

      // Fill in form
      cy.get('input[name="_totp"]').then(totp => {
        const token = otplib.authenticator.generate('KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD');
        cy.get('input[name="_totp"]').type(token);
      });

      cy.get('button[type="submit"]').click();

      cy.wait(800);
      cy.contains('Confirmer').click();
      cy.wait(800);
      cy.contains(`Le nouveau client secret du fournisseur de service GenerateClientSecretFS a été généré avec succés !`).should('be.visible');
      cy.get('.alert-success > .close').click();
    });

    it('Should be able to update a fs with a false totp', () => {
      cy.visit('https://exploitation.docker.dev-franceconnect.fr/service-provider?page=1&limit=9000')

      cy.contains(`GenerateClientSecretFS`).should('be.visible');
      cy.get('a.btn-action-generate-client-secret').last().click();

      // Fill in form

      cy.get('button[type="submit"]').click();

      cy.wait(800);
      cy.contains('Confirmer').click();
      cy.wait(800);

      cy.contains(` Le TOTP saisi n'est pas valide`).should('be.visible');
    });
  });
});
