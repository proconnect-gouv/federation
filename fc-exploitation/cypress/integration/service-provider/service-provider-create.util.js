
const BASE_URL = Cypress.config('baseUrl');

const base64REGEX = /^(?:[A-Za-z0-9\\\+/]{4})*(?:[A-Za-z0-9\\\+/]{2}==|[A-Za-z0-9\\\+/]{3}=|[A-Za-z0-9\\\+/]{4})$/;
/**
 * Allow to convert base64 content in blob
 * @param {string} base64 base64 data
 * @param {string} type type mime
 */
const b64toBlob = async (data, type = 'application/octet-stream') => {
  const isSVG =
    data &&
    typeof data === 'string' &&
    (data.startsWith('<svg') || data.startsWith('<?xml'));
  const isBase64 = base64REGEX.test(data);
  if (!isSVG && !isBase64) {
    return data;
  }
  const format = isSVG
    ? `data:image/svg+xml;utf8,${data}`
    : `data:${type};base64,${data}`;
  const res = await fetch(format);
  return await res.blob();
};

export function createServiceProvider(serviceProviderInfo, configuration) {
  cy.url().should('eq', `${BASE_URL}/service-provider`);
  cy.contains('CrÃ©er un fournisseur de service').click();

  const spFields = (({
    name,
    redirectUri,
    redirectUriLogout,
    site,
    emails,
    ipAddresses,
  }) => ({ name, redirectUri, redirectUriLogout, site, emails, ipAddresses }))(
    serviceProviderInfo,
  );
  cy.formFill(spFields, configuration);

  // Fill in form
  // You cannot directly await the return of "fixtures" (not a real promise...)
  if (configuration.useLogo === true) {
    const {
      fileName,
      mimeType,
      encoding,
    } = serviceProviderInfo;

    cy.fixture(`logos/${fileName}`)
      .then(image => b64toBlob(image, mimeType))
      .then(fileContent => {
        cy.get('input[type=file]').upload({
          fileContent,
          fileName,
          mimeType,
          encoding,
        });
      });
  }

  cy.get('[type="radio"]').check('public', { force: true });
  cy.get('form[name="fs-form"] button[type="submit"]').click();
}
