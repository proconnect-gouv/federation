import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import { createServiceProvider } from './service-provider-create.util';

const BASE_URL = Cypress.config('baseUrl');

const configuration = {};

describe('update a service-provider', () => {
  before(() => cy.resetEnv('mongoFC'));
  beforeEach(() => {
    cy.login(USER_OPERATOR, USER_PASS);
  });

  describe('first step: create FS', () => {
    it('Should be able to add a fs ( all ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://urlModificate.com\nhttps://urlModificate.com',
        jwksUri: 'https://url.com/jwks',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
        eidas: 1,
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFSCypress a été créé avec succès !`,
      );
    });
  });

  describe('Second step: update the FS', () => {
    it('Should be possible to update a service provider legacy if we do not fill the scopes but any other field having still no filter on scopes', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'Test_update_old_service_provider',
        signupId: '123456789',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: 'https://url.com\nhttps://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`${fs.name}`)
        .should('be.visible')
        .click();
      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.formFill(fs, mockConfig);

      cy.get('[type="radio"]').check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.formControl(fs);
      cy.get('#scope-openid').should('not.be.checked');

      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });

    it('Should be possible to update an old service provider if we do fill the scopes, the updated fs should have the openid scope even if this one was omitted', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'Test_update_old_service_provider',
        signupId: '123456789',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: 'https://url.com\nhttps://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`${fs.name}`)
        .should('be.visible')
        .click();
      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.formFill(fs, mockConfig);

      cy.get('[type="radio"]').check('public');
      cy.get('[id="scope-given_name"]').check('given_name');
      cy.get('[id="scope-family_name"]').check('family_name');

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.formControl(fs);
      cy.get('#scope-openid').should('be.checked');
      cy.get('#scope-given_name').should('be.checked');
      cy.get('#scope-family_name').should('be.checked');

      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });

    it('Should select "openid" if any other scope is checked and now display "openid" as disabled', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://urlModificate.com\nhttps://urlModificate.com',
        jwksUri: 'https://url.com/jwks',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`${fs.name}`)
        .should('be.visible')
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('[id="scope-given_name"]').check('given_name', { force: true });

      cy.get('[type="radio"]').check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.formControl(fs);
      cy.get('#scope-openid').should('be.checked');
      cy.get('#scope-openid').should('be.disabled');
      cy.get('#scope-given_name').should('be.checked');

      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });

    it('Should be able to update a fs ( all ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: 'https://url.com\nhttps://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        scopes: ['openid'],
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`${fs.name}`).should('be.visible');

      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);
      cy.get('[id="scope-openid"]').check('openid', { force: true });

      cy.get('[type="radio"]').check('public', { force: true });

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.formControl(fs);
      cy.get('#scope-openid').should('be.checked');

      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });

    it('Should be able to update a fs ( name with special chars ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { name: 'My_FS with 42 : ÉçïœâùÆ/ÙÈ.com+2 & ee' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      // Fill in form
      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.formControl(fs);

      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });

    it('Should be able to update a fs ( name ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { name: 'MyFirstFSCypressModificate' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      // Fill in form
      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.formControl(fs);

      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });

    it('Should be able to update a fs ( urlRedirectUri: one entry ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { redirectUri: 'https://urlModificate.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( urlRedirectUri: multiple entries) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        redirectUri: 'https://urlModificate.com\nhttps://urlModificate.com',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( mobile urlRedirectUri: multiple entries) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        redirectUri:
          'franceconnect://openid_redirect_url\nfc+app01://openid_redirect_url\nFC-app.02://openid_redirect_url',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( mobile redirectUriLogout: multiple entries) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        redirectUriLogout:
          'franceconnect://openid_redirect_url\nfc+app01://openid_redirect_url\nFC-app.02://openid_redirect_url',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( jwks url ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { jwksUri: 'https://url.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( site: one entry ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { site: 'https://url.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( site:multiple entries ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { site: 'https://site.com\nhttps://site.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( emails ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { emails: 'emailupdate@gmail.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( signUP ID ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { signupId: '987654' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs with empty field execept name ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypressModificate',
        signupId: '',
        redirectUri: '',
        redirectUriLogout: '',
        jwksUri: '',
        site: '',
        emails: '',
        ipAddresses: '',
        eidas: '1',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should not be able to update a fs with an error( name ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { name: 'My FS <scrip>alert("");</script>' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      // Assert
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`);
    });

    it('Should not be able to update a fs with an error( emails ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { emails: '* *' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      // Assert
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`);
    });

    it('Should not be able to update a fs with an error( jwksUri ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { jwksUri: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      // Assert
      cy.contains(
        `Veuillez mettre une client keys url valide au format ( Ex: https://urlvalide.fr/jwks )`,
      );
    });

    it('Should not be able to update a fs with an error( site ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { site: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      // Assert
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://site.com/ )`);
    });

    it('Should not be able to update a fs with an error( redirectUriLogout ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { redirectUriLogout: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      // Assert
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      );
    });

    it('Should not be able to update a fs with an error( redirectUri ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { redirectUri: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });
      // Assert
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      );
    });

    it('Should not be able to update a fs with an error( signUP ID ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { signupId: '***' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypressModificate`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      // Assert
      cy.contains(
        `Veuillez mettre un identifiant signUP valide ( chiffres seulement )`,
      );
    });

    it('Should be able to update a fs ( scopes ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypressModificate',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://urlModificate.com\nhttps://urlModificate.com',
        jwksUri: 'https://url.com/jwks',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);
      cy.get('#scope-email').uncheck();
      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );

      cy.contains('openid');
      cy.get('#scope-email').should('be.visible');
      cy.get('#scope-email').should('not.have.class', 'checked');

      cy.formControl(fs);
    });

    it('Should not be able to update a fs if TOTP is empty', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: undefined,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: ['https://url.com\nhttps://url.com'],
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      cy.get('[type="radio"]').check('public', { force: true });
      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(`Veuillez mettre un code TOTP valide.`);
    });

    it('Should not be able to update a fs if TOTP is wrong', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: false,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: ['https://url.com\nhttps://url.com'],
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 1,
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.get('#fs-form').within(() => {
        cy.formFill(fs, mockConfig);
      });

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(`Le TOTP saisi n'est pas valide`);
    });
  });

  describe('consent field', () => {
    const mockConfig = {
      ...configuration,
      totp: true,
    };
    const fsConsentFalse = {
      name: 'MyFSConsentFalse',
      signupId: '123456',
      redirectUri: 'https://url.com',
      redirectUriLogout: 'https://url.com/logout',
      jwksUri: 'https://url.com/jwks',
      site: 'https://url.com',
      emails: 'titlen@gmail.com',
      ipAddresses: '192.0.0.0',
      eidas: 1,
    };
    const fsConsentTrue = {
      name: 'MyFSConsentTrue',
      signupId: '123456',
      redirectUri: 'https://url.com',
      redirectUriLogout: 'https://url.com/logout',
      jwksUri: 'https://url.com/jwks',
      site: 'https://url.com',
      emails: 'titlen@gmail.com',
      ipAddresses: '192.0.0.0',
      identityConsent: true,
      eidas: 1,
    };
    describe('creating service providers', () => {
      it('should create a service provider requiring a consent', () => {
        createServiceProvider(fsConsentTrue, mockConfig);
      });

      it('should create a service provider not requiring a consent', () => {
        createServiceProvider(fsConsentFalse, mockConfig);
      });
    });
    describe('update', () => {
      it('should update a service provider removing the requirement of the consent', () => {
        cy.get('#list-table')
          .contains(`${fsConsentTrue.name}`)
          .click();
        cy.get('form')
          .find('[id="consent-not-required"]')
          .check('false', { force: true });
        cy.totp({ totp: true });
        cy.get('form[name="fs-form"] button[type="submit"]').click();
        cy.get('.alert-success')
          .contains(`${fsConsentTrue.name}`)
          .click();
        cy.get('#consent-not-required').should('be.checked');
      });

      it('should switch consent to false if public type is selected', () => {
        cy.get('#list-table')
          .contains(`${fsConsentTrue.name}`)
          .click();
        cy.get('form')
          .find('[id="consent-required"]')
          .check('true', { force: true });
        cy.get('form')
          .find('[id="public"]')
          .check('public', { force: true });
        cy.totp({ totp: true });
        cy.get('#consent-not-required').should('be.checked');
        cy.get('form[name="fs-form"] button[type="submit"]').click();
        cy.get('.alert-success')
          .contains(`${fsConsentTrue.name}`)
          .click();
        cy.get('#consent-not-required').should('be.checked');
      });

      it('should not update a public service provider if consent is required', () => {
        cy.get('#list-table')
          .contains(`${fsConsentTrue.name}`)
          .click();
        cy.get('form')
          .find('[id="public"]')
          .check('public', { force: true });
        cy.get('form')
          .find('[id="consent-required"]')
          .check('true', { force: true });
        cy.totp({ totp: true });
        cy.get('form[name="fs-form"] button[type="submit"]').click();
        cy.get('#consent-not-required')
          .should('be.checked')
          .should('have.class', 'is-invalid');
      });

      it('should update a service provider adding the requirement of the consent', () => {
        cy.contains(`${fsConsentFalse.name}`).click();
        cy.get('form')
          .find('[id="public"]')
          .click({ force: true });
        cy.get('form')
          .find('[id="private"]')
          .check('private', { force: true });
        cy.get('form')
          .find('[id="consent-required"]')
          .check('true', { force: true });
        cy.totp({ totp: true });
        cy.get('form[name="fs-form"] button[type="submit"]').click();
        cy.contains(`${fsConsentFalse.name}`).click();
        cy.get('#consent-required').should('be.checked');
      });
    });
  });

  describe('Update service provider eidas level 2', () => {
    it('Should be able to add a fs with eidas level 2', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
        useLogo: false,
      };

      const fs = {
        name: 'MyFirstFSHigh',
        signupId: '123456',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: 'https://urlModificate.com\nhttps://urlModificate.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 2,
      };

      // Action
      createServiceProvider(fs, mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service ${fs.name} a été créé avec succès !`,
      );
    });
    it('Should be possible to update a service provider created', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
        useLogo: false,
      };

      const fs = {
        name: 'Test_update_MyFirstFSHigh',
        signupId: '123456789',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        jwksUri: 'https://url.com/jwks',
        site: 'https://url.com\nhttps://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        eidas: 2,
        userinfo_encrypted_response_enc: 'A256GCM',
        userinfo_encrypted_response_alg: 'RSA-OAEP',
        userinfo_signed_response_alg: 'ES256',
        id_token_signed_response_alg: 'ES256',
        id_token_encrypted_response_alg: 'RSA-OAEP',
        id_token_encrypted_response_enc: 'A256GCM',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSHigh`)
        .should('be.visible')
        .click();
      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);

      cy.contains('userinfo_encrypted_response_enc');
      cy.contains('userinfo_encrypted_response_alg');
      cy.contains('userinfo_signed_response_alg');
      cy.contains('id_token_signed_response_alg');
      cy.contains('id_token_encrypted_response_alg');
      cy.contains('id_token_encrypted_response_enc');

      cy.formFill(fs, mockConfig);

      cy.get('[type="radio"]').check('public', {
        force: true,
      });

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.contains(
        `Le fournisseur de service ${fs.name} a été modifié avec succès !`,
      );
    });
  });

  describe('cnam_paiements_ij scope activation', () => {
    it('create a service provider with cnam_paiements_ij and see this scope appears in scopes list', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'cnam_paiements_ij scope',
        signupId: '123456',
        redirectUri:
          'franceconnect://url.com\rhttps://secondsite.com\rlocalhost',
        redirectUriLogout:
          'franceconnect://url.com/logout\rhttps://secondsite.com/logout\rlocalhost:3000/logout',
        jwksUri: 'https://url.com/jwks',
        site: 'https://url.com',
        emails: 'titlen@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.gif',
        mimeType: 'image/gif',
        encoding: 'utf8',
        eidas: 1,
        scopes: ['cnam_paiements_ij'],
      };
      // Action
      createServiceProvider(fs, mockConfig);

      cy.contains(
        `Le fournisseur de service cnam_paiements_ij scope a été créé avec succès !`,
      );
      cy.reload();
      cy.contains('cnam_paiements_ij scope').click();
      cy.get('[type="checkbox"]').should('be.visible');
    });
  });
});
