import 'cypress-file-upload';
import {
  USER_OPERATOR,
  USER_PASS,
} from '../../../../shared/cypress/support/constants';
import { createServiceProvider } from './service-provider-create.util';

const BASE_URL = Cypress.config('baseUrl');

const configuration = {};

describe('update a service-provider', () => {
  before(() => cy.resetEnv('mongoFC'));
  beforeEach(() => {
    cy.login(USER_OPERATOR, USER_PASS);
  });

  describe('first step: create FS', () => {
    it('Should be able to add a fs ( all ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
        fileName: 'valid_logo.png',
        mimeType: 'image/png',
      };

      // Action
      createServiceProvider(fs,mockConfig);

      // Assert
      cy.url().should('eq', `${BASE_URL}/service-provider`);
      cy.contains(
        `Le fournisseur de service MyFirstFSCypress a été créé avec succès !`,
      );
    });
  });

  describe('Second step: update the FS', () => {
    it('Should contain the disabled claims list ', () => {
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.contains("openid");
      cy.contains("dgfip_rfr");
      cy.get("#scope-dgfip_rfr").should('be.disabled');
      cy.get("#scope-openid").should('be.disabled');
    });

    it('Should be able to update a fs ( all ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');

      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('[type="radio"]').check('public', { force: true });

      cy.formControl(fs);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.url().should('match', /\/service-provider\/[a-z0-9]{24}$/);
      cy.contains(
        `Le fournisseur de service MyFirstFSCypress a été modifié avec succès !`,
      );
    });

    it('Should be able to update a fs ( name ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { name: 'MyFirstFSCypressModificate' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      // Fill in form
      cy.formFill(fs, mockConfig);
      cy.formControl(fs);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
    });

    it('Should be able to update a fs ( urlRedirectUri ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { redirectUri: 'https://urlModificate.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();
      
      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( site ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { site: 'https://siteModificate.com' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      
      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should be able to update a fs ( emails ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: true,
      };

      const fs = { emails: 'notvalentin@gmail.com' };
      
      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(
        `Le fournisseur de service MyFirstFSCypressModificate a été modifié avec succès !`,
      );
      cy.formControl(fs);
    });

    it('Should not be able to update a fs with an error( emails ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { emails: '* *' };
      
      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      // Assert
      cy.contains(`Veuillez mettre des emails valides ( Ex: email@email.com )`);
    });

    it('Should not be able to update a fs with an error( site ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { site: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      // Assert
      cy.contains(`Veuillez mettre une URL valide ( Ex: https://site.com/ )`);
    });

    it('Should not be able to update a fs with an error( redirectUriLogout ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { redirectUriLogout: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      
      cy.formFill(fs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      );
    });

    it('Should not be able to update a fs with an error( redirectUri ) ', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        typeEvent: true,
        totp: true,
      };

      const fs = { redirectUri: '**' };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();
      
      cy.formFill(fs, mockConfig);

      // Assert
      cy.contains(
        `Veuillez mettre une URL valide ( Ex: https://urlvalide.com/ )`,
      );
    });

    it('Should not be able to update a fs if TOTP is empty', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: undefined,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
      };

      // Action    
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('[type="radio"]').check('public', { force: true });
      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(`Veuillez mettre un code TOTP valide.`);
    });

    it('Should not be able to update a fs if TOTP is wrong', () => {
      // Arrange
      const mockConfig = {
        ...configuration,
        totp: false,
      };

      const fs = {
        name: 'MyFirstFSCypress',
        redirectUri: 'https://url.com',
        redirectUriLogout: 'https://url.com/logout',
        site: 'https://url.com',
        emails: 'valenttin@gmail.com',
        ipAddresses: '192.0.0.0',
      };

      // Action
      cy.visit(`/service-provider?page=1&limit=9000`);

      cy.contains(`MyFirstFSCypress`).should('be.visible');
      cy.get('a.btn-action-update')
        .last()
        .click();

      cy.formFill(fs, mockConfig);

      cy.get('form[name="fs-form"] button[type="submit"]').click();

      // Assert
      cy.contains(`Le TOTP saisi n'est pas valide`);
    });
  });
});
