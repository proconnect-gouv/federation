import { b64toBlob } from './service-provider.utils';

const BASE_URL = Cypress.config('baseUrl');

export function uploadCSV(configuration, filename) {
  cy.wrap({
    filename,
  })
    .its('filename')
    .should('not.to.be.empty');

  cy.url().should('eq', `${BASE_URL}/service-provider`);
  cy.contains('Créer un fournisseur de service').click();
  cy.url().should('eq', `${BASE_URL}/service-provider/create`);

  cy.get('input[name=csv-input]').then($input => {
    cy.wrap($input).should('have.class', 'csv');
    return cy.fixture(`csv/${filename}.csv`).then(fileContent => {
      return cy.wrap($input).attachFile(
        {
          fileContent,
          fileName: `${filename}.csv`,
          mimeType: 'text/csv',
        },
        {
          subjectType: 'input',
        },
      );
    });
  });
  if ('totp' in configuration) {
    cy.totp(configuration);
  }
}

export function createServiceProvider(serviceProviderInfo, configuration) {
  cy.url().should('eq', `${BASE_URL}/service-provider`);
  cy.contains('Créer un fournisseur de service').click();

  const spFields = (({
    name,
    platform,
    signupId,
    redirectUri,
    redirectUriLogout,
    jwksUri,
    site,
    emails,
    ipAddresses,
    eidas,
    entityId = '',
  }) => ({
    name,
    platform,
    signupId,
    redirectUri,
    redirectUriLogout,
    jwksUri,
    site,
    emails,
    ipAddresses,
    eidas,
    entityId,
  }))(serviceProviderInfo);
  cy.formFill(spFields, configuration);

  // Fill in form
  // You cannot directly await the return of "fixtures" (not a real promise...)
  if (configuration.useLogo === true) {
    const { fileName, mimeType, encoding } = serviceProviderInfo;

    cy.fixture(`logos/${fileName}`)
      .then(image => b64toBlob(image, mimeType))
      .then(fileContent => {
        cy.get('input[name=upload-logo]').attachFile({
          fileContent,
          fileName,
          mimeType,
          encoding,
        });
      });
  }

  if (serviceProviderInfo.scopes && serviceProviderInfo.scopes.length > 0) {
    cy.get('[type="checkbox"]').check(serviceProviderInfo.scopes);
  }

  cy.get('[type="radio"]').check('public', {
    force: true,
  });

  if (serviceProviderInfo.identityConsent === true) {
    cy.get('[type="radio"]').check('private', {
      force: true,
    });

    cy.get('form')
      .find('[id="consent-required"]')
      .check('true', {
        force: true,
      });
  }

  cy.get('input[name="trustedIdentity"]').check('true', {
    force: true,
  });
  cy.get('form[name="fs-form"] button[type="submit"]').click();
}
