import $ from 'jquery';
export function validateIdentityProviderCreationForm(element) {
  const inputs = element.getElementsByTagName('input');
  const txtAreas = element.getElementsByTagName('textarea');

  for (let i = 0; i < inputs.length; ++i) {
    // check if inputs which change are valid
    inputs[i].addEventListener('input', function(){
      // check input pattern
      if (inputs[i].checkValidity() === false) {
          inputs[i].classList.remove('is-valid');
          inputs[i].classList.add('is-invalid');
      } else {
          inputs[i].classList.remove('is-invalid');
          inputs[i].classList.add('is-valid');
      }
  }, false);
    // check on submit if form is valid
    element.addEventListener('submit', function(event) {
      if (inputs[i].checkValidity() === false) {
          inputs[i].classList.remove('is-valid');
          inputs[i].classList.add('is-invalid');
          event.preventDefault();
          event.stopPropagation();

      } else {
          inputs[i].classList.remove('is-invalid');
          inputs[i].classList.add('is-valid');
      }
    }, false);
  }
  for (let i = 0; i < txtAreas.length; ++i) {
      txtAreas[i].addEventListener('input', function(){
          validateTextarea(txtAreas[i]);
      });
      element.addEventListener('submit', function(event) {
          if(!validateTextarea(txtAreas[i])) {
              txtAreas[i].classList.remove('is-valid');
              txtAreas[i].classList.add('is-invalid');
              event.preventDefault();
              event.stopPropagation();
          }
      }, false);
  }
}
function validateTextarea(textarea) {
  var error;

  const pattern = new RegExp('^' + $(textarea).attr('pattern') + '$');
  // check each line of text
  $.each($(textarea).val().split("\n"), function () {
      // check if the line matches the pattern
      var hasError = !this.match(pattern);
      // Not supported by the browser, fallback to manual error display...
      $(textarea).toggleClass('is-invalid', !!hasError);
      $(textarea).toggleClass('is-valid', !hasError);

      return error = !hasError;
  });
  return error;
}
