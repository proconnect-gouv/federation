import { AlgoValue } from '../../src/enum';

export function changeDiscovery() {
  document
    .querySelector('#no-discovery')
    .addEventListener('change', function() {
      _handleState('discoveryUrl', true);
      _handleState('userInfoUrl', false);
      _handleState('authorizationUrl', false);
      _handleState('tokenUrl', false);
      displayJwksUrlField();
    });

  document.querySelector('#discovery').addEventListener('change', function() {
    _handleState('discoveryUrl', false);
    _handleState('userInfoUrl', true);
    _handleState('authorizationUrl', true);
    _handleState('tokenUrl', true);
    displayJwksUrlField();
  });
}

export function changeSignature() {
  const userInfoSignedResponseAlg = document.getElementsByName(
    'userinfo_signed_response_alg',
  )[0];
  if (userInfoSignedResponseAlg) {
    userInfoSignedResponseAlg.addEventListener('change', function() {
      displayJwksUrlField();
    });
    document
      .getElementsByName('id_token_signed_response_alg')[0]
      .addEventListener('change', function() {
        displayJwksUrlField();
      });
  }
}

export function displayJwksUrlField() {
  const userInfoSignedResponseAlg = document.getElementsByName(
    'userinfo_signed_response_alg',
  )[0];
  /**
   * This condition is specific for CL because there are no inputs to choose algorithm
   * But it is always equal as HS256 so is asymmetric. And so, JWKS URL input should not be mandatory.
   */
  if (!userInfoSignedResponseAlg) {
    _handleState('jwksUrl', true);
    return;
  }
  const fiForm = document.getElementById('fi-form');
  const discovery = fiForm.elements['discovery'].value === 'true';
  const userinfo_signed_response_alg =
    fiForm.elements['userinfo_signed_response_alg'].value;
  const id_token_signed_response_alg =
    fiForm.elements['id_token_signed_response_alg'].value;
  const isSymmetric =
    id_token_signed_response_alg === AlgoValue.HS256 &&
    userinfo_signed_response_alg === AlgoValue.HS256;
  const isJwksUrlOptional = discovery || isSymmetric;
  _handleState('jwksUrl', isJwksUrlOptional);
}

// Handle changes for input state & label wording
const _handleState = (inputName, isDisabled) => {
  const requiredLabel = document.querySelector(`label[for=${inputName}] span`);
  const input = document.querySelector(`input[name=${inputName}]`);
  input.disabled = isDisabled;
  input.required = !isDisabled;
  if (isDisabled) {
    requiredLabel.classList.add('d-none');
    if (input.classList.contains('is-invalid')) {
      input.classList.add('is-invalid-disabled');
      input.classList.remove('is-invalid');
    }
  } else {
    requiredLabel.classList.remove('d-none');
    if (input.classList.contains('is-invalid-disabled')) {
      input.classList.add('is-invalid');
    }
  }
};
