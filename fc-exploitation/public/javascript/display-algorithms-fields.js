export function displayAlgorithmsFields(element) {
  const algoArray = [
    {
      algorithm: __ALGONAME__.USERINFO_ENCRYPTED_RESPONSE_ENC,
      values: [__ALGOVALUE__.A256GCM],
    },
    {
      algorithm: __ALGONAME__.USERINFO_ENCRYPTED_RESPONSE_ALG,
      values: [__ALGOVALUE__.ECDH_ES, __ALGOVALUE__.RSA_OAEP],
    },
    {
      algorithm: __ALGONAME__.USERINFO_SIGNED_RESPONSE_ALG,
      values: [__ALGOVALUE__.ES256],
    },
    {
      algorithm: __ALGONAME__.ID_TOKEN_SIGNED_RESPONSE_ALG,
      values: [__ALGOVALUE__.ES256],
    },
    {
      algorithm: __ALGONAME__.ID_TOKEN_ENCRYPTED_RESPONSE_ALG,
      values: [__ALGOVALUE__.ECDH_ES, __ALGOVALUE__.RSA_OAEP],
    },
    {
      algorithm: __ALGONAME__.ID_TOKEN_ENCRYPTED_RESPONSE_ENC,
      values: [__ALGOVALUE__.A256GCM],
    },
  ];

  // update
  const { value: eidas = 1 } =
    document.querySelector('select[name="eidas"]') || {};
  if (!(parseInt(eidas, 10) < 2)) {
    createAlgorithmFields(algoArray);
  }

  // create
  element.addEventListener('change', function(el) {
    const divAlgoField = document.querySelector(`#algo-field`);
    const eidasValue = el.target.value;
    if (!(parseInt(eidasValue, 10) < 2)) {
      if (document.body.contains(divAlgoField) === false) {
        createAlgorithmFields(algoArray);
      }
    } else {
      divAlgoField && divAlgoField.remove();
    }
  });
}

function createAlgorithmFields(algoArray) {
  // Get data from update view
  let data;
  if (typeof __DATA__ !== 'undefined') {
    data = __DATA__;
  } else {
    data = {};
  }
  // Get the parent element
  let nodeForm = document.querySelector('form[data-select="form"]');
  // Get the parent's eidas level child
  let nodeEidasLvl = document.getElementById('eidas-level');
  // Create div for all algorithms fields
  let divAlgo = document.createElement('div');
  divAlgo.setAttribute('id', 'algo-field');

  // Create all algorithms fields
  algoArray.forEach(({ algorithm, values }) => {
    // create div form group
    const divFormGroup = createElementWithAttribute('div', [
      {
        attribute: 'class',
        value: 'form-group row',
      },
    ]);

    // create label
    const label = createElementWithAttribute('label', [
      {
        attribute: 'class',
        value: 'col-2 col-form-label',
      },
      {
        attribute: 'for',
        value: algorithm,
      },
    ]);
    label.innerHTML = `${algorithm} : `;
    divFormGroup.appendChild(label);

    // create div col 10
    const div = createElementWithAttribute('div', [
      {
        attribute: 'class',
        value: 'col-10',
      },
    ]);

    // create select
    const select = createElementWithAttribute('select', [
      {
        attribute: 'class',
        value: 'custom-select',
      },
      {
        attribute: 'name',
        value: algorithm,
      },
      {
        attribute: 'required',
        value: '',
      },
    ]);
    div.appendChild(select);

    // create options
    values.forEach(value => {
      let optionArray = [
        {
          attribute: 'value',
          value,
        },
      ];

      for (const [keyData, valueData] of Object.entries(data)) {
        if (algorithm === keyData && value === valueData) {
          optionArray.push({ attribute: 'selected', value: '' });
        }
      }

      const option = createElementWithAttribute('option', optionArray);
      option.innerHTML = `${value}`;
      select.appendChild(option);
    });

    divFormGroup.appendChild(div);
    divAlgo.appendChild(divFormGroup);
  });

  // Insert the new element after eidas level
  nodeForm.insertBefore(divAlgo, nodeEidasLvl.nextSibling);
}

function createElementWithAttribute(balise, attributes) {
  const baliseCustom = document.createElement(balise);
  attributes.forEach(({ attribute, value }) => {
    baliseCustom.setAttribute(attribute, value);
  });

  return baliseCustom;
}
