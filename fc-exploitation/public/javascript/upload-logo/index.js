const hasDragNDrop = (() => {
  const div = document.createElement('div');
  return (
    ('draggable' in div || ('ondragstart' in div && 'ondrop' in div)) &&
    'FormData' in window
  );
})();

const canTransformData = (() => 'FileReader' in window)();

const btoaImg = file => {
  const reader = new FileReader();
  return new Promise((resolve, reject) => {
    reader.onerror = () => {
      reader.abort();
      reject(new DOMException('Problème de parsing de fichier'));
    };
    reader.onloadend = () => {
      resolve(reader.result);
    };
    reader.readAsDataURL(file);
  });
};

export function uploadHandler(element) {
  if (!canTransformData) {
    console.warn(
      'Votre navigateur est trop ancien pour télécharger une image, merci de le mettre à jour.',
    );
    return;
  }

  const {
    dataset: { output, error, size: maxSize, type: imgType },
  } = element;
  const zone = output ? element.querySelector(output) : null;
  const logo_result = (zone || element).querySelector('img');
  const logo_data = (zone || element).querySelector('input[type=hidden]');
  const logo_error = error ? element.querySelector(error) : null;
  if (!logo_data) {
    console.error(
      'Impossible de charger une image, car il manque un champ nécessaire dans le formulaire',
    );
    return;
  }
  const inputFile = element.querySelector('input[type=file]');
  const imgRegex = new RegExp(imgType);

  element.classList.add('has-upload');

  const success = data => {
    if (logo_error) {
      logo_error.textContent = '';
      logo_error.classList.remove('has-error');
    }
    element.classList.add('preview');
    logo_data.value = data;
    logo_result.src = data;
    inputFile.setCustomValidity('');
    inputFile.classList.remove('is-invalid');
    inputFile.classList.add('is-valid');
  };

  const failed = message => {
    if (logo_error) {
      logo_error.textContent = message;
      logo_error.classList.add('has-error');
    }
    inputFile.setCustomValidity(message);
    inputFile.classList.remove('is-valid');
    inputFile.classList.add('is-invalid');
    logo_result.src = '';
    logo_data.value = '';
    element.classList.remove('preview');
  };

  const transformTo64 = files => {
    if ('length' in files && files.length > 0) {
      const file = files[0];
      const { size, type } = file;

      element.classList.remove('is-invalid');

      if (size > maxSize) {
        failed(
          `Impossible de charger l'image car elle est trop lourde: ${Math.ceil(
            (size || 0) / 1000,
          )} ko`,
        );
        return;
      }

      if (!type.match(imgRegex)) {
        failed(`Format du fichier incorrect: ${type || 'inconnu'}`);
        return;
      }

      btoaImg(file)
        .then(success)
        .catch(console.error);
    }
  };

  inputFile.addEventListener('change', e => {
    transformTo64(e.target.files);
  });
  element.addEventListener('click', e => {
    inputFile.click();
  });

  if (hasDragNDrop) {
    element.on = function(events, action) {
      const eventsList = (events || '').split(' ');
      if (eventsList.length) {
        eventsList.forEach(event => {
          this.addEventListener(event, action);
        });
      }
      return this;
    };

    const enteringEvents = 'dragover dragenter';
    const leavingEvents = 'dragleave dragend drop';
    const allDragEvents = `${enteringEvents} ${leavingEvents}`;

    element
      .on(allDragEvents, e => {
        e.preventDefault();
        e.stopPropagation();
      })
      .on(enteringEvents, () => {
        element.classList.add('is-dragover');
      })
      .on(leavingEvents, () => {
        element.classList.remove('is-dragover');
      })
      .on('drop', e => {
        transformTo64(e.dataTransfer.files);
      });
  }
}
