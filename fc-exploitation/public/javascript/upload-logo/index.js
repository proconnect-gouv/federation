const hasDragNDrop = (() => {
  const div = document.createElement('div');
  return (
    ('draggable' in div || ('ondragstart' in div && 'ondrop' in div)) &&
    'FormData' in window
  );
})();

const canTransformData = (() => 'FileReader' in window)();

const FORMAT = {
  DATAURI: 'datauri',
  TEXT: 'text',
}
const btoaImg = (file, format = FORMAT.DATAURI) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = () => {
      reader.abort();
      reject(new DOMException('Problème de parsing de fichier'));
    };
    reader.onloadend = () => {
      resolve(reader.result);
    };

    switch (format) {
      case FORMAT.DATAURI: reader.readAsDataURL(file); break;
      case FORMAT.TEXT: reader.readAsText(file); break;
      default: throw new Error('Problème de conversion de fichier');
    }
  });
};

const isDirtySVG = async file => {
  const { type } = file;
  const SVG_MIME = 'image/svg+xml';
  if (type === SVG_MIME) {
    let content;
    try {
      content = await btoaImg(file, FORMAT.TEXT);
    } catch (error) {
      console.error(error);
      return true;
    }
    if (content.includes('script')) {
      return true;
    }

    const parser = new DOMParser();
    let doc;
    try {
      const XML = parser.parseFromString(content, SVG_MIME);
      doc = XML.documentElement;
    } catch (error) {
      console.error(error);
      return true;
    };
    const foreign = doc.querySelector('foreignObject');
    if (foreign) {
      return true;
    }
  }
  return false;
};

export function uploadHandler(element) {
  if (!canTransformData) {
    console.warn(
      'Votre navigateur est trop ancien pour télécharger une image, merci de le mettre à jour.',
    );
    return;
  }

  const {
    dataset: { output, error, size: maxSize, type: imgType, source: sourceURL },
  } = element;
  const zone = output ? element.querySelector(output) : null;
  const logo_result = (zone || element).querySelector('img');
  const logo_data = (zone || element).querySelector('input[type=hidden]');
  const logo_error = error ? element.querySelector(error) : null;
  if (!logo_data) {
    console.error(
      'Impossible de charger une image, car il manque un champ nécessaire dans le formulaire',
    );
    return;
  }
  const inputFile = element.querySelector('input[type=file]');
  const imgRegex = new RegExp(imgType);

  // user update the photo
  let updatePhoto = false;
  const eventUpdate = new Event('logo-updated');
  const eventReset = new Event('logo-reset');

  element.classList.add('has-upload');

  /**
   * Activate the preview display
   */
  const success = data => {
    if (logo_error) {
      logo_error.textContent = '';
      logo_error.classList.remove('has-error');
    }
    element.classList.add('preview');
    logo_data.value = data;
    logo_result.src = data;
    inputFile.setCustomValidity('');
    inputFile.classList.remove('is-invalid');
    inputFile.classList.add('is-valid');
    element.dispatchEvent(updatePhoto ? eventUpdate : eventReset);
  };

  /**
   * Activate the error information and reset preview
   */
  const failed = message => {
    if (logo_error) {
      logo_error.textContent = message;
      logo_error.classList.add('has-error');
    }
    inputFile.setCustomValidity(message);
    inputFile.classList.remove('is-valid');
    inputFile.classList.add('is-invalid');
    logo_result.src = '';
    logo_data.value = '';
    element.classList.remove('preview');
    element.dispatchEvent(eventReset);
  };

  /**
   * Check if the reset button can be displayed
   */
  const canResetImage = () => {
    if (updatePhoto) {
      // hide error from the failed upload when the user change image
      const errorDisplay = element.querySelector('.force-display');
      if (errorDisplay) {
        errorDisplay.classList.remove('force-display');
      }

      if (sourceURL) {
        let link = document.querySelector('#logo-reset');
        if (!link) {
          link = document.createElement('btn');
          link.appendChild(document.createTextNode(' reset'));
          link.id = 'logo-reset';
          const classes = 'fa fa-undo btn btn-outline-info mt-3 mr-3';
          link.classList.add(...classes.split(' '));
          link.onclick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            resetImage();
          }
          element.closest('form').appendChild(link);
        }
      }
    }
  }

  /**
   * Extract the file from drag'n drop or file input and transform it
   */
  const uploadToPreview = files => {
    if ('length' in files && files.length > 0) {
      updatePhoto = true;
      const [file] = files;
      transformTo64(file);
    }
  };

  /**
   * Check the image and transform it to its base64 equivalent
   */
  const transformTo64 = async file => {
    const { size, type } = file;

    element.classList.remove('is-invalid');

    if (size > maxSize) {
      failed(
        `Impossible de charger l'image car elle est trop lourde: ${Math.ceil(
          (size || 0) / 1000,
        )} ko`,
      );
      return;
    }

    if (!type.match(imgRegex)) {
      failed(`Format du fichier incorrect: ${type || 'inconnu'}`);
      return;
    }

    const dirty  = await isDirtySVG(file);
    if (dirty) {
      const message = "Ce fichier contient des éléments interprétables par le navigateur (Ex. script)";
      failed(message);
      return;
    }

    await btoaImg(file)
      .then(success)
      .then(canResetImage)
      .catch(console.error);
  };

  inputFile.addEventListener('change', e => {
    uploadToPreview(e.target.files);
  });
  element.addEventListener('click', e => {
    inputFile.click();
  });

  /**
   * DRAG 'N DROP
   */
  if (hasDragNDrop) {
    element.on = function(events, action) {
      const eventsList = (events || '').split(' ');
      if (eventsList.length) {
        eventsList.forEach(event => {
          this.addEventListener(event, action);
        });
      }
      return this;
    };

    const enteringEvents = 'dragover dragenter';
    const leavingEvents = 'dragleave dragend drop';
    const allDragEvents = `${enteringEvents} ${leavingEvents}`;

    element
      .on(allDragEvents, e => {
        e.preventDefault();
        e.stopPropagation();
      })
      .on(enteringEvents, () => {
        element.classList.add('is-dragover');
      })
      .on(leavingEvents, () => {
        element.classList.remove('is-dragover');
      })
      .on('drop', e => {
        uploadToPreview(e.dataTransfer.files);
      });
  }

  /**
   * Remove upload image and display the original image uploaded
   */
  const resetImage = () => {
    updatePhoto = false;
    if (sourceURL) {
      fetch(sourceURL)
      .then(res => res.blob())
      .then(transformTo64);
    } else {
      logo_result.src = '';
      logo_data.value = '';
      inputFile.classList.remove('is-valid');
      element.classList.remove('preview');
      element.dispatchEvent(eventReset);
    }
    
    const link = document.querySelector('#logo-reset');
    if (link) {
      link.parentNode.removeChild(link);
    }
  }
  resetImage();
}
