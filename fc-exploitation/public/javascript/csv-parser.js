import * as Papa from 'papaparse';
import isBase64 from 'validator/lib/isBase64';

const CSV_SIZE_LIMIT = 1572864;
const SUCCESS = 'green';
const ERROR = 'red';

export function csvParser(element) {
  handleFile();
  element.addEventListener('change', function (el) {
    if (document.querySelector('#alert_error')) {
      document.querySelector('#alert_error').remove();
    }
    document.querySelector('#fs-form').reset();
    resetLogoInput();
    if(el){
      const file = el.srcElement.files[0];
      if(isSizeOk(file.size)) {
        getName(file);
        getData(file);
      }
    }
  });
}

/**
 * Check if the browser support the FileReader API
 */
const handleFile = () => {
  if (!window.FileReader) {
    displayError(`L'API FileReader n'est pas supportée par votre navigateur.`);
  }
}

/**
 * Get the data from csv
 * @param {file} file 
 */
const getData = (file) => {
  const csvReader = new FileReader();
  csvReader.onload = loadHandler;
  csvReader.onerror = csvErrorHandler;
  csvReader.readAsText(file);
}

/**
 * Getting the csv file's name for display
 * @param {string} file 
 */
const getName = (file) => {
  const csvName = document.querySelector('#file-name');
  csvName.textContent = file.name;
}

/**
 * Parsing csv data
 * @param {Array} csvFile 
 */
const parseData = (csvFile) => {
  const parsedData =  [];
  let parsingIsOk = true;
  let csvColumn;
  let csvValue;
 try {
   [csvColumn, csvValue] = Papa.parse(csvFile).data;
   csvColumn.forEach((element, index) => {
     try {
       parsedData[csvColumn[index]] = csvValue[index];
     } catch (error) {
       parsingIsOk = false;
     }
   });
 } catch (error) {
   displayError(error.message);
 }
  if (!parsingIsOk){
    displayError('Erreur de parsing.');
    setTextColor(ERROR);
  } else {
    setTextColor(SUCCESS);
  }
  return parsedData;
}

/**
 * Call function for:
 * parsing data
 * filling the form with the parsed data
 * @param {Object} event 
 */
const loadHandler = (event) => {
  const csvFile = event.target.result;
  const csvPasredData = parseData(csvFile);
  fillFormWithCsvData(csvPasredData);
}

/**
 * Handle error if reading csv is not possible
 * @param {Object} event 
 */
const csvErrorHandler = (event) => {
  if (event.target.error.name === 'NotReadableError') {
    displayError("Impossible de lire le fichier.");
  }
}

/**
 * Filling the form with parsed data from csv
 * @param {Array} data 
 */
const fillFormWithCsvData = (data) => {
  for (const key in data) {
    if (document.querySelector(`#${key}`) && key !== ''){
      document.querySelector(`#${key}`).value = data[key].replace(/,/g, '\r\n');
    }
    else if (key === 'logo' && data[key] !== '') {
      const { isTypeOk, isB64Ok } = checkDataUriValues(data[key]);

      if (isTypeOk && isB64Ok){
        fillImgInput(data[key]);
        setTextColor(SUCCESS);
      } else {
        displayError("Format de logo non valide. Liste des formats acceptés : png | jpeg | jpg | gif | svg\+xml");
        setTextColor(ERROR);
      }
    } else {
      console.warn("Champs / Informations indisponible.");
    }
  }
}

/**
 * Check if csv size is allowed.
 * @param {number} size 
 */
const isSizeOk = (size) => {

  if (size > CSV_SIZE_LIMIT) {
    displayError("Le fichier csv est trop lourd. La taille maximum est de 1.5Mo");
    setTextColor(ERROR);
    return false;
  }
  setTextColor(SUCCESS);
  return true;
}

/**
 * Display error message relative to importing a csv.
 * @param {string} message 
 */
const displayError = (message) => {
  const alertContainer = document.querySelector('#form-card');
  const alert = document.createElement("div");

  alert.classList.add('alert', 'alert-danger', 'mt-3');
  alert.setAttribute("id", "alert_error");
  alert.innerHTML = message;

  alertContainer.insertAdjacentElement('afterbegin', alert);

  console.error(message);
}

/**
 * Check validity of the dataURI
 * @param {string} dataURI 
 */
const checkDataUriValues = (dataURI) => {
  const [type, base64] = dataURI.split(";");
  const typeImg = type.split('/');
  const base64Array = base64.split(",");
  const base64String = base64Array[1];
  
  let isTypeOk;
  const isB64Ok = isBase64(base64String);

  if (typeImg[0] === 'data:image' && ['png', 'jpg', 'jpeg', 'gif', 'svg+xml'].includes(typeImg[1])) {
    isTypeOk = true;
  }
  else {
    isTypeOk = false;
  }
  return {isTypeOk, isB64Ok};
}

/**
 * Fill all inputs realtive to the logo.
 * @param {string} imgValue 
 */
const fillImgInput = (imgValue) => {
  const inputFile = document.querySelector('input[name=upload-logo]');
  const { logoResult, logoData, uploadBox } = getLogoInputs();

  uploadBox.classList.add('preview');
  logoResult.src = imgValue;
  logoData.value = imgValue;
  inputFile.classList.add('is-valid');
}

/**
 * Set text color if error or valid csv file or actions.
 * @param {string} color 
 */
const setTextColor = (color) => {
  const csvName = document.querySelector('#file-name');
  csvName.style.color = color;
}

/**
 * Get HTML element relative to the logo.
 */
const getLogoInputs = () => {
  const logoResult = document.querySelector('img[id=logo-result]');
  const logoData = document.querySelector('input[name=logo]');
  const uploadBox = document.querySelector('#box-upload');

  return { logoResult, logoData, uploadBox };
}

/**
 * rest values of all HTML elements relative to the logo.
 */
const resetLogoInput = () => {
  const { logoResult, logoData, uploadBox } = getLogoInputs();

  logoResult.src = "";
  logoData.value = "";
  uploadBox.classList.remove('preview');
}